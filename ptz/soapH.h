/* soapH.h
   Generated by gSOAP 2.8.101 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__RetryAfter is a typedef synonym of ULONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter_DEFINED
#define SOAP_TYPE__wsa5__RetryAfter_DEFINED

#define soap_default__wsa5__RetryAfter soap_default_ULONG64


#define soap__wsa5__RetryAfter2s soap_ULONG642s


#define soap_out__wsa5__RetryAfter soap_out_ULONG64


#define soap_s2_wsa5__RetryAfter soap_s2ULONG64


#define soap_in__wsa5__RetryAfter soap_in_ULONG64


#define soap_instantiate__wsa5__RetryAfter soap_instantiate_ULONG64


#define soap_new__wsa5__RetryAfter soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RetryAfter(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write__wsa5__RetryAfter(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RetryAfter soap_get_ULONG64


#define soap_read__wsa5__RetryAfter soap_read_ULONG64


#define soap_GET__wsa5__RetryAfter soap_GET_ULONG64


#define soap_POST_recv__wsa5__RetryAfter soap_POST_recv_ULONG64

#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__MoveStatus_DEFINED
#define SOAP_TYPE_tt__MoveStatus_DEFINED

inline void soap_default_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__MoveStatus
	*a = SOAP_DEFAULT_tt__MoveStatus;
#else
	*a = (enum tt__MoveStatus)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveStatus(struct soap*, const char*, int, const enum tt__MoveStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__MoveStatus2s(struct soap*, enum tt__MoveStatus);
SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_in_tt__MoveStatus(struct soap*, const char*, enum tt__MoveStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__MoveStatus(struct soap*, const char*, enum tt__MoveStatus *);

SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_new_tt__MoveStatus(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__MoveStatus(struct soap*, const enum tt__MoveStatus *, const char*, const char*);

inline int soap_write_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__MoveStatus(soap, p, "tt:MoveStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_get_tt__MoveStatus(struct soap*, enum tt__MoveStatus *, const char*, const char*);

inline int soap_read_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__MoveStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__MoveStatus(struct soap *soap, const char *URL, enum tt__MoveStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__MoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__MoveStatus(struct soap *soap, enum tt__MoveStatus *p)
{
	if (::soap_read_tt__MoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourOperation_DEFINED

inline void soap_default_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__PTZPresetTourOperation
	*a = SOAP_DEFAULT_tt__PTZPresetTourOperation;
#else
	*a = (enum tt__PTZPresetTourOperation)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOperation(struct soap*, const char*, int, const enum tt__PTZPresetTourOperation *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourOperation2s(struct soap*, enum tt__PTZPresetTourOperation);
SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_in_tt__PTZPresetTourOperation(struct soap*, const char*, enum tt__PTZPresetTourOperation *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourOperation(struct soap*, const char*, enum tt__PTZPresetTourOperation *);

SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_new_tt__PTZPresetTourOperation(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourOperation(struct soap*, const enum tt__PTZPresetTourOperation *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourOperation(soap, p, "tt:PTZPresetTourOperation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_get_tt__PTZPresetTourOperation(struct soap*, enum tt__PTZPresetTourOperation *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourOperation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourOperation(struct soap *soap, const char *URL, enum tt__PTZPresetTourOperation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourOperation(struct soap *soap, enum tt__PTZPresetTourOperation *p)
{
	if (::soap_read_tt__PTZPresetTourOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourDirection_DEFINED

inline void soap_default_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__PTZPresetTourDirection
	*a = SOAP_DEFAULT_tt__PTZPresetTourDirection;
#else
	*a = (enum tt__PTZPresetTourDirection)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourDirection(struct soap*, const char*, int, const enum tt__PTZPresetTourDirection *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourDirection2s(struct soap*, enum tt__PTZPresetTourDirection);
SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_in_tt__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection *);

SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_new_tt__PTZPresetTourDirection(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourDirection(struct soap*, const enum tt__PTZPresetTourDirection *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourDirection(soap, p, "tt:PTZPresetTourDirection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_get_tt__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourDirection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourDirection(struct soap *soap, const char *URL, enum tt__PTZPresetTourDirection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourDirection(struct soap *soap, enum tt__PTZPresetTourDirection *p)
{
	if (::soap_read_tt__PTZPresetTourDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourState_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourState_DEFINED

inline void soap_default_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__PTZPresetTourState
	*a = SOAP_DEFAULT_tt__PTZPresetTourState;
#else
	*a = (enum tt__PTZPresetTourState)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourState(struct soap*, const char*, int, const enum tt__PTZPresetTourState *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourState2s(struct soap*, enum tt__PTZPresetTourState);
SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_in_tt__PTZPresetTourState(struct soap*, const char*, enum tt__PTZPresetTourState *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourState(struct soap*, const char*, enum tt__PTZPresetTourState *);

SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_new_tt__PTZPresetTourState(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourState(struct soap*, const enum tt__PTZPresetTourState *, const char*, const char*);

inline int soap_write_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__PTZPresetTourState(soap, p, "tt:PTZPresetTourState", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_get_tt__PTZPresetTourState(struct soap*, enum tt__PTZPresetTourState *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourState(struct soap *soap, const char *URL, enum tt__PTZPresetTourState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourState(struct soap *soap, enum tt__PTZPresetTourState *p)
{
	if (::soap_read_tt__PTZPresetTourState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReverseMode_DEFINED
#define SOAP_TYPE_tt__ReverseMode_DEFINED

inline void soap_default_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__ReverseMode
	*a = SOAP_DEFAULT_tt__ReverseMode;
#else
	*a = (enum tt__ReverseMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseMode(struct soap*, const char*, int, const enum tt__ReverseMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReverseMode2s(struct soap*, enum tt__ReverseMode);
SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_in_tt__ReverseMode(struct soap*, const char*, enum tt__ReverseMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReverseMode(struct soap*, const char*, enum tt__ReverseMode *);

SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_new_tt__ReverseMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReverseMode(struct soap*, const enum tt__ReverseMode *, const char*, const char*);

inline int soap_write_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReverseMode(soap, p, "tt:ReverseMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_get_tt__ReverseMode(struct soap*, enum tt__ReverseMode *, const char*, const char*);

inline int soap_read_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ReverseMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReverseMode(struct soap *soap, const char *URL, enum tt__ReverseMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReverseMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReverseMode(struct soap *soap, enum tt__ReverseMode *p)
{
	if (::soap_read_tt__ReverseMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlipMode_DEFINED
#define SOAP_TYPE_tt__EFlipMode_DEFINED

inline void soap_default_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_tt__EFlipMode
	*a = SOAP_DEFAULT_tt__EFlipMode;
#else
	*a = (enum tt__EFlipMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipMode(struct soap*, const char*, int, const enum tt__EFlipMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__EFlipMode2s(struct soap*, enum tt__EFlipMode);
SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_in_tt__EFlipMode(struct soap*, const char*, enum tt__EFlipMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__EFlipMode(struct soap*, const char*, enum tt__EFlipMode *);

SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_new_tt__EFlipMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__EFlipMode(struct soap*, const enum tt__EFlipMode *, const char*, const char*);

inline int soap_write_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__EFlipMode(soap, p, "tt:EFlipMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_get_tt__EFlipMode(struct soap*, enum tt__EFlipMode *, const char*, const char*);

inline int soap_read_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__EFlipMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlipMode(struct soap *soap, const char *URL, enum tt__EFlipMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlipMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlipMode(struct soap *soap, enum tt__EFlipMode *p)
{
	if (::soap_read_tt__EFlipMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__DecisionType_DEFINED
#define SOAP_TYPE_saml2__DecisionType_DEFINED

inline void soap_default_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_saml2__DecisionType
	*a = SOAP_DEFAULT_saml2__DecisionType;
#else
	*a = (enum saml2__DecisionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__DecisionType(struct soap*, const char*, int, const enum saml2__DecisionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml2__DecisionType2s(struct soap*, enum saml2__DecisionType);
SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_in_saml2__DecisionType(struct soap*, const char*, enum saml2__DecisionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml2__DecisionType(struct soap*, const char*, enum saml2__DecisionType *);

SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_new_saml2__DecisionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__DecisionType(struct soap*, const enum saml2__DecisionType *, const char*, const char*);

inline int soap_write_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_get_saml2__DecisionType(struct soap*, enum saml2__DecisionType *, const char*, const char*);

inline int soap_read_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_saml2__DecisionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *p)
{
	if (::soap_read_saml2__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__DecisionType_DEFINED
#define SOAP_TYPE_saml1__DecisionType_DEFINED

inline void soap_default_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_saml1__DecisionType
	*a = SOAP_DEFAULT_saml1__DecisionType;
#else
	*a = (enum saml1__DecisionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DecisionType(struct soap*, const char*, int, const enum saml1__DecisionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml1__DecisionType2s(struct soap*, enum saml1__DecisionType);
SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_in_saml1__DecisionType(struct soap*, const char*, enum saml1__DecisionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml1__DecisionType(struct soap*, const char*, enum saml1__DecisionType *);

SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_new_saml1__DecisionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DecisionType(struct soap*, const enum saml1__DecisionType *, const char*, const char*);

inline int soap_write_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_get_saml1__DecisionType(struct soap*, enum saml1__DecisionType *, const char*, const char*);

inline int soap_read_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_saml1__DecisionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *p)
{
	if (::soap_read_saml1__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__FaultCodeType_DEFINED
#define SOAP_TYPE_wsc__FaultCodeType_DEFINED

inline void soap_default_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsc__FaultCodeType
	*a = SOAP_DEFAULT_wsc__FaultCodeType;
#else
	*a = (enum wsc__FaultCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeType(struct soap*, const char*, int, const enum wsc__FaultCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsc__FaultCodeType2s(struct soap*, enum wsc__FaultCodeType);
SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_in_wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *);

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_new_wsc__FaultCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeType(struct soap*, const enum wsc__FaultCodeType *, const char*, const char*);

inline int soap_write_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_get_wsc__FaultCodeType(struct soap*, enum wsc__FaultCodeType *, const char*, const char*);

inline int soap_read_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsc__FaultCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__FaultCodeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *p)
{
	if (::soap_read_wsc__FaultCodeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsse__FaultcodeEnum_DEFINED
#define SOAP_TYPE_wsse__FaultcodeEnum_DEFINED

inline void soap_default_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsse__FaultcodeEnum
	*a = SOAP_DEFAULT_wsse__FaultcodeEnum;
#else
	*a = (enum wsse__FaultcodeEnum)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__FaultcodeEnum(struct soap*, const char*, int, const enum wsse__FaultcodeEnum *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsse__FaultcodeEnum2s(struct soap*, enum wsse__FaultcodeEnum);
SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_in_wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *);

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_new_wsse__FaultcodeEnum(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__FaultcodeEnum(struct soap*, const enum wsse__FaultcodeEnum *, const char*, const char*);

inline int soap_write_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_get_wsse__FaultcodeEnum(struct soap*, enum wsse__FaultcodeEnum *, const char*, const char*);

inline int soap_read_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsse__FaultcodeEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsse__FaultcodeEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *p)
{
	if (::soap_read_wsse__FaultcodeEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsu__tTimestampFault_DEFINED
#define SOAP_TYPE_wsu__tTimestampFault_DEFINED

inline void soap_default_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsu__tTimestampFault
	*a = SOAP_DEFAULT_wsu__tTimestampFault;
#else
	*a = (enum wsu__tTimestampFault)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsu__tTimestampFault(struct soap*, const char*, int, const enum wsu__tTimestampFault *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsu__tTimestampFault2s(struct soap*, enum wsu__tTimestampFault);
SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_in_wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *);

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_new_wsu__tTimestampFault(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsu__tTimestampFault(struct soap*, const enum wsu__tTimestampFault *, const char*, const char*);

inline int soap_write_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_get_wsu__tTimestampFault(struct soap*, enum wsu__tTimestampFault *, const char*, const char*);

inline int soap_read_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsu__tTimestampFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsu__tTimestampFault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *p)
{
	if (::soap_read_wsu__tTimestampFault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED
#define SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED

inline void soap_default__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__wsa5__IsReferenceParameter
	*a = SOAP_DEFAULT__wsa5__IsReferenceParameter;
#else
	*a = (enum _wsa5__IsReferenceParameter)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_new__wsa5__IsReferenceParameter(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_write__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_read__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__wsa5__IsReferenceParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesType_DEFINED

inline void soap_default_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesType
	*a = SOAP_DEFAULT_wsa5__FaultCodesType;
#else
	*a = (enum wsa5__FaultCodesType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_new_wsa5__FaultCodesType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_write_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_read_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType_DEFINED
#define SOAP_TYPE_wsa5__RelationshipType_DEFINED

inline void soap_default_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipType
	*a = SOAP_DEFAULT_wsa5__RelationshipType;
#else
	*a = (enum wsa5__RelationshipType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_new_wsa5__RelationshipType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_write_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_read_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken_DEFINED
#define SOAP_TYPE_tt__ReferenceToken_DEFINED

inline void soap_default_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__ReferenceToken(struct soap*, const std::string *);

#define soap_tt__ReferenceToken2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReferenceToken(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__ReferenceToken(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 64, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__ReferenceToken(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__ReferenceToken soap_instantiate_std__string


#define soap_new_tt__ReferenceToken soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReferenceToken(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__ReferenceToken(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReferenceToken(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__ReferenceToken(soap, p, "tt:ReferenceToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__ReferenceToken(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__ReferenceToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReferenceToken(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReferenceToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReferenceToken(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__ReferenceToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData_DEFINED
#define SOAP_TYPE_tt__AuxiliaryData_DEFINED

inline void soap_default_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__AuxiliaryData(struct soap*, const std::string *);

#define soap_tt__AuxiliaryData2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AuxiliaryData(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__AuxiliaryData(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 128, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__AuxiliaryData(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__AuxiliaryData soap_instantiate_std__string


#define soap_new_tt__AuxiliaryData soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AuxiliaryData(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__AuxiliaryData(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__AuxiliaryData(soap, p, "tt:AuxiliaryData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__AuxiliaryData(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__AuxiliaryData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__AuxiliaryData(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__AuxiliaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__AuxiliaryData(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__AuxiliaryData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Name_DEFINED
#define SOAP_TYPE_tt__Name_DEFINED

inline void soap_default_tt__Name(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Name(struct soap*, const std::string *);

#define soap_tt__Name2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Name(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__Name(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 64, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Name(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__Name soap_instantiate_std__string


#define soap_new_tt__Name soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Name(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__Name(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Name(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__Name(soap, p, "tt:Name", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Name(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__Name(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__Name(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Name(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Name(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Name(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__Name(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntAttrList_DEFINED
#define SOAP_TYPE_tt__IntAttrList_DEFINED

inline void soap_default_tt__IntAttrList(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__IntAttrList(struct soap*, const std::string *);

#define soap_tt__IntAttrList2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntAttrList(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2tt__IntAttrList(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__IntAttrList(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_tt__IntAttrList soap_instantiate_std__string


#define soap_new_tt__IntAttrList soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IntAttrList(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_tt__IntAttrList(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_tt__IntAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntAttrList(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_tt__IntAttrList(soap, p, "tt:IntAttrList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__IntAttrList(struct soap*, std::string *, const char*, const char*);

inline int soap_read_tt__IntAttrList(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_tt__IntAttrList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntAttrList(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntAttrList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntAttrList(struct soap *soap, std::string *p)
{
	if (::soap_read_tt__IntAttrList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__GeoLocation_DEFINED
#define SOAP_TYPE_tt__GeoLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GeoLocation(struct soap*, const char*, int, const tt__GeoLocation *, const char*);
SOAP_FMAC3 tt__GeoLocation * SOAP_FMAC4 soap_in_tt__GeoLocation(struct soap*, const char*, tt__GeoLocation *, const char*);
SOAP_FMAC1 tt__GeoLocation * SOAP_FMAC2 soap_instantiate_tt__GeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline tt__GeoLocation * soap_new_tt__GeoLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__GeoLocation(soap, n, NULL, NULL, NULL);
}

inline tt__GeoLocation * soap_new_req_tt__GeoLocation(
	struct soap *soap)
{
	tt__GeoLocation *_p = ::soap_new_tt__GeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__GeoLocation * soap_new_set_tt__GeoLocation(
	struct soap *soap,
	double *lon,
	double *lat,
	float *elevation)
{
	tt__GeoLocation *_p = ::soap_new_tt__GeoLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__GeoLocation::lon = lon;
		_p->tt__GeoLocation::lat = lat;
		_p->tt__GeoLocation::elevation = elevation;
	}
	return _p;
}

inline int soap_write_tt__GeoLocation(struct soap *soap, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:GeoLocation", p->soap_type() == SOAP_TYPE_tt__GeoLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__GeoLocation * SOAP_FMAC4 soap_get_tt__GeoLocation(struct soap*, tt__GeoLocation *, const char*, const char*);

inline int soap_read_tt__GeoLocation(struct soap *soap, tt__GeoLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__GeoLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__GeoLocation(struct soap *soap, const char *URL, tt__GeoLocation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__GeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__GeoLocation(struct soap *soap, tt__GeoLocation *p)
{
	if (::soap_read_tt__GeoLocation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZMoveStatus_DEFINED
#define SOAP_TYPE_tt__PTZMoveStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZMoveStatus(struct soap*, const char*, int, const tt__PTZMoveStatus *, const char*);
SOAP_FMAC3 tt__PTZMoveStatus * SOAP_FMAC4 soap_in_tt__PTZMoveStatus(struct soap*, const char*, tt__PTZMoveStatus *, const char*);
SOAP_FMAC1 tt__PTZMoveStatus * SOAP_FMAC2 soap_instantiate_tt__PTZMoveStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZMoveStatus * soap_new_tt__PTZMoveStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZMoveStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZMoveStatus * soap_new_req_tt__PTZMoveStatus(
	struct soap *soap)
{
	tt__PTZMoveStatus *_p = ::soap_new_tt__PTZMoveStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZMoveStatus * soap_new_set_tt__PTZMoveStatus(
	struct soap *soap,
	enum tt__MoveStatus *PanTilt,
	enum tt__MoveStatus *Zoom)
{
	tt__PTZMoveStatus *_p = ::soap_new_tt__PTZMoveStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZMoveStatus::PanTilt = PanTilt;
		_p->tt__PTZMoveStatus::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZMoveStatus", p->soap_type() == SOAP_TYPE_tt__PTZMoveStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZMoveStatus * SOAP_FMAC4 soap_get_tt__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *, const char*, const char*);

inline int soap_read_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZMoveStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZMoveStatus(struct soap *soap, const char *URL, tt__PTZMoveStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZMoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus *p)
{
	if (::soap_read_tt__PTZMoveStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZStatus_DEFINED
#define SOAP_TYPE_tt__PTZStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatus(struct soap*, const char*, int, const tt__PTZStatus *, const char*);
SOAP_FMAC3 tt__PTZStatus * SOAP_FMAC4 soap_in_tt__PTZStatus(struct soap*, const char*, tt__PTZStatus *, const char*);
SOAP_FMAC1 tt__PTZStatus * SOAP_FMAC2 soap_instantiate_tt__PTZStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatus * soap_new_tt__PTZStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZStatus * soap_new_req_tt__PTZStatus(
	struct soap *soap,
	time_t UtcTime)
{
	tt__PTZStatus *_p = ::soap_new_tt__PTZStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatus::UtcTime = UtcTime;
	}
	return _p;
}

inline tt__PTZStatus * soap_new_set_tt__PTZStatus(
	struct soap *soap,
	tt__PTZVector *Position,
	tt__PTZMoveStatus *MoveStatus,
	std::string *Error,
	time_t UtcTime)
{
	tt__PTZStatus *_p = ::soap_new_tt__PTZStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZStatus::Position = Position;
		_p->tt__PTZStatus::MoveStatus = MoveStatus;
		_p->tt__PTZStatus::Error = Error;
		_p->tt__PTZStatus::UtcTime = UtcTime;
	}
	return _p;
}

inline int soap_write_tt__PTZStatus(struct soap *soap, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZStatus", p->soap_type() == SOAP_TYPE_tt__PTZStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZStatus * SOAP_FMAC4 soap_get_tt__PTZStatus(struct soap*, tt__PTZStatus *, const char*, const char*);

inline int soap_read_tt__PTZStatus(struct soap *soap, tt__PTZStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZStatus(struct soap *soap, const char *URL, tt__PTZStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZStatus(struct soap *soap, tt__PTZStatus *p)
{
	if (::soap_read_tt__PTZStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZVector_DEFINED
#define SOAP_TYPE_tt__PTZVector_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZVector(struct soap*, const char*, int, const tt__PTZVector *, const char*);
SOAP_FMAC3 tt__PTZVector * SOAP_FMAC4 soap_in_tt__PTZVector(struct soap*, const char*, tt__PTZVector *, const char*);
SOAP_FMAC1 tt__PTZVector * SOAP_FMAC2 soap_instantiate_tt__PTZVector(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZVector * soap_new_tt__PTZVector(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZVector(soap, n, NULL, NULL, NULL);
}

inline tt__PTZVector * soap_new_req_tt__PTZVector(
	struct soap *soap)
{
	tt__PTZVector *_p = ::soap_new_tt__PTZVector(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZVector * soap_new_set_tt__PTZVector(
	struct soap *soap,
	tt__Vector2D *PanTilt,
	tt__Vector1D *Zoom)
{
	tt__PTZVector *_p = ::soap_new_tt__PTZVector(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZVector::PanTilt = PanTilt;
		_p->tt__PTZVector::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write_tt__PTZVector(struct soap *soap, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZVector", p->soap_type() == SOAP_TYPE_tt__PTZVector ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZVector * SOAP_FMAC4 soap_get_tt__PTZVector(struct soap*, tt__PTZVector *, const char*, const char*);

inline int soap_read_tt__PTZVector(struct soap *soap, tt__PTZVector *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZVector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZVector(struct soap *soap, const char *URL, tt__PTZVector *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZVector(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZVector(struct soap *soap, tt__PTZVector *p)
{
	if (::soap_read_tt__PTZVector(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Vector1D_DEFINED
#define SOAP_TYPE_tt__Vector1D_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector1D(struct soap*, const char*, int, const tt__Vector1D *, const char*);
SOAP_FMAC3 tt__Vector1D * SOAP_FMAC4 soap_in_tt__Vector1D(struct soap*, const char*, tt__Vector1D *, const char*);
SOAP_FMAC1 tt__Vector1D * SOAP_FMAC2 soap_instantiate_tt__Vector1D(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector1D * soap_new_tt__Vector1D(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Vector1D(soap, n, NULL, NULL, NULL);
}

inline tt__Vector1D * soap_new_req_tt__Vector1D(
	struct soap *soap,
	float x)
{
	tt__Vector1D *_p = ::soap_new_tt__Vector1D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector1D::x = x;
	}
	return _p;
}

inline tt__Vector1D * soap_new_set_tt__Vector1D(
	struct soap *soap,
	float x,
	std::string *space)
{
	tt__Vector1D *_p = ::soap_new_tt__Vector1D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector1D::x = x;
		_p->tt__Vector1D::space = space;
	}
	return _p;
}

inline int soap_write_tt__Vector1D(struct soap *soap, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector1D", p->soap_type() == SOAP_TYPE_tt__Vector1D ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Vector1D * SOAP_FMAC4 soap_get_tt__Vector1D(struct soap*, tt__Vector1D *, const char*, const char*);

inline int soap_read_tt__Vector1D(struct soap *soap, tt__Vector1D *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Vector1D(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Vector1D(struct soap *soap, const char *URL, tt__Vector1D *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Vector1D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Vector1D(struct soap *soap, tt__Vector1D *p)
{
	if (::soap_read_tt__Vector1D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Vector2D_DEFINED
#define SOAP_TYPE_tt__Vector2D_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector2D(struct soap*, const char*, int, const tt__Vector2D *, const char*);
SOAP_FMAC3 tt__Vector2D * SOAP_FMAC4 soap_in_tt__Vector2D(struct soap*, const char*, tt__Vector2D *, const char*);
SOAP_FMAC1 tt__Vector2D * SOAP_FMAC2 soap_instantiate_tt__Vector2D(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector2D * soap_new_tt__Vector2D(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Vector2D(soap, n, NULL, NULL, NULL);
}

inline tt__Vector2D * soap_new_req_tt__Vector2D(
	struct soap *soap,
	float x,
	float y)
{
	tt__Vector2D *_p = ::soap_new_tt__Vector2D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector2D::x = x;
		_p->tt__Vector2D::y = y;
	}
	return _p;
}

inline tt__Vector2D * soap_new_set_tt__Vector2D(
	struct soap *soap,
	float x,
	float y,
	std::string *space)
{
	tt__Vector2D *_p = ::soap_new_tt__Vector2D(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Vector2D::x = x;
		_p->tt__Vector2D::y = y;
		_p->tt__Vector2D::space = space;
	}
	return _p;
}

inline int soap_write_tt__Vector2D(struct soap *soap, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Vector2D", p->soap_type() == SOAP_TYPE_tt__Vector2D ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Vector2D * SOAP_FMAC4 soap_get_tt__Vector2D(struct soap*, tt__Vector2D *, const char*, const char*);

inline int soap_read_tt__Vector2D(struct soap *soap, tt__Vector2D *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Vector2D(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Vector2D(struct soap *soap, const char *URL, tt__Vector2D *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Vector2D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Vector2D(struct soap *soap, tt__Vector2D *p)
{
	if (::soap_read_tt__Vector2D(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__IntRange_DEFINED
#define SOAP_TYPE_tt__IntRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRange(struct soap*, const char*, int, const tt__IntRange *, const char*);
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_in_tt__IntRange(struct soap*, const char*, tt__IntRange *, const char*);
SOAP_FMAC1 tt__IntRange * SOAP_FMAC2 soap_instantiate_tt__IntRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRange * soap_new_tt__IntRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__IntRange(soap, n, NULL, NULL, NULL);
}

inline tt__IntRange * soap_new_req_tt__IntRange(
	struct soap *soap,
	int Min,
	int Max)
{
	tt__IntRange *_p = ::soap_new_tt__IntRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRange::Min = Min;
		_p->tt__IntRange::Max = Max;
	}
	return _p;
}

inline tt__IntRange * soap_new_set_tt__IntRange(
	struct soap *soap,
	int Min,
	int Max)
{
	tt__IntRange *_p = ::soap_new_tt__IntRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__IntRange::Min = Min;
		_p->tt__IntRange::Max = Max;
	}
	return _p;
}

inline int soap_write_tt__IntRange(struct soap *soap, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:IntRange", p->soap_type() == SOAP_TYPE_tt__IntRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_get_tt__IntRange(struct soap*, tt__IntRange *, const char*, const char*);

inline int soap_read_tt__IntRange(struct soap *soap, tt__IntRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__IntRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__IntRange(struct soap *soap, const char *URL, tt__IntRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__IntRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__IntRange(struct soap *soap, tt__IntRange *p)
{
	if (::soap_read_tt__IntRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_req_tt__PTZPresetTourStartingConditionOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptionsExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_set_tt__PTZPresetTourStartingConditionOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptionsExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingConditionOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension *p)
{
	if (::soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionOptions(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionOptions(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionOptions * soap_new_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionOptions * soap_new_req_tt__PTZPresetTourStartingConditionOptions(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionOptions *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionOptions * soap_new_set_tt__PTZPresetTourStartingConditionOptions(
	struct soap *soap,
	tt__IntRange *RecurringTime,
	tt__DurationRange *RecurringDuration,
	const std::vector<enum tt__PTZPresetTourDirection> & Direction,
	tt__PTZPresetTourStartingConditionOptionsExtension *Extension)
{
	tt__PTZPresetTourStartingConditionOptions *_p = ::soap_new_tt__PTZPresetTourStartingConditionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStartingConditionOptions::RecurringTime = RecurringTime;
		_p->tt__PTZPresetTourStartingConditionOptions::RecurringDuration = RecurringDuration;
		_p->tt__PTZPresetTourStartingConditionOptions::Direction = Direction;
		_p->tt__PTZPresetTourStartingConditionOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingConditionOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingConditionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions *p)
{
	if (::soap_read_tt__PTZPresetTourStartingConditionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetailOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_req_tt__PTZPresetTourPresetDetailOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptionsExtension *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_set_tt__PTZPresetTourPresetDetailOptionsExtension(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptionsExtension *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourPresetDetailOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension *p)
{
	if (::soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetailOptions(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetailOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetailOptions(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetailOptions * soap_new_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetailOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetailOptions * soap_new_req_tt__PTZPresetTourPresetDetailOptions(
	struct soap *soap)
{
	tt__PTZPresetTourPresetDetailOptions *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetailOptions * soap_new_set_tt__PTZPresetTourPresetDetailOptions(
	struct soap *soap,
	const std::vector<std::string> & PresetToken,
	bool *Home,
	tt__Space2DDescription *PanTiltPositionSpace,
	tt__Space1DDescription *ZoomPositionSpace,
	tt__PTZPresetTourPresetDetailOptionsExtension *Extension)
{
	tt__PTZPresetTourPresetDetailOptions *_p = ::soap_new_tt__PTZPresetTourPresetDetailOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetailOptions::PresetToken = PresetToken;
		_p->tt__PTZPresetTourPresetDetailOptions::Home = Home;
		_p->tt__PTZPresetTourPresetDetailOptions::PanTiltPositionSpace = PanTiltPositionSpace;
		_p->tt__PTZPresetTourPresetDetailOptions::ZoomPositionSpace = ZoomPositionSpace;
		_p->tt__PTZPresetTourPresetDetailOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourPresetDetailOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetailOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourPresetDetailOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions *p)
{
	if (::soap_read_tt__PTZPresetTourPresetDetailOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpotOptions(struct soap*, const char*, int, const tt__PTZPresetTourSpotOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpotOptions(struct soap*, const char*, tt__PTZPresetTourSpotOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpotOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpotOptions * soap_new_tt__PTZPresetTourSpotOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpotOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpotOptions * soap_new_req_tt__PTZPresetTourSpotOptions(
	struct soap *soap,
	tt__PTZPresetTourPresetDetailOptions *PresetDetail,
	tt__DurationRange *StayTime)
{
	tt__PTZPresetTourSpotOptions *_p = ::soap_new_tt__PTZPresetTourSpotOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpotOptions::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpotOptions::StayTime = StayTime;
	}
	return _p;
}

inline tt__PTZPresetTourSpotOptions * soap_new_set_tt__PTZPresetTourSpotOptions(
	struct soap *soap,
	tt__PTZPresetTourPresetDetailOptions *PresetDetail,
	tt__DurationRange *StayTime)
{
	tt__PTZPresetTourSpotOptions *_p = ::soap_new_tt__PTZPresetTourSpotOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpotOptions::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpotOptions::StayTime = StayTime;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSpotOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSpotOptions(struct soap *soap, const char *URL, tt__PTZPresetTourSpotOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSpotOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions *p)
{
	if (::soap_read_tt__PTZPresetTourSpotOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOptions_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOptions(struct soap*, const char*, int, const tt__PTZPresetTourOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourOptions(struct soap*, const char*, tt__PTZPresetTourOptions *, const char*);
SOAP_FMAC1 tt__PTZPresetTourOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourOptions * soap_new_tt__PTZPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourOptions * soap_new_req_tt__PTZPresetTourOptions(
	struct soap *soap,
	bool AutoStart,
	tt__PTZPresetTourStartingConditionOptions *StartingCondition,
	tt__PTZPresetTourSpotOptions *TourSpot)
{
	tt__PTZPresetTourOptions *_p = ::soap_new_tt__PTZPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourOptions::AutoStart = AutoStart;
		_p->tt__PTZPresetTourOptions::StartingCondition = StartingCondition;
		_p->tt__PTZPresetTourOptions::TourSpot = TourSpot;
	}
	return _p;
}

inline tt__PTZPresetTourOptions * soap_new_set_tt__PTZPresetTourOptions(
	struct soap *soap,
	bool AutoStart,
	tt__PTZPresetTourStartingConditionOptions *StartingCondition,
	tt__PTZPresetTourSpotOptions *TourSpot)
{
	tt__PTZPresetTourOptions *_p = ::soap_new_tt__PTZPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourOptions::AutoStart = AutoStart;
		_p->tt__PTZPresetTourOptions::StartingCondition = StartingCondition;
		_p->tt__PTZPresetTourOptions::TourSpot = TourSpot;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourOptions", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourOptions(struct soap *soap, const char *URL, tt__PTZPresetTourOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions *p)
{
	if (::soap_read_tt__PTZPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionExtension(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionExtension * soap_new_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingConditionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingConditionExtension * soap_new_req_tt__PTZPresetTourStartingConditionExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingConditionExtension * soap_new_set_tt__PTZPresetTourStartingConditionExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStartingConditionExtension *_p = ::soap_new_tt__PTZPresetTourStartingConditionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingConditionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStartingConditionExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingConditionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension *p)
{
	if (::soap_read_tt__PTZPresetTourStartingConditionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingCondition(struct soap*, const char*, int, const tt__PTZPresetTourStartingCondition *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingCondition(struct soap*, const char*, tt__PTZPresetTourStartingCondition *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStartingCondition * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingCondition(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingCondition * soap_new_tt__PTZPresetTourStartingCondition(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStartingCondition(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStartingCondition * soap_new_req_tt__PTZPresetTourStartingCondition(
	struct soap *soap)
{
	tt__PTZPresetTourStartingCondition *_p = ::soap_new_tt__PTZPresetTourStartingCondition(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStartingCondition * soap_new_set_tt__PTZPresetTourStartingCondition(
	struct soap *soap,
	int *RecurringTime,
	std::string *RecurringDuration,
	enum tt__PTZPresetTourDirection *Direction,
	tt__PTZPresetTourStartingConditionExtension *Extension,
	bool *RandomPresetOrder)
{
	tt__PTZPresetTourStartingCondition *_p = ::soap_new_tt__PTZPresetTourStartingCondition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStartingCondition::RecurringTime = RecurringTime;
		_p->tt__PTZPresetTourStartingCondition::RecurringDuration = RecurringDuration;
		_p->tt__PTZPresetTourStartingCondition::Direction = Direction;
		_p->tt__PTZPresetTourStartingCondition::Extension = Extension;
		_p->tt__PTZPresetTourStartingCondition::RandomPresetOrder = RandomPresetOrder;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStartingCondition", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStartingCondition ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStartingCondition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStartingCondition(struct soap *soap, const char *URL, tt__PTZPresetTourStartingCondition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStartingCondition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition *p)
{
	if (::soap_read_tt__PTZPresetTourStartingCondition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStatusExtension(struct soap*, const char*, int, const tt__PTZPresetTourStatusExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStatusExtension(struct soap*, const char*, tt__PTZPresetTourStatusExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStatusExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatusExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStatusExtension * soap_new_tt__PTZPresetTourStatusExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStatusExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStatusExtension * soap_new_req_tt__PTZPresetTourStatusExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStatusExtension *_p = ::soap_new_tt__PTZPresetTourStatusExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourStatusExtension * soap_new_set_tt__PTZPresetTourStatusExtension(
	struct soap *soap)
{
	tt__PTZPresetTourStatusExtension *_p = ::soap_new_tt__PTZPresetTourStatusExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatusExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatusExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStatusExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStatusExtension(struct soap *soap, const char *URL, tt__PTZPresetTourStatusExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStatusExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension *p)
{
	if (::soap_read_tt__PTZPresetTourStatusExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatus_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStatus(struct soap*, const char*, int, const tt__PTZPresetTourStatus *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatus * SOAP_FMAC4 soap_in_tt__PTZPresetTourStatus(struct soap*, const char*, tt__PTZPresetTourStatus *, const char*);
SOAP_FMAC1 tt__PTZPresetTourStatus * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStatus * soap_new_tt__PTZPresetTourStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourStatus(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourStatus * soap_new_req_tt__PTZPresetTourStatus(
	struct soap *soap,
	enum tt__PTZPresetTourState State)
{
	tt__PTZPresetTourStatus *_p = ::soap_new_tt__PTZPresetTourStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStatus::State = State;
	}
	return _p;
}

inline tt__PTZPresetTourStatus * soap_new_set_tt__PTZPresetTourStatus(
	struct soap *soap,
	enum tt__PTZPresetTourState State,
	tt__PTZPresetTourSpot *CurrentTourSpot,
	tt__PTZPresetTourStatusExtension *Extension)
{
	tt__PTZPresetTourStatus *_p = ::soap_new_tt__PTZPresetTourStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourStatus::State = State;
		_p->tt__PTZPresetTourStatus::CurrentTourSpot = CurrentTourSpot;
		_p->tt__PTZPresetTourStatus::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourStatus", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourStatus * SOAP_FMAC4 soap_get_tt__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourStatus(struct soap *soap, const char *URL, tt__PTZPresetTourStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus *p)
{
	if (::soap_read_tt__PTZPresetTourStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourTypeExtension(struct soap*, const char*, int, const tt__PTZPresetTourTypeExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourTypeExtension(struct soap*, const char*, tt__PTZPresetTourTypeExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourTypeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourTypeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourTypeExtension * soap_new_tt__PTZPresetTourTypeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourTypeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourTypeExtension * soap_new_req_tt__PTZPresetTourTypeExtension(
	struct soap *soap)
{
	tt__PTZPresetTourTypeExtension *_p = ::soap_new_tt__PTZPresetTourTypeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourTypeExtension * soap_new_set_tt__PTZPresetTourTypeExtension(
	struct soap *soap)
{
	tt__PTZPresetTourTypeExtension *_p = ::soap_new_tt__PTZPresetTourTypeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourTypeExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourTypeExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourTypeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourTypeExtension(struct soap *soap, const char *URL, tt__PTZPresetTourTypeExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourTypeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension *p)
{
	if (::soap_read_tt__PTZPresetTourTypeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetail(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetail *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetail(struct soap*, const char*, tt__PTZPresetTourPresetDetail *, const char*);
SOAP_FMAC1 tt__PTZPresetTourPresetDetail * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetail(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetail * soap_new_tt__PTZPresetTourPresetDetail(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourPresetDetail(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourPresetDetail * soap_new_req_tt__PTZPresetTourPresetDetail(
	struct soap *soap,
	const union _tt__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail)
{
	tt__PTZPresetTourPresetDetail *_p = ::soap_new_tt__PTZPresetTourPresetDetail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail;
	}
	return _p;
}

inline tt__PTZPresetTourPresetDetail * soap_new_set_tt__PTZPresetTourPresetDetail(
	struct soap *soap,
	int __union_PTZPresetTourPresetDetail,
	const union _tt__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail)
{
	tt__PTZPresetTourPresetDetail *_p = ::soap_new_tt__PTZPresetTourPresetDetail(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourPresetDetail::__union_PTZPresetTourPresetDetail = __union_PTZPresetTourPresetDetail;
		_p->tt__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourPresetDetail", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourPresetDetail ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourPresetDetail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourPresetDetail(struct soap *soap, const char *URL, tt__PTZPresetTourPresetDetail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourPresetDetail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail *p)
{
	if (::soap_read_tt__PTZPresetTourPresetDetail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpotExtension(struct soap*, const char*, int, const tt__PTZPresetTourSpotExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpotExtension(struct soap*, const char*, tt__PTZPresetTourSpotExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpotExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpotExtension * soap_new_tt__PTZPresetTourSpotExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpotExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpotExtension * soap_new_req_tt__PTZPresetTourSpotExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSpotExtension *_p = ::soap_new_tt__PTZPresetTourSpotExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourSpotExtension * soap_new_set_tt__PTZPresetTourSpotExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSpotExtension *_p = ::soap_new_tt__PTZPresetTourSpotExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpotExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpotExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSpotExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSpotExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSpotExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSpotExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension *p)
{
	if (::soap_read_tt__PTZPresetTourSpotExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpot(struct soap*, const char*, int, const tt__PTZPresetTourSpot *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpot * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpot(struct soap*, const char*, tt__PTZPresetTourSpot *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSpot * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpot * soap_new_tt__PTZPresetTourSpot(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSpot(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSpot * soap_new_req_tt__PTZPresetTourSpot(
	struct soap *soap,
	tt__PTZPresetTourPresetDetail *PresetDetail)
{
	tt__PTZPresetTourSpot *_p = ::soap_new_tt__PTZPresetTourSpot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpot::PresetDetail = PresetDetail;
	}
	return _p;
}

inline tt__PTZPresetTourSpot * soap_new_set_tt__PTZPresetTourSpot(
	struct soap *soap,
	tt__PTZPresetTourPresetDetail *PresetDetail,
	tt__PTZSpeed *Speed,
	std::string *StayTime,
	tt__PTZPresetTourSpotExtension *Extension)
{
	tt__PTZPresetTourSpot *_p = ::soap_new_tt__PTZPresetTourSpot(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSpot::PresetDetail = PresetDetail;
		_p->tt__PTZPresetTourSpot::Speed = Speed;
		_p->tt__PTZPresetTourSpot::StayTime = StayTime;
		_p->tt__PTZPresetTourSpot::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSpot", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSpot ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSpot * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSpot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSpot(struct soap *soap, const char *URL, tt__PTZPresetTourSpot *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSpot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot *p)
{
	if (::soap_read_tt__PTZPresetTourSpot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourExtension(struct soap*, const char*, int, const tt__PTZPresetTourExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourExtension(struct soap*, const char*, tt__PTZPresetTourExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourExtension * soap_new_tt__PTZPresetTourExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourExtension * soap_new_req_tt__PTZPresetTourExtension(
	struct soap *soap)
{
	tt__PTZPresetTourExtension *_p = ::soap_new_tt__PTZPresetTourExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourExtension * soap_new_set_tt__PTZPresetTourExtension(
	struct soap *soap)
{
	tt__PTZPresetTourExtension *_p = ::soap_new_tt__PTZPresetTourExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourExtension(struct soap *soap, const char *URL, tt__PTZPresetTourExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension *p)
{
	if (::soap_read_tt__PTZPresetTourExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PresetTour_DEFINED
#define SOAP_TYPE_tt__PresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PresetTour(struct soap*, const char*, int, const tt__PresetTour *, const char*);
SOAP_FMAC3 tt__PresetTour * SOAP_FMAC4 soap_in_tt__PresetTour(struct soap*, const char*, tt__PresetTour *, const char*);
SOAP_FMAC1 tt__PresetTour * SOAP_FMAC2 soap_instantiate_tt__PresetTour(struct soap*, int, const char*, const char*, size_t*);

inline tt__PresetTour * soap_new_tt__PresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PresetTour(soap, n, NULL, NULL, NULL);
}

inline tt__PresetTour * soap_new_req_tt__PresetTour(
	struct soap *soap,
	tt__PTZPresetTourStatus *Status,
	bool AutoStart,
	tt__PTZPresetTourStartingCondition *StartingCondition)
{
	tt__PresetTour *_p = ::soap_new_tt__PresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PresetTour::Status = Status;
		_p->tt__PresetTour::AutoStart = AutoStart;
		_p->tt__PresetTour::StartingCondition = StartingCondition;
	}
	return _p;
}

inline tt__PresetTour * soap_new_set_tt__PresetTour(
	struct soap *soap,
	std::string *Name,
	tt__PTZPresetTourStatus *Status,
	bool AutoStart,
	tt__PTZPresetTourStartingCondition *StartingCondition,
	const std::vector<tt__PTZPresetTourSpot *> & TourSpot,
	tt__PTZPresetTourExtension *Extension,
	std::string *token)
{
	tt__PresetTour *_p = ::soap_new_tt__PresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PresetTour::Name = Name;
		_p->tt__PresetTour::Status = Status;
		_p->tt__PresetTour::AutoStart = AutoStart;
		_p->tt__PresetTour::StartingCondition = StartingCondition;
		_p->tt__PresetTour::TourSpot = TourSpot;
		_p->tt__PresetTour::Extension = Extension;
		_p->tt__PresetTour::token = token;
	}
	return _p;
}

inline int soap_write_tt__PresetTour(struct soap *soap, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PresetTour", p->soap_type() == SOAP_TYPE_tt__PresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PresetTour * SOAP_FMAC4 soap_get_tt__PresetTour(struct soap*, tt__PresetTour *, const char*, const char*);

inline int soap_read_tt__PresetTour(struct soap *soap, tt__PresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PresetTour(struct soap *soap, const char *URL, tt__PresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PresetTour(struct soap *soap, tt__PresetTour *p)
{
	if (::soap_read_tt__PresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPreset_DEFINED
#define SOAP_TYPE_tt__PTZPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPreset(struct soap*, const char*, int, const tt__PTZPreset *, const char*);
SOAP_FMAC3 tt__PTZPreset * SOAP_FMAC4 soap_in_tt__PTZPreset(struct soap*, const char*, tt__PTZPreset *, const char*);
SOAP_FMAC1 tt__PTZPreset * SOAP_FMAC2 soap_instantiate_tt__PTZPreset(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPreset * soap_new_tt__PTZPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPreset(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPreset * soap_new_req_tt__PTZPreset(
	struct soap *soap)
{
	tt__PTZPreset *_p = ::soap_new_tt__PTZPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPreset * soap_new_set_tt__PTZPreset(
	struct soap *soap,
	std::string *Name,
	tt__PTZVector *PTZPosition,
	std::string *token)
{
	tt__PTZPreset *_p = ::soap_new_tt__PTZPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPreset::Name = Name;
		_p->tt__PTZPreset::PTZPosition = PTZPosition;
		_p->tt__PTZPreset::token = token;
	}
	return _p;
}

inline int soap_write_tt__PTZPreset(struct soap *soap, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPreset", p->soap_type() == SOAP_TYPE_tt__PTZPreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPreset * SOAP_FMAC4 soap_get_tt__PTZPreset(struct soap*, tt__PTZPreset *, const char*, const char*);

inline int soap_read_tt__PTZPreset(struct soap *soap, tt__PTZPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPreset(struct soap *soap, const char *URL, tt__PTZPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPreset(struct soap *soap, tt__PTZPreset *p)
{
	if (::soap_read_tt__PTZPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpeed_DEFINED
#define SOAP_TYPE_tt__PTZSpeed_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpeed(struct soap*, const char*, int, const tt__PTZSpeed *, const char*);
SOAP_FMAC3 tt__PTZSpeed * SOAP_FMAC4 soap_in_tt__PTZSpeed(struct soap*, const char*, tt__PTZSpeed *, const char*);
SOAP_FMAC1 tt__PTZSpeed * SOAP_FMAC2 soap_instantiate_tt__PTZSpeed(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpeed * soap_new_tt__PTZSpeed(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpeed(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpeed * soap_new_req_tt__PTZSpeed(
	struct soap *soap)
{
	tt__PTZSpeed *_p = ::soap_new_tt__PTZSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpeed * soap_new_set_tt__PTZSpeed(
	struct soap *soap,
	tt__Vector2D *PanTilt,
	tt__Vector1D *Zoom)
{
	tt__PTZSpeed *_p = ::soap_new_tt__PTZSpeed(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZSpeed::PanTilt = PanTilt;
		_p->tt__PTZSpeed::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpeed", p->soap_type() == SOAP_TYPE_tt__PTZSpeed ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpeed * SOAP_FMAC4 soap_get_tt__PTZSpeed(struct soap*, tt__PTZSpeed *, const char*, const char*);

inline int soap_read_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZSpeed(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZSpeed(struct soap *soap, const char *URL, tt__PTZSpeed *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed *p)
{
	if (::soap_read_tt__PTZSpeed(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Space1DDescription_DEFINED
#define SOAP_TYPE_tt__Space1DDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Space1DDescription(struct soap*, const char*, int, const tt__Space1DDescription *, const char*);
SOAP_FMAC3 tt__Space1DDescription * SOAP_FMAC4 soap_in_tt__Space1DDescription(struct soap*, const char*, tt__Space1DDescription *, const char*);
SOAP_FMAC1 tt__Space1DDescription * SOAP_FMAC2 soap_instantiate_tt__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__Space1DDescription * soap_new_tt__Space1DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Space1DDescription(soap, n, NULL, NULL, NULL);
}

inline tt__Space1DDescription * soap_new_req_tt__Space1DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange)
{
	tt__Space1DDescription *_p = ::soap_new_tt__Space1DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space1DDescription::URI = URI;
		_p->tt__Space1DDescription::XRange = XRange;
	}
	return _p;
}

inline tt__Space1DDescription * soap_new_set_tt__Space1DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange)
{
	tt__Space1DDescription *_p = ::soap_new_tt__Space1DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space1DDescription::URI = URI;
		_p->tt__Space1DDescription::XRange = XRange;
	}
	return _p;
}

inline int soap_write_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space1DDescription", p->soap_type() == SOAP_TYPE_tt__Space1DDescription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Space1DDescription * SOAP_FMAC4 soap_get_tt__Space1DDescription(struct soap*, tt__Space1DDescription *, const char*, const char*);

inline int soap_read_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Space1DDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Space1DDescription(struct soap *soap, const char *URL, tt__Space1DDescription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Space1DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription *p)
{
	if (::soap_read_tt__Space1DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Space2DDescription_DEFINED
#define SOAP_TYPE_tt__Space2DDescription_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Space2DDescription(struct soap*, const char*, int, const tt__Space2DDescription *, const char*);
SOAP_FMAC3 tt__Space2DDescription * SOAP_FMAC4 soap_in_tt__Space2DDescription(struct soap*, const char*, tt__Space2DDescription *, const char*);
SOAP_FMAC1 tt__Space2DDescription * SOAP_FMAC2 soap_instantiate_tt__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__Space2DDescription * soap_new_tt__Space2DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Space2DDescription(soap, n, NULL, NULL, NULL);
}

inline tt__Space2DDescription * soap_new_req_tt__Space2DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange,
	tt__FloatRange *YRange)
{
	tt__Space2DDescription *_p = ::soap_new_tt__Space2DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space2DDescription::URI = URI;
		_p->tt__Space2DDescription::XRange = XRange;
		_p->tt__Space2DDescription::YRange = YRange;
	}
	return _p;
}

inline tt__Space2DDescription * soap_new_set_tt__Space2DDescription(
	struct soap *soap,
	const std::string& URI,
	tt__FloatRange *XRange,
	tt__FloatRange *YRange)
{
	tt__Space2DDescription *_p = ::soap_new_tt__Space2DDescription(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Space2DDescription::URI = URI;
		_p->tt__Space2DDescription::XRange = XRange;
		_p->tt__Space2DDescription::YRange = YRange;
	}
	return _p;
}

inline int soap_write_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Space2DDescription", p->soap_type() == SOAP_TYPE_tt__Space2DDescription ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Space2DDescription * SOAP_FMAC4 soap_get_tt__Space2DDescription(struct soap*, tt__Space2DDescription *, const char*, const char*);

inline int soap_read_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Space2DDescription(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Space2DDescription(struct soap *soap, const char *URL, tt__Space2DDescription *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Space2DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription *p)
{
	if (::soap_read_tt__Space2DDescription(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpacesExtension_DEFINED
#define SOAP_TYPE_tt__PTZSpacesExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpacesExtension(struct soap*, const char*, int, const tt__PTZSpacesExtension *, const char*);
SOAP_FMAC3 tt__PTZSpacesExtension * SOAP_FMAC4 soap_in_tt__PTZSpacesExtension(struct soap*, const char*, tt__PTZSpacesExtension *, const char*);
SOAP_FMAC1 tt__PTZSpacesExtension * SOAP_FMAC2 soap_instantiate_tt__PTZSpacesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpacesExtension * soap_new_tt__PTZSpacesExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpacesExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpacesExtension * soap_new_req_tt__PTZSpacesExtension(
	struct soap *soap)
{
	tt__PTZSpacesExtension *_p = ::soap_new_tt__PTZSpacesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpacesExtension * soap_new_set_tt__PTZSpacesExtension(
	struct soap *soap)
{
	tt__PTZSpacesExtension *_p = ::soap_new_tt__PTZSpacesExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpacesExtension", p->soap_type() == SOAP_TYPE_tt__PTZSpacesExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpacesExtension * SOAP_FMAC4 soap_get_tt__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *, const char*, const char*);

inline int soap_read_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZSpacesExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZSpacesExtension(struct soap *soap, const char *URL, tt__PTZSpacesExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZSpacesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension *p)
{
	if (::soap_read_tt__PTZSpacesExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZSpaces_DEFINED
#define SOAP_TYPE_tt__PTZSpaces_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpaces(struct soap*, const char*, int, const tt__PTZSpaces *, const char*);
SOAP_FMAC3 tt__PTZSpaces * SOAP_FMAC4 soap_in_tt__PTZSpaces(struct soap*, const char*, tt__PTZSpaces *, const char*);
SOAP_FMAC1 tt__PTZSpaces * SOAP_FMAC2 soap_instantiate_tt__PTZSpaces(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpaces * soap_new_tt__PTZSpaces(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZSpaces(soap, n, NULL, NULL, NULL);
}

inline tt__PTZSpaces * soap_new_req_tt__PTZSpaces(
	struct soap *soap)
{
	tt__PTZSpaces *_p = ::soap_new_tt__PTZSpaces(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZSpaces * soap_new_set_tt__PTZSpaces(
	struct soap *soap,
	const std::vector<tt__Space2DDescription *> & AbsolutePanTiltPositionSpace,
	const std::vector<tt__Space1DDescription *> & AbsoluteZoomPositionSpace,
	const std::vector<tt__Space2DDescription *> & RelativePanTiltTranslationSpace,
	const std::vector<tt__Space1DDescription *> & RelativeZoomTranslationSpace,
	const std::vector<tt__Space2DDescription *> & ContinuousPanTiltVelocitySpace,
	const std::vector<tt__Space1DDescription *> & ContinuousZoomVelocitySpace,
	const std::vector<tt__Space1DDescription *> & PanTiltSpeedSpace,
	const std::vector<tt__Space1DDescription *> & ZoomSpeedSpace,
	tt__PTZSpacesExtension *Extension)
{
	tt__PTZSpaces *_p = ::soap_new_tt__PTZSpaces(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZSpaces::AbsolutePanTiltPositionSpace = AbsolutePanTiltPositionSpace;
		_p->tt__PTZSpaces::AbsoluteZoomPositionSpace = AbsoluteZoomPositionSpace;
		_p->tt__PTZSpaces::RelativePanTiltTranslationSpace = RelativePanTiltTranslationSpace;
		_p->tt__PTZSpaces::RelativeZoomTranslationSpace = RelativeZoomTranslationSpace;
		_p->tt__PTZSpaces::ContinuousPanTiltVelocitySpace = ContinuousPanTiltVelocitySpace;
		_p->tt__PTZSpaces::ContinuousZoomVelocitySpace = ContinuousZoomVelocitySpace;
		_p->tt__PTZSpaces::PanTiltSpeedSpace = PanTiltSpeedSpace;
		_p->tt__PTZSpaces::ZoomSpeedSpace = ZoomSpeedSpace;
		_p->tt__PTZSpaces::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZSpaces", p->soap_type() == SOAP_TYPE_tt__PTZSpaces ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZSpaces * SOAP_FMAC4 soap_get_tt__PTZSpaces(struct soap*, tt__PTZSpaces *, const char*, const char*);

inline int soap_read_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZSpaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZSpaces(struct soap *soap, const char *URL, tt__PTZSpaces *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZSpaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces *p)
{
	if (::soap_read_tt__PTZSpaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ZoomLimits_DEFINED
#define SOAP_TYPE_tt__ZoomLimits_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ZoomLimits(struct soap*, const char*, int, const tt__ZoomLimits *, const char*);
SOAP_FMAC3 tt__ZoomLimits * SOAP_FMAC4 soap_in_tt__ZoomLimits(struct soap*, const char*, tt__ZoomLimits *, const char*);
SOAP_FMAC1 tt__ZoomLimits * SOAP_FMAC2 soap_instantiate_tt__ZoomLimits(struct soap*, int, const char*, const char*, size_t*);

inline tt__ZoomLimits * soap_new_tt__ZoomLimits(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ZoomLimits(soap, n, NULL, NULL, NULL);
}

inline tt__ZoomLimits * soap_new_req_tt__ZoomLimits(
	struct soap *soap,
	tt__Space1DDescription *Range)
{
	tt__ZoomLimits *_p = ::soap_new_tt__ZoomLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ZoomLimits::Range = Range;
	}
	return _p;
}

inline tt__ZoomLimits * soap_new_set_tt__ZoomLimits(
	struct soap *soap,
	tt__Space1DDescription *Range)
{
	tt__ZoomLimits *_p = ::soap_new_tt__ZoomLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ZoomLimits::Range = Range;
	}
	return _p;
}

inline int soap_write_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ZoomLimits", p->soap_type() == SOAP_TYPE_tt__ZoomLimits ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ZoomLimits * SOAP_FMAC4 soap_get_tt__ZoomLimits(struct soap*, tt__ZoomLimits *, const char*, const char*);

inline int soap_read_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ZoomLimits(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ZoomLimits(struct soap *soap, const char *URL, tt__ZoomLimits *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ZoomLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits *p)
{
	if (::soap_read_tt__ZoomLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PanTiltLimits_DEFINED
#define SOAP_TYPE_tt__PanTiltLimits_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PanTiltLimits(struct soap*, const char*, int, const tt__PanTiltLimits *, const char*);
SOAP_FMAC3 tt__PanTiltLimits * SOAP_FMAC4 soap_in_tt__PanTiltLimits(struct soap*, const char*, tt__PanTiltLimits *, const char*);
SOAP_FMAC1 tt__PanTiltLimits * SOAP_FMAC2 soap_instantiate_tt__PanTiltLimits(struct soap*, int, const char*, const char*, size_t*);

inline tt__PanTiltLimits * soap_new_tt__PanTiltLimits(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PanTiltLimits(soap, n, NULL, NULL, NULL);
}

inline tt__PanTiltLimits * soap_new_req_tt__PanTiltLimits(
	struct soap *soap,
	tt__Space2DDescription *Range)
{
	tt__PanTiltLimits *_p = ::soap_new_tt__PanTiltLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PanTiltLimits::Range = Range;
	}
	return _p;
}

inline tt__PanTiltLimits * soap_new_set_tt__PanTiltLimits(
	struct soap *soap,
	tt__Space2DDescription *Range)
{
	tt__PanTiltLimits *_p = ::soap_new_tt__PanTiltLimits(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PanTiltLimits::Range = Range;
	}
	return _p;
}

inline int soap_write_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PanTiltLimits", p->soap_type() == SOAP_TYPE_tt__PanTiltLimits ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PanTiltLimits * SOAP_FMAC4 soap_get_tt__PanTiltLimits(struct soap*, tt__PanTiltLimits *, const char*, const char*);

inline int soap_read_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PanTiltLimits(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PanTiltLimits(struct soap *soap, const char *URL, tt__PanTiltLimits *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PanTiltLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits *p)
{
	if (::soap_read_tt__PanTiltLimits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReverseOptionsExtension_DEFINED
#define SOAP_TYPE_tt__ReverseOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseOptionsExtension(struct soap*, const char*, int, const tt__ReverseOptionsExtension *, const char*);
SOAP_FMAC3 tt__ReverseOptionsExtension * SOAP_FMAC4 soap_in_tt__ReverseOptionsExtension(struct soap*, const char*, tt__ReverseOptionsExtension *, const char*);
SOAP_FMAC1 tt__ReverseOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ReverseOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseOptionsExtension * soap_new_tt__ReverseOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReverseOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__ReverseOptionsExtension * soap_new_req_tt__ReverseOptionsExtension(
	struct soap *soap)
{
	tt__ReverseOptionsExtension *_p = ::soap_new_tt__ReverseOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ReverseOptionsExtension * soap_new_set_tt__ReverseOptionsExtension(
	struct soap *soap)
{
	tt__ReverseOptionsExtension *_p = ::soap_new_tt__ReverseOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptionsExtension", p->soap_type() == SOAP_TYPE_tt__ReverseOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReverseOptionsExtension * SOAP_FMAC4 soap_get_tt__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *, const char*, const char*);

inline int soap_read_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ReverseOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReverseOptionsExtension(struct soap *soap, const char *URL, tt__ReverseOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReverseOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension *p)
{
	if (::soap_read_tt__ReverseOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ReverseOptions_DEFINED
#define SOAP_TYPE_tt__ReverseOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseOptions(struct soap*, const char*, int, const tt__ReverseOptions *, const char*);
SOAP_FMAC3 tt__ReverseOptions * SOAP_FMAC4 soap_in_tt__ReverseOptions(struct soap*, const char*, tt__ReverseOptions *, const char*);
SOAP_FMAC1 tt__ReverseOptions * SOAP_FMAC2 soap_instantiate_tt__ReverseOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseOptions * soap_new_tt__ReverseOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ReverseOptions(soap, n, NULL, NULL, NULL);
}

inline tt__ReverseOptions * soap_new_req_tt__ReverseOptions(
	struct soap *soap)
{
	tt__ReverseOptions *_p = ::soap_new_tt__ReverseOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__ReverseOptions * soap_new_set_tt__ReverseOptions(
	struct soap *soap,
	const std::vector<enum tt__ReverseMode> & Mode,
	tt__ReverseOptionsExtension *Extension)
{
	tt__ReverseOptions *_p = ::soap_new_tt__ReverseOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ReverseOptions::Mode = Mode;
		_p->tt__ReverseOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ReverseOptions", p->soap_type() == SOAP_TYPE_tt__ReverseOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ReverseOptions * SOAP_FMAC4 soap_get_tt__ReverseOptions(struct soap*, tt__ReverseOptions *, const char*, const char*);

inline int soap_read_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ReverseOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ReverseOptions(struct soap *soap, const char *URL, tt__ReverseOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ReverseOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions *p)
{
	if (::soap_read_tt__ReverseOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlipOptionsExtension_DEFINED
#define SOAP_TYPE_tt__EFlipOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipOptionsExtension(struct soap*, const char*, int, const tt__EFlipOptionsExtension *, const char*);
SOAP_FMAC3 tt__EFlipOptionsExtension * SOAP_FMAC4 soap_in_tt__EFlipOptionsExtension(struct soap*, const char*, tt__EFlipOptionsExtension *, const char*);
SOAP_FMAC1 tt__EFlipOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__EFlipOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipOptionsExtension * soap_new_tt__EFlipOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlipOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__EFlipOptionsExtension * soap_new_req_tt__EFlipOptionsExtension(
	struct soap *soap)
{
	tt__EFlipOptionsExtension *_p = ::soap_new_tt__EFlipOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EFlipOptionsExtension * soap_new_set_tt__EFlipOptionsExtension(
	struct soap *soap)
{
	tt__EFlipOptionsExtension *_p = ::soap_new_tt__EFlipOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptionsExtension", p->soap_type() == SOAP_TYPE_tt__EFlipOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlipOptionsExtension * SOAP_FMAC4 soap_get_tt__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *, const char*, const char*);

inline int soap_read_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EFlipOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlipOptionsExtension(struct soap *soap, const char *URL, tt__EFlipOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlipOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension *p)
{
	if (::soap_read_tt__EFlipOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlipOptions_DEFINED
#define SOAP_TYPE_tt__EFlipOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipOptions(struct soap*, const char*, int, const tt__EFlipOptions *, const char*);
SOAP_FMAC3 tt__EFlipOptions * SOAP_FMAC4 soap_in_tt__EFlipOptions(struct soap*, const char*, tt__EFlipOptions *, const char*);
SOAP_FMAC1 tt__EFlipOptions * SOAP_FMAC2 soap_instantiate_tt__EFlipOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipOptions * soap_new_tt__EFlipOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlipOptions(soap, n, NULL, NULL, NULL);
}

inline tt__EFlipOptions * soap_new_req_tt__EFlipOptions(
	struct soap *soap)
{
	tt__EFlipOptions *_p = ::soap_new_tt__EFlipOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__EFlipOptions * soap_new_set_tt__EFlipOptions(
	struct soap *soap,
	const std::vector<enum tt__EFlipMode> & Mode,
	tt__EFlipOptionsExtension *Extension)
{
	tt__EFlipOptions *_p = ::soap_new_tt__EFlipOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlipOptions::Mode = Mode;
		_p->tt__EFlipOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlipOptions", p->soap_type() == SOAP_TYPE_tt__EFlipOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlipOptions * SOAP_FMAC4 soap_get_tt__EFlipOptions(struct soap*, tt__EFlipOptions *, const char*, const char*);

inline int soap_read_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EFlipOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlipOptions(struct soap *soap, const char *URL, tt__EFlipOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlipOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions *p)
{
	if (::soap_read_tt__EFlipOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionOptionsExtension(struct soap*, const char*, int, const tt__PTControlDirectionOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_in_tt__PTControlDirectionOptionsExtension(struct soap*, const char*, tt__PTControlDirectionOptionsExtension *, const char*);
SOAP_FMAC1 tt__PTControlDirectionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionOptionsExtension * soap_new_tt__PTControlDirectionOptionsExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionOptionsExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionOptionsExtension * soap_new_req_tt__PTControlDirectionOptionsExtension(
	struct soap *soap)
{
	tt__PTControlDirectionOptionsExtension *_p = ::soap_new_tt__PTControlDirectionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionOptionsExtension * soap_new_set_tt__PTControlDirectionOptionsExtension(
	struct soap *soap)
{
	tt__PTControlDirectionOptionsExtension *_p = ::soap_new_tt__PTControlDirectionOptionsExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptionsExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptionsExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_get_tt__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirectionOptionsExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirectionOptionsExtension(struct soap *soap, const char *URL, tt__PTControlDirectionOptionsExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirectionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension *p)
{
	if (::soap_read_tt__PTControlDirectionOptionsExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptions_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionOptions(struct soap*, const char*, int, const tt__PTControlDirectionOptions *, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptions * SOAP_FMAC4 soap_in_tt__PTControlDirectionOptions(struct soap*, const char*, tt__PTControlDirectionOptions *, const char*);
SOAP_FMAC1 tt__PTControlDirectionOptions * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionOptions * soap_new_tt__PTControlDirectionOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionOptions * soap_new_req_tt__PTControlDirectionOptions(
	struct soap *soap)
{
	tt__PTControlDirectionOptions *_p = ::soap_new_tt__PTControlDirectionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionOptions * soap_new_set_tt__PTControlDirectionOptions(
	struct soap *soap,
	tt__EFlipOptions *EFlip,
	tt__ReverseOptions *Reverse,
	tt__PTControlDirectionOptionsExtension *Extension)
{
	tt__PTControlDirectionOptions *_p = ::soap_new_tt__PTControlDirectionOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTControlDirectionOptions::EFlip = EFlip;
		_p->tt__PTControlDirectionOptions::Reverse = Reverse;
		_p->tt__PTControlDirectionOptions::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionOptions", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionOptions * SOAP_FMAC4 soap_get_tt__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirectionOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirectionOptions(struct soap *soap, const char *URL, tt__PTControlDirectionOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirectionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions *p)
{
	if (::soap_read_tt__PTControlDirectionOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationOptions2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationOptions2(struct soap*, const char*, int, const tt__PTZConfigurationOptions2 *, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions2 * SOAP_FMAC4 soap_in_tt__PTZConfigurationOptions2(struct soap*, const char*, tt__PTZConfigurationOptions2 *, const char*);
SOAP_FMAC1 tt__PTZConfigurationOptions2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationOptions2 * soap_new_tt__PTZConfigurationOptions2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationOptions2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationOptions2 * soap_new_req_tt__PTZConfigurationOptions2(
	struct soap *soap)
{
	tt__PTZConfigurationOptions2 *_p = ::soap_new_tt__PTZConfigurationOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationOptions2 * soap_new_set_tt__PTZConfigurationOptions2(
	struct soap *soap)
{
	tt__PTZConfigurationOptions2 *_p = ::soap_new_tt__PTZConfigurationOptions2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationOptions2 * SOAP_FMAC4 soap_get_tt__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationOptions2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationOptions2(struct soap *soap, const char *URL, tt__PTZConfigurationOptions2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationOptions2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 *p)
{
	if (::soap_read_tt__PTZConfigurationOptions2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationOptions(struct soap*, const char*, int, const tt__PTZConfigurationOptions *, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions * SOAP_FMAC4 soap_in_tt__PTZConfigurationOptions(struct soap*, const char*, tt__PTZConfigurationOptions *, const char*);
SOAP_FMAC1 tt__PTZConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationOptions * soap_new_tt__PTZConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationOptions * soap_new_req_tt__PTZConfigurationOptions(
	struct soap *soap,
	tt__PTZSpaces *Spaces,
	tt__DurationRange *PTZTimeout)
{
	tt__PTZConfigurationOptions *_p = ::soap_new_tt__PTZConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationOptions::Spaces = Spaces;
		_p->tt__PTZConfigurationOptions::PTZTimeout = PTZTimeout;
	}
	return _p;
}

inline tt__PTZConfigurationOptions * soap_new_set_tt__PTZConfigurationOptions(
	struct soap *soap,
	tt__PTZSpaces *Spaces,
	tt__DurationRange *PTZTimeout,
	tt__PTControlDirectionOptions *PTControlDirection,
	tt__PTZConfigurationOptions2 *Extension,
	std::string *PTZRamps)
{
	tt__PTZConfigurationOptions *_p = ::soap_new_tt__PTZConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationOptions::Spaces = Spaces;
		_p->tt__PTZConfigurationOptions::PTZTimeout = PTZTimeout;
		_p->tt__PTZConfigurationOptions::PTControlDirection = PTControlDirection;
		_p->tt__PTZConfigurationOptions::Extension = Extension;
		_p->tt__PTZConfigurationOptions::PTZRamps = PTZRamps;
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationOptions", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationOptions * SOAP_FMAC4 soap_get_tt__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationOptions(struct soap *soap, const char *URL, tt__PTZConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions *p)
{
	if (::soap_read_tt__PTZConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__Reverse_DEFINED
#define SOAP_TYPE_tt__Reverse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Reverse(struct soap*, const char*, int, const tt__Reverse *, const char*);
SOAP_FMAC3 tt__Reverse * SOAP_FMAC4 soap_in_tt__Reverse(struct soap*, const char*, tt__Reverse *, const char*);
SOAP_FMAC1 tt__Reverse * SOAP_FMAC2 soap_instantiate_tt__Reverse(struct soap*, int, const char*, const char*, size_t*);

inline tt__Reverse * soap_new_tt__Reverse(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__Reverse(soap, n, NULL, NULL, NULL);
}

inline tt__Reverse * soap_new_req_tt__Reverse(
	struct soap *soap,
	enum tt__ReverseMode Mode)
{
	tt__Reverse *_p = ::soap_new_tt__Reverse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Reverse::Mode = Mode;
	}
	return _p;
}

inline tt__Reverse * soap_new_set_tt__Reverse(
	struct soap *soap,
	enum tt__ReverseMode Mode)
{
	tt__Reverse *_p = ::soap_new_tt__Reverse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__Reverse::Mode = Mode;
	}
	return _p;
}

inline int soap_write_tt__Reverse(struct soap *soap, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:Reverse", p->soap_type() == SOAP_TYPE_tt__Reverse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__Reverse * SOAP_FMAC4 soap_get_tt__Reverse(struct soap*, tt__Reverse *, const char*, const char*);

inline int soap_read_tt__Reverse(struct soap *soap, tt__Reverse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__Reverse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__Reverse(struct soap *soap, const char *URL, tt__Reverse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__Reverse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__Reverse(struct soap *soap, tt__Reverse *p)
{
	if (::soap_read_tt__Reverse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__EFlip_DEFINED
#define SOAP_TYPE_tt__EFlip_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlip(struct soap*, const char*, int, const tt__EFlip *, const char*);
SOAP_FMAC3 tt__EFlip * SOAP_FMAC4 soap_in_tt__EFlip(struct soap*, const char*, tt__EFlip *, const char*);
SOAP_FMAC1 tt__EFlip * SOAP_FMAC2 soap_instantiate_tt__EFlip(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlip * soap_new_tt__EFlip(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__EFlip(soap, n, NULL, NULL, NULL);
}

inline tt__EFlip * soap_new_req_tt__EFlip(
	struct soap *soap,
	enum tt__EFlipMode Mode)
{
	tt__EFlip *_p = ::soap_new_tt__EFlip(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlip::Mode = Mode;
	}
	return _p;
}

inline tt__EFlip * soap_new_set_tt__EFlip(
	struct soap *soap,
	enum tt__EFlipMode Mode)
{
	tt__EFlip *_p = ::soap_new_tt__EFlip(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__EFlip::Mode = Mode;
	}
	return _p;
}

inline int soap_write_tt__EFlip(struct soap *soap, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:EFlip", p->soap_type() == SOAP_TYPE_tt__EFlip ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__EFlip * SOAP_FMAC4 soap_get_tt__EFlip(struct soap*, tt__EFlip *, const char*, const char*);

inline int soap_read_tt__EFlip(struct soap *soap, tt__EFlip *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__EFlip(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__EFlip(struct soap *soap, const char *URL, tt__EFlip *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__EFlip(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__EFlip(struct soap *soap, tt__EFlip *p)
{
	if (::soap_read_tt__EFlip(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionExtension_DEFINED
#define SOAP_TYPE_tt__PTControlDirectionExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionExtension(struct soap*, const char*, int, const tt__PTControlDirectionExtension *, const char*);
SOAP_FMAC3 tt__PTControlDirectionExtension * SOAP_FMAC4 soap_in_tt__PTControlDirectionExtension(struct soap*, const char*, tt__PTControlDirectionExtension *, const char*);
SOAP_FMAC1 tt__PTControlDirectionExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionExtension * soap_new_tt__PTControlDirectionExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirectionExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirectionExtension * soap_new_req_tt__PTControlDirectionExtension(
	struct soap *soap)
{
	tt__PTControlDirectionExtension *_p = ::soap_new_tt__PTControlDirectionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirectionExtension * soap_new_set_tt__PTControlDirectionExtension(
	struct soap *soap)
{
	tt__PTControlDirectionExtension *_p = ::soap_new_tt__PTControlDirectionExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirectionExtension", p->soap_type() == SOAP_TYPE_tt__PTControlDirectionExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirectionExtension * SOAP_FMAC4 soap_get_tt__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *, const char*, const char*);

inline int soap_read_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirectionExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirectionExtension(struct soap *soap, const char *URL, tt__PTControlDirectionExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirectionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension *p)
{
	if (::soap_read_tt__PTControlDirectionExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTControlDirection_DEFINED
#define SOAP_TYPE_tt__PTControlDirection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirection(struct soap*, const char*, int, const tt__PTControlDirection *, const char*);
SOAP_FMAC3 tt__PTControlDirection * SOAP_FMAC4 soap_in_tt__PTControlDirection(struct soap*, const char*, tt__PTControlDirection *, const char*);
SOAP_FMAC1 tt__PTControlDirection * SOAP_FMAC2 soap_instantiate_tt__PTControlDirection(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirection * soap_new_tt__PTControlDirection(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTControlDirection(soap, n, NULL, NULL, NULL);
}

inline tt__PTControlDirection * soap_new_req_tt__PTControlDirection(
	struct soap *soap)
{
	tt__PTControlDirection *_p = ::soap_new_tt__PTControlDirection(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTControlDirection * soap_new_set_tt__PTControlDirection(
	struct soap *soap,
	tt__EFlip *EFlip,
	tt__Reverse *Reverse,
	tt__PTControlDirectionExtension *Extension)
{
	tt__PTControlDirection *_p = ::soap_new_tt__PTControlDirection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTControlDirection::EFlip = EFlip;
		_p->tt__PTControlDirection::Reverse = Reverse;
		_p->tt__PTControlDirection::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTControlDirection", p->soap_type() == SOAP_TYPE_tt__PTControlDirection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTControlDirection * SOAP_FMAC4 soap_get_tt__PTControlDirection(struct soap*, tt__PTControlDirection *, const char*, const char*);

inline int soap_read_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTControlDirection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTControlDirection(struct soap *soap, const char *URL, tt__PTControlDirection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTControlDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection *p)
{
	if (::soap_read_tt__PTControlDirection(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationExtension2(struct soap*, const char*, int, const tt__PTZConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__PTZConfigurationExtension2(struct soap*, const char*, tt__PTZConfigurationExtension2 *, const char*);
SOAP_FMAC1 tt__PTZConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationExtension2 * soap_new_tt__PTZConfigurationExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationExtension2 * soap_new_req_tt__PTZConfigurationExtension2(
	struct soap *soap)
{
	tt__PTZConfigurationExtension2 *_p = ::soap_new_tt__PTZConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationExtension2 * soap_new_set_tt__PTZConfigurationExtension2(
	struct soap *soap)
{
	tt__PTZConfigurationExtension2 *_p = ::soap_new_tt__PTZConfigurationExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension2", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationExtension2(struct soap *soap, const char *URL, tt__PTZConfigurationExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 *p)
{
	if (::soap_read_tt__PTZConfigurationExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension_DEFINED
#define SOAP_TYPE_tt__PTZConfigurationExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationExtension(struct soap*, const char*, int, const tt__PTZConfigurationExtension *, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension * SOAP_FMAC4 soap_in_tt__PTZConfigurationExtension(struct soap*, const char*, tt__PTZConfigurationExtension *, const char*);
SOAP_FMAC1 tt__PTZConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationExtension * soap_new_tt__PTZConfigurationExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfigurationExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfigurationExtension * soap_new_req_tt__PTZConfigurationExtension(
	struct soap *soap)
{
	tt__PTZConfigurationExtension *_p = ::soap_new_tt__PTZConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZConfigurationExtension * soap_new_set_tt__PTZConfigurationExtension(
	struct soap *soap,
	tt__PTControlDirection *PTControlDirection,
	tt__PTZConfigurationExtension2 *Extension)
{
	tt__PTZConfigurationExtension *_p = ::soap_new_tt__PTZConfigurationExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfigurationExtension::PTControlDirection = PTControlDirection;
		_p->tt__PTZConfigurationExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfigurationExtension", p->soap_type() == SOAP_TYPE_tt__PTZConfigurationExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfigurationExtension * SOAP_FMAC4 soap_get_tt__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *, const char*, const char*);

inline int soap_read_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfigurationExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfigurationExtension(struct soap *soap, const char *URL, tt__PTZConfigurationExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension *p)
{
	if (::soap_read_tt__PTZConfigurationExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZConfiguration_DEFINED
#define SOAP_TYPE_tt__PTZConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfiguration(struct soap*, const char*, int, const tt__PTZConfiguration *, const char*);
SOAP_FMAC3 tt__PTZConfiguration * SOAP_FMAC4 soap_in_tt__PTZConfiguration(struct soap*, const char*, tt__PTZConfiguration *, const char*);
SOAP_FMAC1 tt__PTZConfiguration * SOAP_FMAC2 soap_instantiate_tt__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfiguration * soap_new_tt__PTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZConfiguration(soap, n, NULL, NULL, NULL);
}

inline tt__PTZConfiguration * soap_new_req_tt__PTZConfiguration(
	struct soap *soap,
	const std::string& NodeToken,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__PTZConfiguration *_p = ::soap_new_tt__PTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfiguration::NodeToken = NodeToken;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline tt__PTZConfiguration * soap_new_set_tt__PTZConfiguration(
	struct soap *soap,
	const std::string& NodeToken,
	std::string *DefaultAbsolutePantTiltPositionSpace,
	std::string *DefaultAbsoluteZoomPositionSpace,
	std::string *DefaultRelativePanTiltTranslationSpace,
	std::string *DefaultRelativeZoomTranslationSpace,
	std::string *DefaultContinuousPanTiltVelocitySpace,
	std::string *DefaultContinuousZoomVelocitySpace,
	tt__PTZSpeed *DefaultPTZSpeed,
	std::string *DefaultPTZTimeout,
	tt__PanTiltLimits *PanTiltLimits,
	tt__ZoomLimits *ZoomLimits,
	tt__PTZConfigurationExtension *Extension,
	int *MoveRamp,
	int *PresetRamp,
	int *PresetTourRamp,
	const std::string& Name__1,
	int UseCount__1,
	const std::string& token__1)
{
	tt__PTZConfiguration *_p = ::soap_new_tt__PTZConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZConfiguration::NodeToken = NodeToken;
		_p->tt__PTZConfiguration::DefaultAbsolutePantTiltPositionSpace = DefaultAbsolutePantTiltPositionSpace;
		_p->tt__PTZConfiguration::DefaultAbsoluteZoomPositionSpace = DefaultAbsoluteZoomPositionSpace;
		_p->tt__PTZConfiguration::DefaultRelativePanTiltTranslationSpace = DefaultRelativePanTiltTranslationSpace;
		_p->tt__PTZConfiguration::DefaultRelativeZoomTranslationSpace = DefaultRelativeZoomTranslationSpace;
		_p->tt__PTZConfiguration::DefaultContinuousPanTiltVelocitySpace = DefaultContinuousPanTiltVelocitySpace;
		_p->tt__PTZConfiguration::DefaultContinuousZoomVelocitySpace = DefaultContinuousZoomVelocitySpace;
		_p->tt__PTZConfiguration::DefaultPTZSpeed = DefaultPTZSpeed;
		_p->tt__PTZConfiguration::DefaultPTZTimeout = DefaultPTZTimeout;
		_p->tt__PTZConfiguration::PanTiltLimits = PanTiltLimits;
		_p->tt__PTZConfiguration::ZoomLimits = ZoomLimits;
		_p->tt__PTZConfiguration::Extension = Extension;
		_p->tt__PTZConfiguration::MoveRamp = MoveRamp;
		_p->tt__PTZConfiguration::PresetRamp = PresetRamp;
		_p->tt__PTZConfiguration::PresetTourRamp = PresetTourRamp;
		_p->tt__ConfigurationEntity::Name = Name__1;
		_p->tt__ConfigurationEntity::UseCount = UseCount__1;
		_p->tt__ConfigurationEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZConfiguration", p->soap_type() == SOAP_TYPE_tt__PTZConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZConfiguration * SOAP_FMAC4 soap_get_tt__PTZConfiguration(struct soap*, tt__PTZConfiguration *, const char*, const char*);

inline int soap_read_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZConfiguration(struct soap *soap, const char *URL, tt__PTZConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration *p)
{
	if (::soap_read_tt__PTZConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSupportedExtension(struct soap*, const char*, int, const tt__PTZPresetTourSupportedExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourSupportedExtension(struct soap*, const char*, tt__PTZPresetTourSupportedExtension *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSupportedExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupportedExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSupportedExtension * soap_new_tt__PTZPresetTourSupportedExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSupportedExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSupportedExtension * soap_new_req_tt__PTZPresetTourSupportedExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSupportedExtension *_p = ::soap_new_tt__PTZPresetTourSupportedExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZPresetTourSupportedExtension * soap_new_set_tt__PTZPresetTourSupportedExtension(
	struct soap *soap)
{
	tt__PTZPresetTourSupportedExtension *_p = ::soap_new_tt__PTZPresetTourSupportedExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupportedExtension", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupportedExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSupportedExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSupportedExtension(struct soap *soap, const char *URL, tt__PTZPresetTourSupportedExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSupportedExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension *p)
{
	if (::soap_read_tt__PTZPresetTourSupportedExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupported_DEFINED
#define SOAP_TYPE_tt__PTZPresetTourSupported_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSupported(struct soap*, const char*, int, const tt__PTZPresetTourSupported *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupported * SOAP_FMAC4 soap_in_tt__PTZPresetTourSupported(struct soap*, const char*, tt__PTZPresetTourSupported *, const char*);
SOAP_FMAC1 tt__PTZPresetTourSupported * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupported(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSupported * soap_new_tt__PTZPresetTourSupported(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZPresetTourSupported(soap, n, NULL, NULL, NULL);
}

inline tt__PTZPresetTourSupported * soap_new_req_tt__PTZPresetTourSupported(
	struct soap *soap,
	int MaximumNumberOfPresetTours)
{
	tt__PTZPresetTourSupported *_p = ::soap_new_tt__PTZPresetTourSupported(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours;
	}
	return _p;
}

inline tt__PTZPresetTourSupported * soap_new_set_tt__PTZPresetTourSupported(
	struct soap *soap,
	int MaximumNumberOfPresetTours,
	const std::vector<enum tt__PTZPresetTourOperation> & PTZPresetTourOperation,
	tt__PTZPresetTourSupportedExtension *Extension)
{
	tt__PTZPresetTourSupported *_p = ::soap_new_tt__PTZPresetTourSupported(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours;
		_p->tt__PTZPresetTourSupported::PTZPresetTourOperation = PTZPresetTourOperation;
		_p->tt__PTZPresetTourSupported::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZPresetTourSupported", p->soap_type() == SOAP_TYPE_tt__PTZPresetTourSupported ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZPresetTourSupported * SOAP_FMAC4 soap_get_tt__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *, const char*, const char*);

inline int soap_read_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZPresetTourSupported(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZPresetTourSupported(struct soap *soap, const char *URL, tt__PTZPresetTourSupported *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZPresetTourSupported(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported *p)
{
	if (::soap_read_tt__PTZPresetTourSupported(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension2_DEFINED
#define SOAP_TYPE_tt__PTZNodeExtension2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNodeExtension2(struct soap*, const char*, int, const tt__PTZNodeExtension2 *, const char*);
SOAP_FMAC3 tt__PTZNodeExtension2 * SOAP_FMAC4 soap_in_tt__PTZNodeExtension2(struct soap*, const char*, tt__PTZNodeExtension2 *, const char*);
SOAP_FMAC1 tt__PTZNodeExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNodeExtension2 * soap_new_tt__PTZNodeExtension2(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNodeExtension2(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNodeExtension2 * soap_new_req_tt__PTZNodeExtension2(
	struct soap *soap)
{
	tt__PTZNodeExtension2 *_p = ::soap_new_tt__PTZNodeExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZNodeExtension2 * soap_new_set_tt__PTZNodeExtension2(
	struct soap *soap)
{
	tt__PTZNodeExtension2 *_p = ::soap_new_tt__PTZNodeExtension2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension2", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNodeExtension2 * SOAP_FMAC4 soap_get_tt__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *, const char*, const char*);

inline int soap_read_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZNodeExtension2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZNodeExtension2(struct soap *soap, const char *URL, tt__PTZNodeExtension2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZNodeExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 *p)
{
	if (::soap_read_tt__PTZNodeExtension2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension_DEFINED
#define SOAP_TYPE_tt__PTZNodeExtension_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNodeExtension(struct soap*, const char*, int, const tt__PTZNodeExtension *, const char*);
SOAP_FMAC3 tt__PTZNodeExtension * SOAP_FMAC4 soap_in_tt__PTZNodeExtension(struct soap*, const char*, tt__PTZNodeExtension *, const char*);
SOAP_FMAC1 tt__PTZNodeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNodeExtension * soap_new_tt__PTZNodeExtension(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNodeExtension(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNodeExtension * soap_new_req_tt__PTZNodeExtension(
	struct soap *soap)
{
	tt__PTZNodeExtension *_p = ::soap_new_tt__PTZNodeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tt__PTZNodeExtension * soap_new_set_tt__PTZNodeExtension(
	struct soap *soap,
	tt__PTZPresetTourSupported *SupportedPresetTour,
	tt__PTZNodeExtension2 *Extension)
{
	tt__PTZNodeExtension *_p = ::soap_new_tt__PTZNodeExtension(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNodeExtension::SupportedPresetTour = SupportedPresetTour;
		_p->tt__PTZNodeExtension::Extension = Extension;
	}
	return _p;
}

inline int soap_write_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNodeExtension", p->soap_type() == SOAP_TYPE_tt__PTZNodeExtension ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNodeExtension * SOAP_FMAC4 soap_get_tt__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *, const char*, const char*);

inline int soap_read_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZNodeExtension(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZNodeExtension(struct soap *soap, const char *URL, tt__PTZNodeExtension *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZNodeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension *p)
{
	if (::soap_read_tt__PTZNodeExtension(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__PTZNode_DEFINED
#define SOAP_TYPE_tt__PTZNode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNode(struct soap*, const char*, int, const tt__PTZNode *, const char*);
SOAP_FMAC3 tt__PTZNode * SOAP_FMAC4 soap_in_tt__PTZNode(struct soap*, const char*, tt__PTZNode *, const char*);
SOAP_FMAC1 tt__PTZNode * SOAP_FMAC2 soap_instantiate_tt__PTZNode(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNode * soap_new_tt__PTZNode(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__PTZNode(soap, n, NULL, NULL, NULL);
}

inline tt__PTZNode * soap_new_req_tt__PTZNode(
	struct soap *soap,
	tt__PTZSpaces *SupportedPTZSpaces,
	int MaximumNumberOfPresets,
	bool HomeSupported,
	const std::string& token__1)
{
	tt__PTZNode *_p = ::soap_new_tt__PTZNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces;
		_p->tt__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets;
		_p->tt__PTZNode::HomeSupported = HomeSupported;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline tt__PTZNode * soap_new_set_tt__PTZNode(
	struct soap *soap,
	std::string *Name,
	tt__PTZSpaces *SupportedPTZSpaces,
	int MaximumNumberOfPresets,
	bool HomeSupported,
	const std::vector<std::string> & AuxiliaryCommands,
	tt__PTZNodeExtension *Extension,
	bool *FixedHomePosition,
	bool *GeoMove,
	const std::string& token__1)
{
	tt__PTZNode *_p = ::soap_new_tt__PTZNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__PTZNode::Name = Name;
		_p->tt__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces;
		_p->tt__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets;
		_p->tt__PTZNode::HomeSupported = HomeSupported;
		_p->tt__PTZNode::AuxiliaryCommands = AuxiliaryCommands;
		_p->tt__PTZNode::Extension = Extension;
		_p->tt__PTZNode::FixedHomePosition = FixedHomePosition;
		_p->tt__PTZNode::GeoMove = GeoMove;
		_p->tt__DeviceEntity::token = token__1;
	}
	return _p;
}

inline int soap_write_tt__PTZNode(struct soap *soap, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:PTZNode", p->soap_type() == SOAP_TYPE_tt__PTZNode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__PTZNode * SOAP_FMAC4 soap_get_tt__PTZNode(struct soap*, tt__PTZNode *, const char*, const char*);

inline int soap_read_tt__PTZNode(struct soap *soap, tt__PTZNode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__PTZNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__PTZNode(struct soap *soap, const char *URL, tt__PTZNode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__PTZNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__PTZNode(struct soap *soap, tt__PTZNode *p)
{
	if (::soap_read_tt__PTZNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__ConfigurationEntity_DEFINED
#define SOAP_TYPE_tt__ConfigurationEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ConfigurationEntity(struct soap*, const char*, int, const tt__ConfigurationEntity *, const char*);
SOAP_FMAC3 tt__ConfigurationEntity * SOAP_FMAC4 soap_in_tt__ConfigurationEntity(struct soap*, const char*, tt__ConfigurationEntity *, const char*);
SOAP_FMAC1 tt__ConfigurationEntity * SOAP_FMAC2 soap_instantiate_tt__ConfigurationEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__ConfigurationEntity * soap_new_tt__ConfigurationEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__ConfigurationEntity(soap, n, NULL, NULL, NULL);
}

inline tt__ConfigurationEntity * soap_new_req_tt__ConfigurationEntity(
	struct soap *soap,
	const std::string& Name,
	int UseCount,
	const std::string& token)
{
	tt__ConfigurationEntity *_p = ::soap_new_tt__ConfigurationEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name;
		_p->tt__ConfigurationEntity::UseCount = UseCount;
		_p->tt__ConfigurationEntity::token = token;
	}
	return _p;
}

inline tt__ConfigurationEntity * soap_new_set_tt__ConfigurationEntity(
	struct soap *soap,
	const std::string& Name,
	int UseCount,
	const std::string& token)
{
	tt__ConfigurationEntity *_p = ::soap_new_tt__ConfigurationEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__ConfigurationEntity::Name = Name;
		_p->tt__ConfigurationEntity::UseCount = UseCount;
		_p->tt__ConfigurationEntity::token = token;
	}
	return _p;
}

inline int soap_write_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:ConfigurationEntity", p->soap_type() == SOAP_TYPE_tt__ConfigurationEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__ConfigurationEntity * SOAP_FMAC4 soap_get_tt__ConfigurationEntity(struct soap*, tt__ConfigurationEntity *, const char*, const char*);

inline int soap_read_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__ConfigurationEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__ConfigurationEntity(struct soap *soap, const char *URL, tt__ConfigurationEntity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__ConfigurationEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity *p)
{
	if (::soap_read_tt__ConfigurationEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DurationRange_DEFINED
#define SOAP_TYPE_tt__DurationRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DurationRange(struct soap*, const char*, int, const tt__DurationRange *, const char*);
SOAP_FMAC3 tt__DurationRange * SOAP_FMAC4 soap_in_tt__DurationRange(struct soap*, const char*, tt__DurationRange *, const char*);
SOAP_FMAC1 tt__DurationRange * SOAP_FMAC2 soap_instantiate_tt__DurationRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__DurationRange * soap_new_tt__DurationRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DurationRange(soap, n, NULL, NULL, NULL);
}

inline tt__DurationRange * soap_new_req_tt__DurationRange(
	struct soap *soap,
	const std::string& Min,
	const std::string& Max)
{
	tt__DurationRange *_p = ::soap_new_tt__DurationRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DurationRange::Min = Min;
		_p->tt__DurationRange::Max = Max;
	}
	return _p;
}

inline tt__DurationRange * soap_new_set_tt__DurationRange(
	struct soap *soap,
	const std::string& Min,
	const std::string& Max)
{
	tt__DurationRange *_p = ::soap_new_tt__DurationRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DurationRange::Min = Min;
		_p->tt__DurationRange::Max = Max;
	}
	return _p;
}

inline int soap_write_tt__DurationRange(struct soap *soap, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DurationRange", p->soap_type() == SOAP_TYPE_tt__DurationRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DurationRange * SOAP_FMAC4 soap_get_tt__DurationRange(struct soap*, tt__DurationRange *, const char*, const char*);

inline int soap_read_tt__DurationRange(struct soap *soap, tt__DurationRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DurationRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DurationRange(struct soap *soap, const char *URL, tt__DurationRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DurationRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DurationRange(struct soap *soap, tt__DurationRange *p)
{
	if (::soap_read_tt__DurationRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__FloatRange_DEFINED
#define SOAP_TYPE_tt__FloatRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FloatRange(struct soap*, const char*, int, const tt__FloatRange *, const char*);
SOAP_FMAC3 tt__FloatRange * SOAP_FMAC4 soap_in_tt__FloatRange(struct soap*, const char*, tt__FloatRange *, const char*);
SOAP_FMAC1 tt__FloatRange * SOAP_FMAC2 soap_instantiate_tt__FloatRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__FloatRange * soap_new_tt__FloatRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__FloatRange(soap, n, NULL, NULL, NULL);
}

inline tt__FloatRange * soap_new_req_tt__FloatRange(
	struct soap *soap,
	float Min,
	float Max)
{
	tt__FloatRange *_p = ::soap_new_tt__FloatRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FloatRange::Min = Min;
		_p->tt__FloatRange::Max = Max;
	}
	return _p;
}

inline tt__FloatRange * soap_new_set_tt__FloatRange(
	struct soap *soap,
	float Min,
	float Max)
{
	tt__FloatRange *_p = ::soap_new_tt__FloatRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__FloatRange::Min = Min;
		_p->tt__FloatRange::Max = Max;
	}
	return _p;
}

inline int soap_write_tt__FloatRange(struct soap *soap, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:FloatRange", p->soap_type() == SOAP_TYPE_tt__FloatRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__FloatRange * SOAP_FMAC4 soap_get_tt__FloatRange(struct soap*, tt__FloatRange *, const char*, const char*);

inline int soap_read_tt__FloatRange(struct soap *soap, tt__FloatRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__FloatRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__FloatRange(struct soap *soap, const char *URL, tt__FloatRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__FloatRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__FloatRange(struct soap *soap, tt__FloatRange *p)
{
	if (::soap_read_tt__FloatRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tt__DeviceEntity_DEFINED
#define SOAP_TYPE_tt__DeviceEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceEntity(struct soap*, const char*, int, const tt__DeviceEntity *, const char*);
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_in_tt__DeviceEntity(struct soap*, const char*, tt__DeviceEntity *, const char*);
SOAP_FMAC1 tt__DeviceEntity * SOAP_FMAC2 soap_instantiate_tt__DeviceEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceEntity * soap_new_tt__DeviceEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_tt__DeviceEntity(soap, n, NULL, NULL, NULL);
}

inline tt__DeviceEntity * soap_new_req_tt__DeviceEntity(
	struct soap *soap,
	const std::string& token)
{
	tt__DeviceEntity *_p = ::soap_new_tt__DeviceEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token;
	}
	return _p;
}

inline tt__DeviceEntity * soap_new_set_tt__DeviceEntity(
	struct soap *soap,
	const std::string& token)
{
	tt__DeviceEntity *_p = ::soap_new_tt__DeviceEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tt__DeviceEntity::token = token;
	}
	return _p;
}

inline int soap_write_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tt:DeviceEntity", p->soap_type() == SOAP_TYPE_tt__DeviceEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_get_tt__DeviceEntity(struct soap*, tt__DeviceEntity *, const char*, const char*);

inline int soap_read_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tt__DeviceEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tt__DeviceEntity(struct soap *soap, const char *URL, tt__DeviceEntity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tt__DeviceEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity *p)
{
	if (::soap_read_tt__DeviceEntity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse_DEFINED
#define SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetCompatibleConfigurationsResponse(struct soap*, const char*, int, const _tptz__GetCompatibleConfigurationsResponse *, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC4 soap_in__tptz__GetCompatibleConfigurationsResponse(struct soap*, const char*, _tptz__GetCompatibleConfigurationsResponse *, const char*);
SOAP_FMAC1 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetCompatibleConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetCompatibleConfigurationsResponse * soap_new__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetCompatibleConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetCompatibleConfigurationsResponse * soap_new_req__tptz__GetCompatibleConfigurationsResponse(
	struct soap *soap)
{
	_tptz__GetCompatibleConfigurationsResponse *_p = ::soap_new__tptz__GetCompatibleConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetCompatibleConfigurationsResponse * soap_new_set__tptz__GetCompatibleConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__PTZConfiguration *> & PTZConfiguration)
{
	_tptz__GetCompatibleConfigurationsResponse *_p = ::soap_new__tptz__GetCompatibleConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurationsResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetCompatibleConfigurationsResponse * SOAP_FMAC4 soap_get__tptz__GetCompatibleConfigurationsResponse(struct soap*, _tptz__GetCompatibleConfigurationsResponse *, const char*, const char*);

inline int soap_read__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetCompatibleConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetCompatibleConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetCompatibleConfigurationsResponse(struct soap *soap, _tptz__GetCompatibleConfigurationsResponse *p)
{
	if (::soap_read__tptz__GetCompatibleConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE__tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetCompatibleConfigurations(struct soap*, const char*, int, const _tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_in__tptz__GetCompatibleConfigurations(struct soap*, const char*, _tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC1 _tptz__GetCompatibleConfigurations * SOAP_FMAC2 soap_instantiate__tptz__GetCompatibleConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetCompatibleConfigurations * soap_new__tptz__GetCompatibleConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetCompatibleConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetCompatibleConfigurations * soap_new_req__tptz__GetCompatibleConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetCompatibleConfigurations *_p = ::soap_new__tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetCompatibleConfigurations * soap_new_set__tptz__GetCompatibleConfigurations(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetCompatibleConfigurations *_p = ::soap_new__tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetCompatibleConfigurations::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetCompatibleConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetCompatibleConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_get__tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_read__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetCompatibleConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, _tptz__GetCompatibleConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetCompatibleConfigurations(struct soap *soap, _tptz__GetCompatibleConfigurations *p)
{
	if (::soap_read__tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__RemovePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetTourResponse(struct soap*, const char*, int, const _tptz__RemovePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__RemovePresetTourResponse * SOAP_FMAC4 soap_in__tptz__RemovePresetTourResponse(struct soap*, const char*, _tptz__RemovePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__RemovePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetTourResponse * soap_new__tptz__RemovePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetTourResponse * soap_new_req__tptz__RemovePresetTourResponse(
	struct soap *soap)
{
	_tptz__RemovePresetTourResponse *_p = ::soap_new__tptz__RemovePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RemovePresetTourResponse * soap_new_set__tptz__RemovePresetTourResponse(
	struct soap *soap)
{
	_tptz__RemovePresetTourResponse *_p = ::soap_new__tptz__RemovePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetTourResponse * SOAP_FMAC4 soap_get__tptz__RemovePresetTourResponse(struct soap*, _tptz__RemovePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePresetTourResponse(struct soap *soap, const char *URL, _tptz__RemovePresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePresetTourResponse(struct soap *soap, _tptz__RemovePresetTourResponse *p)
{
	if (::soap_read__tptz__RemovePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE__tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetTour(struct soap*, const char*, int, const _tptz__RemovePresetTour *, const char*);
SOAP_FMAC3 _tptz__RemovePresetTour * SOAP_FMAC4 soap_in__tptz__RemovePresetTour(struct soap*, const char*, _tptz__RemovePresetTour *, const char*);
SOAP_FMAC1 _tptz__RemovePresetTour * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetTour * soap_new__tptz__RemovePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetTour * soap_new_req__tptz__RemovePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__RemovePresetTour *_p = ::soap_new__tptz__RemovePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__RemovePresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__RemovePresetTour * soap_new_set__tptz__RemovePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__RemovePresetTour *_p = ::soap_new__tptz__RemovePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__RemovePresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetTour", p->soap_type() == SOAP_TYPE__tptz__RemovePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetTour * SOAP_FMAC4 soap_get__tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *, const char*, const char*);

inline int soap_read__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePresetTour(struct soap *soap, const char *URL, _tptz__RemovePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePresetTour(struct soap *soap, _tptz__RemovePresetTour *p)
{
	if (::soap_read__tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__OperatePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__OperatePresetTourResponse(struct soap*, const char*, int, const _tptz__OperatePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__OperatePresetTourResponse * SOAP_FMAC4 soap_in__tptz__OperatePresetTourResponse(struct soap*, const char*, _tptz__OperatePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__OperatePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__OperatePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__OperatePresetTourResponse * soap_new__tptz__OperatePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__OperatePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__OperatePresetTourResponse * soap_new_req__tptz__OperatePresetTourResponse(
	struct soap *soap)
{
	_tptz__OperatePresetTourResponse *_p = ::soap_new__tptz__OperatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__OperatePresetTourResponse * soap_new_set__tptz__OperatePresetTourResponse(
	struct soap *soap)
{
	_tptz__OperatePresetTourResponse *_p = ::soap_new__tptz__OperatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__OperatePresetTourResponse * SOAP_FMAC4 soap_get__tptz__OperatePresetTourResponse(struct soap*, _tptz__OperatePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__OperatePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__OperatePresetTourResponse(struct soap *soap, const char *URL, _tptz__OperatePresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__OperatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__OperatePresetTourResponse(struct soap *soap, _tptz__OperatePresetTourResponse *p)
{
	if (::soap_read__tptz__OperatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE__tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__OperatePresetTour(struct soap*, const char*, int, const _tptz__OperatePresetTour *, const char*);
SOAP_FMAC3 _tptz__OperatePresetTour * SOAP_FMAC4 soap_in__tptz__OperatePresetTour(struct soap*, const char*, _tptz__OperatePresetTour *, const char*);
SOAP_FMAC1 _tptz__OperatePresetTour * SOAP_FMAC2 soap_instantiate__tptz__OperatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__OperatePresetTour * soap_new__tptz__OperatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__OperatePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__OperatePresetTour * soap_new_req__tptz__OperatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken,
	enum tt__PTZPresetTourOperation Operation)
{
	_tptz__OperatePresetTour *_p = ::soap_new__tptz__OperatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__OperatePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__OperatePresetTour::PresetTourToken = PresetTourToken;
		_p->_tptz__OperatePresetTour::Operation = Operation;
	}
	return _p;
}

inline _tptz__OperatePresetTour * soap_new_set__tptz__OperatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken,
	enum tt__PTZPresetTourOperation Operation)
{
	_tptz__OperatePresetTour *_p = ::soap_new__tptz__OperatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__OperatePresetTour::ProfileToken = ProfileToken;
		_p->_tptz__OperatePresetTour::PresetTourToken = PresetTourToken;
		_p->_tptz__OperatePresetTour::Operation = Operation;
	}
	return _p;
}

inline int soap_write__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:OperatePresetTour", p->soap_type() == SOAP_TYPE__tptz__OperatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__OperatePresetTour * SOAP_FMAC4 soap_get__tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *, const char*, const char*);

inline int soap_read__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__OperatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__OperatePresetTour(struct soap *soap, const char *URL, _tptz__OperatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__OperatePresetTour(struct soap *soap, _tptz__OperatePresetTour *p)
{
	if (::soap_read__tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__ModifyPresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ModifyPresetTourResponse(struct soap*, const char*, int, const _tptz__ModifyPresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTourResponse * SOAP_FMAC4 soap_in__tptz__ModifyPresetTourResponse(struct soap*, const char*, _tptz__ModifyPresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__ModifyPresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__ModifyPresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ModifyPresetTourResponse * soap_new__tptz__ModifyPresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ModifyPresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__ModifyPresetTourResponse * soap_new_req__tptz__ModifyPresetTourResponse(
	struct soap *soap)
{
	_tptz__ModifyPresetTourResponse *_p = ::soap_new__tptz__ModifyPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__ModifyPresetTourResponse * soap_new_set__tptz__ModifyPresetTourResponse(
	struct soap *soap)
{
	_tptz__ModifyPresetTourResponse *_p = ::soap_new__tptz__ModifyPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ModifyPresetTourResponse * SOAP_FMAC4 soap_get__tptz__ModifyPresetTourResponse(struct soap*, _tptz__ModifyPresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ModifyPresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ModifyPresetTourResponse(struct soap *soap, const char *URL, _tptz__ModifyPresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ModifyPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ModifyPresetTourResponse(struct soap *soap, _tptz__ModifyPresetTourResponse *p)
{
	if (::soap_read__tptz__ModifyPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE__tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ModifyPresetTour(struct soap*, const char*, int, const _tptz__ModifyPresetTour *, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTour * SOAP_FMAC4 soap_in__tptz__ModifyPresetTour(struct soap*, const char*, _tptz__ModifyPresetTour *, const char*);
SOAP_FMAC1 _tptz__ModifyPresetTour * SOAP_FMAC2 soap_instantiate__tptz__ModifyPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ModifyPresetTour * soap_new__tptz__ModifyPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ModifyPresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__ModifyPresetTour * soap_new_req__tptz__ModifyPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PresetTour *PresetTour)
{
	_tptz__ModifyPresetTour *_p = ::soap_new__tptz__ModifyPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ModifyPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__ModifyPresetTour::PresetTour = PresetTour;
	}
	return _p;
}

inline _tptz__ModifyPresetTour * soap_new_set__tptz__ModifyPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PresetTour *PresetTour)
{
	_tptz__ModifyPresetTour *_p = ::soap_new__tptz__ModifyPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ModifyPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__ModifyPresetTour::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ModifyPresetTour", p->soap_type() == SOAP_TYPE__tptz__ModifyPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ModifyPresetTour * SOAP_FMAC4 soap_get__tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_read__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ModifyPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ModifyPresetTour(struct soap *soap, const char *URL, _tptz__ModifyPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ModifyPresetTour(struct soap *soap, _tptz__ModifyPresetTour *p)
{
	if (::soap_read__tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__CreatePresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__CreatePresetTourResponse(struct soap*, const char*, int, const _tptz__CreatePresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__CreatePresetTourResponse * SOAP_FMAC4 soap_in__tptz__CreatePresetTourResponse(struct soap*, const char*, _tptz__CreatePresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__CreatePresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__CreatePresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__CreatePresetTourResponse * soap_new__tptz__CreatePresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__CreatePresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__CreatePresetTourResponse * soap_new_req__tptz__CreatePresetTourResponse(
	struct soap *soap,
	const std::string& PresetTourToken)
{
	_tptz__CreatePresetTourResponse *_p = ::soap_new__tptz__CreatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTourResponse::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__CreatePresetTourResponse * soap_new_set__tptz__CreatePresetTourResponse(
	struct soap *soap,
	const std::string& PresetTourToken)
{
	_tptz__CreatePresetTourResponse *_p = ::soap_new__tptz__CreatePresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTourResponse::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__CreatePresetTourResponse * SOAP_FMAC4 soap_get__tptz__CreatePresetTourResponse(struct soap*, _tptz__CreatePresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__CreatePresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__CreatePresetTourResponse(struct soap *soap, const char *URL, _tptz__CreatePresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__CreatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__CreatePresetTourResponse(struct soap *soap, _tptz__CreatePresetTourResponse *p)
{
	if (::soap_read__tptz__CreatePresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE__tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__CreatePresetTour(struct soap*, const char*, int, const _tptz__CreatePresetTour *, const char*);
SOAP_FMAC3 _tptz__CreatePresetTour * SOAP_FMAC4 soap_in__tptz__CreatePresetTour(struct soap*, const char*, _tptz__CreatePresetTour *, const char*);
SOAP_FMAC1 _tptz__CreatePresetTour * SOAP_FMAC2 soap_instantiate__tptz__CreatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__CreatePresetTour * soap_new__tptz__CreatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__CreatePresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__CreatePresetTour * soap_new_req__tptz__CreatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__CreatePresetTour *_p = ::soap_new__tptz__CreatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTour::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__CreatePresetTour * soap_new_set__tptz__CreatePresetTour(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__CreatePresetTour *_p = ::soap_new__tptz__CreatePresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__CreatePresetTour::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:CreatePresetTour", p->soap_type() == SOAP_TYPE__tptz__CreatePresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__CreatePresetTour * SOAP_FMAC4 soap_get__tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *, const char*, const char*);

inline int soap_read__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__CreatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__CreatePresetTour(struct soap *soap, const char *URL, _tptz__CreatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__CreatePresetTour(struct soap *soap, _tptz__CreatePresetTour *p)
{
	if (::soap_read__tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptionsResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourOptionsResponse(struct soap*, const char*, int, const _tptz__GetPresetTourOptionsResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC4 soap_in__tptz__GetPresetTourOptionsResponse(struct soap*, const char*, _tptz__GetPresetTourOptionsResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourOptionsResponse * soap_new__tptz__GetPresetTourOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourOptionsResponse * soap_new_req__tptz__GetPresetTourOptionsResponse(
	struct soap *soap,
	tt__PTZPresetTourOptions *Options)
{
	_tptz__GetPresetTourOptionsResponse *_p = ::soap_new__tptz__GetPresetTourOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptionsResponse::Options = Options;
	}
	return _p;
}

inline _tptz__GetPresetTourOptionsResponse * soap_new_set__tptz__GetPresetTourOptionsResponse(
	struct soap *soap,
	tt__PTZPresetTourOptions *Options)
{
	_tptz__GetPresetTourOptionsResponse *_p = ::soap_new__tptz__GetPresetTourOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptionsResponse::Options = Options;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourOptionsResponse * SOAP_FMAC4 soap_get__tptz__GetPresetTourOptionsResponse(struct soap*, _tptz__GetPresetTourOptionsResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTourOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTourOptionsResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTourOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTourOptionsResponse(struct soap *soap, _tptz__GetPresetTourOptionsResponse *p)
{
	if (::soap_read__tptz__GetPresetTourOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourOptions(struct soap*, const char*, int, const _tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptions * SOAP_FMAC4 soap_in__tptz__GetPresetTourOptions(struct soap*, const char*, _tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourOptions * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourOptions * soap_new__tptz__GetPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourOptions * soap_new_req__tptz__GetPresetTourOptions(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTourOptions *_p = ::soap_new__tptz__GetPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptions::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresetTourOptions * soap_new_set__tptz__GetPresetTourOptions(
	struct soap *soap,
	const std::string& ProfileToken,
	std::string *PresetTourToken)
{
	_tptz__GetPresetTourOptions *_p = ::soap_new__tptz__GetPresetTourOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourOptions::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTourOptions::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourOptions", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourOptions * SOAP_FMAC4 soap_get__tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTourOptions(struct soap *soap, const char *URL, _tptz__GetPresetTourOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTourOptions(struct soap *soap, _tptz__GetPresetTourOptions *p)
{
	if (::soap_read__tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetTourResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTourResponse(struct soap*, const char*, int, const _tptz__GetPresetTourResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetTourResponse * SOAP_FMAC4 soap_in__tptz__GetPresetTourResponse(struct soap*, const char*, _tptz__GetPresetTourResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetTourResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTourResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTourResponse * soap_new__tptz__GetPresetTourResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTourResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTourResponse * soap_new_req__tptz__GetPresetTourResponse(
	struct soap *soap,
	tt__PresetTour *PresetTour)
{
	_tptz__GetPresetTourResponse *_p = ::soap_new__tptz__GetPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline _tptz__GetPresetTourResponse * soap_new_set__tptz__GetPresetTourResponse(
	struct soap *soap,
	tt__PresetTour *PresetTour)
{
	_tptz__GetPresetTourResponse *_p = ::soap_new__tptz__GetPresetTourResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTourResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTourResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetTourResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTourResponse * SOAP_FMAC4 soap_get__tptz__GetPresetTourResponse(struct soap*, _tptz__GetPresetTourResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTourResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTourResponse(struct soap *soap, const char *URL, _tptz__GetPresetTourResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTourResponse(struct soap *soap, _tptz__GetPresetTourResponse *p)
{
	if (::soap_read__tptz__GetPresetTourResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTour_DEFINED
#define SOAP_TYPE__tptz__GetPresetTour_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTour(struct soap*, const char*, int, const _tptz__GetPresetTour *, const char*);
SOAP_FMAC3 _tptz__GetPresetTour * SOAP_FMAC4 soap_in__tptz__GetPresetTour(struct soap*, const char*, _tptz__GetPresetTour *, const char*);
SOAP_FMAC1 _tptz__GetPresetTour * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTour * soap_new__tptz__GetPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTour(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTour * soap_new_req__tptz__GetPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__GetPresetTour *_p = ::soap_new__tptz__GetPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline _tptz__GetPresetTour * soap_new_set__tptz__GetPresetTour(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetTourToken)
{
	_tptz__GetPresetTour *_p = ::soap_new__tptz__GetPresetTour(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTour::ProfileToken = ProfileToken;
		_p->_tptz__GetPresetTour::PresetTourToken = PresetTourToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTour", p->soap_type() == SOAP_TYPE__tptz__GetPresetTour ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTour * SOAP_FMAC4 soap_get__tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *, const char*, const char*);

inline int soap_read__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTour(struct soap *soap, const char *URL, _tptz__GetPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTour(struct soap *soap, _tptz__GetPresetTour *p)
{
	if (::soap_read__tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetToursResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetToursResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetToursResponse(struct soap*, const char*, int, const _tptz__GetPresetToursResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetToursResponse * SOAP_FMAC4 soap_in__tptz__GetPresetToursResponse(struct soap*, const char*, _tptz__GetPresetToursResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetToursResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetToursResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetToursResponse * soap_new__tptz__GetPresetToursResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetToursResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetToursResponse * soap_new_req__tptz__GetPresetToursResponse(
	struct soap *soap)
{
	_tptz__GetPresetToursResponse *_p = ::soap_new__tptz__GetPresetToursResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetPresetToursResponse * soap_new_set__tptz__GetPresetToursResponse(
	struct soap *soap,
	const std::vector<tt__PresetTour *> & PresetTour)
{
	_tptz__GetPresetToursResponse *_p = ::soap_new__tptz__GetPresetToursResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetToursResponse::PresetTour = PresetTour;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetToursResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetToursResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetToursResponse * SOAP_FMAC4 soap_get__tptz__GetPresetToursResponse(struct soap*, _tptz__GetPresetToursResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetToursResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetToursResponse(struct soap *soap, const char *URL, _tptz__GetPresetToursResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetToursResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetToursResponse(struct soap *soap, _tptz__GetPresetToursResponse *p)
{
	if (::soap_read__tptz__GetPresetToursResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTours_DEFINED
#define SOAP_TYPE__tptz__GetPresetTours_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetTours(struct soap*, const char*, int, const _tptz__GetPresetTours *, const char*);
SOAP_FMAC3 _tptz__GetPresetTours * SOAP_FMAC4 soap_in__tptz__GetPresetTours(struct soap*, const char*, _tptz__GetPresetTours *, const char*);
SOAP_FMAC1 _tptz__GetPresetTours * SOAP_FMAC2 soap_instantiate__tptz__GetPresetTours(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetTours * soap_new__tptz__GetPresetTours(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetTours(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetTours * soap_new_req__tptz__GetPresetTours(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTours *_p = ::soap_new__tptz__GetPresetTours(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTours::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresetTours * soap_new_set__tptz__GetPresetTours(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresetTours *_p = ::soap_new__tptz__GetPresetTours(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetTours::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetTours", p->soap_type() == SOAP_TYPE__tptz__GetPresetTours ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetTours * SOAP_FMAC4 soap_get__tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *, const char*, const char*);

inline int soap_read__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetTours(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetTours(struct soap *soap, const char *URL, _tptz__GetPresetTours *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetTours(struct soap *soap, _tptz__GetPresetTours *p)
{
	if (::soap_read__tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__StopResponse_DEFINED
#define SOAP_TYPE__tptz__StopResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__StopResponse(struct soap*, const char*, int, const _tptz__StopResponse *, const char*);
SOAP_FMAC3 _tptz__StopResponse * SOAP_FMAC4 soap_in__tptz__StopResponse(struct soap*, const char*, _tptz__StopResponse *, const char*);
SOAP_FMAC1 _tptz__StopResponse * SOAP_FMAC2 soap_instantiate__tptz__StopResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__StopResponse * soap_new__tptz__StopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__StopResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__StopResponse * soap_new_req__tptz__StopResponse(
	struct soap *soap)
{
	_tptz__StopResponse *_p = ::soap_new__tptz__StopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__StopResponse * soap_new_set__tptz__StopResponse(
	struct soap *soap)
{
	_tptz__StopResponse *_p = ::soap_new__tptz__StopResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__StopResponse(struct soap *soap, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:StopResponse", p->soap_type() == SOAP_TYPE__tptz__StopResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__StopResponse * SOAP_FMAC4 soap_get__tptz__StopResponse(struct soap*, _tptz__StopResponse *, const char*, const char*);

inline int soap_read__tptz__StopResponse(struct soap *soap, _tptz__StopResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__StopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__StopResponse(struct soap *soap, const char *URL, _tptz__StopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__StopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__StopResponse(struct soap *soap, _tptz__StopResponse *p)
{
	if (::soap_read__tptz__StopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__Stop_DEFINED
#define SOAP_TYPE__tptz__Stop_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__Stop(struct soap*, const char*, int, const _tptz__Stop *, const char*);
SOAP_FMAC3 _tptz__Stop * SOAP_FMAC4 soap_in__tptz__Stop(struct soap*, const char*, _tptz__Stop *, const char*);
SOAP_FMAC1 _tptz__Stop * SOAP_FMAC2 soap_instantiate__tptz__Stop(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__Stop * soap_new__tptz__Stop(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__Stop(soap, n, NULL, NULL, NULL);
}

inline _tptz__Stop * soap_new_req__tptz__Stop(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__Stop *_p = ::soap_new__tptz__Stop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__Stop::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__Stop * soap_new_set__tptz__Stop(
	struct soap *soap,
	const std::string& ProfileToken,
	bool *PanTilt,
	bool *Zoom)
{
	_tptz__Stop *_p = ::soap_new__tptz__Stop(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__Stop::ProfileToken = ProfileToken;
		_p->_tptz__Stop::PanTilt = PanTilt;
		_p->_tptz__Stop::Zoom = Zoom;
	}
	return _p;
}

inline int soap_write__tptz__Stop(struct soap *soap, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Stop", p->soap_type() == SOAP_TYPE__tptz__Stop ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__Stop * SOAP_FMAC4 soap_get__tptz__Stop(struct soap*, _tptz__Stop *, const char*, const char*);

inline int soap_read__tptz__Stop(struct soap *soap, _tptz__Stop *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__Stop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__Stop(struct soap *soap, const char *URL, _tptz__Stop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__Stop(struct soap *soap, _tptz__Stop *p)
{
	if (::soap_read__tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GeoMoveResponse_DEFINED
#define SOAP_TYPE__tptz__GeoMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GeoMoveResponse(struct soap*, const char*, int, const _tptz__GeoMoveResponse *, const char*);
SOAP_FMAC3 _tptz__GeoMoveResponse * SOAP_FMAC4 soap_in__tptz__GeoMoveResponse(struct soap*, const char*, _tptz__GeoMoveResponse *, const char*);
SOAP_FMAC1 _tptz__GeoMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__GeoMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GeoMoveResponse * soap_new__tptz__GeoMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GeoMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GeoMoveResponse * soap_new_req__tptz__GeoMoveResponse(
	struct soap *soap)
{
	_tptz__GeoMoveResponse *_p = ::soap_new__tptz__GeoMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GeoMoveResponse * soap_new_set__tptz__GeoMoveResponse(
	struct soap *soap)
{
	_tptz__GeoMoveResponse *_p = ::soap_new__tptz__GeoMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GeoMoveResponse(struct soap *soap, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMoveResponse", p->soap_type() == SOAP_TYPE__tptz__GeoMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GeoMoveResponse * SOAP_FMAC4 soap_get__tptz__GeoMoveResponse(struct soap*, _tptz__GeoMoveResponse *, const char*, const char*);

inline int soap_read__tptz__GeoMoveResponse(struct soap *soap, _tptz__GeoMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GeoMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GeoMoveResponse(struct soap *soap, const char *URL, _tptz__GeoMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GeoMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GeoMoveResponse(struct soap *soap, _tptz__GeoMoveResponse *p)
{
	if (::soap_read__tptz__GeoMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GeoMove_DEFINED
#define SOAP_TYPE__tptz__GeoMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GeoMove(struct soap*, const char*, int, const _tptz__GeoMove *, const char*);
SOAP_FMAC3 _tptz__GeoMove * SOAP_FMAC4 soap_in__tptz__GeoMove(struct soap*, const char*, _tptz__GeoMove *, const char*);
SOAP_FMAC1 _tptz__GeoMove * SOAP_FMAC2 soap_instantiate__tptz__GeoMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GeoMove * soap_new__tptz__GeoMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GeoMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__GeoMove * soap_new_req__tptz__GeoMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__GeoLocation *Target)
{
	_tptz__GeoMove *_p = ::soap_new__tptz__GeoMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GeoMove::ProfileToken = ProfileToken;
		_p->_tptz__GeoMove::Target = Target;
	}
	return _p;
}

inline _tptz__GeoMove * soap_new_set__tptz__GeoMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__GeoLocation *Target,
	tt__PTZSpeed *Speed,
	float *AreaHeight,
	float *AreaWidth)
{
	_tptz__GeoMove *_p = ::soap_new__tptz__GeoMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GeoMove::ProfileToken = ProfileToken;
		_p->_tptz__GeoMove::Target = Target;
		_p->_tptz__GeoMove::Speed = Speed;
		_p->_tptz__GeoMove::AreaHeight = AreaHeight;
		_p->_tptz__GeoMove::AreaWidth = AreaWidth;
	}
	return _p;
}

inline int soap_write__tptz__GeoMove(struct soap *soap, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GeoMove", p->soap_type() == SOAP_TYPE__tptz__GeoMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GeoMove * SOAP_FMAC4 soap_get__tptz__GeoMove(struct soap*, _tptz__GeoMove *, const char*, const char*);

inline int soap_read__tptz__GeoMove(struct soap *soap, _tptz__GeoMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GeoMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GeoMove(struct soap *soap, const char *URL, _tptz__GeoMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GeoMove(struct soap *soap, _tptz__GeoMove *p)
{
	if (::soap_read__tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMoveResponse_DEFINED
#define SOAP_TYPE__tptz__AbsoluteMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__AbsoluteMoveResponse(struct soap*, const char*, int, const _tptz__AbsoluteMoveResponse *, const char*);
SOAP_FMAC3 _tptz__AbsoluteMoveResponse * SOAP_FMAC4 soap_in__tptz__AbsoluteMoveResponse(struct soap*, const char*, _tptz__AbsoluteMoveResponse *, const char*);
SOAP_FMAC1 _tptz__AbsoluteMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__AbsoluteMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__AbsoluteMoveResponse * soap_new__tptz__AbsoluteMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__AbsoluteMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__AbsoluteMoveResponse * soap_new_req__tptz__AbsoluteMoveResponse(
	struct soap *soap)
{
	_tptz__AbsoluteMoveResponse *_p = ::soap_new__tptz__AbsoluteMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__AbsoluteMoveResponse * soap_new_set__tptz__AbsoluteMoveResponse(
	struct soap *soap)
{
	_tptz__AbsoluteMoveResponse *_p = ::soap_new__tptz__AbsoluteMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMoveResponse", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__AbsoluteMoveResponse * SOAP_FMAC4 soap_get__tptz__AbsoluteMoveResponse(struct soap*, _tptz__AbsoluteMoveResponse *, const char*, const char*);

inline int soap_read__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__AbsoluteMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__AbsoluteMoveResponse(struct soap *soap, const char *URL, _tptz__AbsoluteMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__AbsoluteMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__AbsoluteMoveResponse(struct soap *soap, _tptz__AbsoluteMoveResponse *p)
{
	if (::soap_read__tptz__AbsoluteMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE__tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__AbsoluteMove(struct soap*, const char*, int, const _tptz__AbsoluteMove *, const char*);
SOAP_FMAC3 _tptz__AbsoluteMove * SOAP_FMAC4 soap_in__tptz__AbsoluteMove(struct soap*, const char*, _tptz__AbsoluteMove *, const char*);
SOAP_FMAC1 _tptz__AbsoluteMove * SOAP_FMAC2 soap_instantiate__tptz__AbsoluteMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__AbsoluteMove * soap_new__tptz__AbsoluteMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__AbsoluteMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__AbsoluteMove * soap_new_req__tptz__AbsoluteMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Position)
{
	_tptz__AbsoluteMove *_p = ::soap_new__tptz__AbsoluteMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__AbsoluteMove::ProfileToken = ProfileToken;
		_p->_tptz__AbsoluteMove::Position = Position;
	}
	return _p;
}

inline _tptz__AbsoluteMove * soap_new_set__tptz__AbsoluteMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Position,
	tt__PTZSpeed *Speed)
{
	_tptz__AbsoluteMove *_p = ::soap_new__tptz__AbsoluteMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__AbsoluteMove::ProfileToken = ProfileToken;
		_p->_tptz__AbsoluteMove::Position = Position;
		_p->_tptz__AbsoluteMove::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:AbsoluteMove", p->soap_type() == SOAP_TYPE__tptz__AbsoluteMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__AbsoluteMove * SOAP_FMAC4 soap_get__tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *, const char*, const char*);

inline int soap_read__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__AbsoluteMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__AbsoluteMove(struct soap *soap, const char *URL, _tptz__AbsoluteMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__AbsoluteMove(struct soap *soap, _tptz__AbsoluteMove *p)
{
	if (::soap_read__tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RelativeMoveResponse_DEFINED
#define SOAP_TYPE__tptz__RelativeMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RelativeMoveResponse(struct soap*, const char*, int, const _tptz__RelativeMoveResponse *, const char*);
SOAP_FMAC3 _tptz__RelativeMoveResponse * SOAP_FMAC4 soap_in__tptz__RelativeMoveResponse(struct soap*, const char*, _tptz__RelativeMoveResponse *, const char*);
SOAP_FMAC1 _tptz__RelativeMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__RelativeMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RelativeMoveResponse * soap_new__tptz__RelativeMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RelativeMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RelativeMoveResponse * soap_new_req__tptz__RelativeMoveResponse(
	struct soap *soap)
{
	_tptz__RelativeMoveResponse *_p = ::soap_new__tptz__RelativeMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RelativeMoveResponse * soap_new_set__tptz__RelativeMoveResponse(
	struct soap *soap)
{
	_tptz__RelativeMoveResponse *_p = ::soap_new__tptz__RelativeMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMoveResponse", p->soap_type() == SOAP_TYPE__tptz__RelativeMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RelativeMoveResponse * SOAP_FMAC4 soap_get__tptz__RelativeMoveResponse(struct soap*, _tptz__RelativeMoveResponse *, const char*, const char*);

inline int soap_read__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RelativeMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RelativeMoveResponse(struct soap *soap, const char *URL, _tptz__RelativeMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RelativeMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RelativeMoveResponse(struct soap *soap, _tptz__RelativeMoveResponse *p)
{
	if (::soap_read__tptz__RelativeMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RelativeMove_DEFINED
#define SOAP_TYPE__tptz__RelativeMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RelativeMove(struct soap*, const char*, int, const _tptz__RelativeMove *, const char*);
SOAP_FMAC3 _tptz__RelativeMove * SOAP_FMAC4 soap_in__tptz__RelativeMove(struct soap*, const char*, _tptz__RelativeMove *, const char*);
SOAP_FMAC1 _tptz__RelativeMove * SOAP_FMAC2 soap_instantiate__tptz__RelativeMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RelativeMove * soap_new__tptz__RelativeMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RelativeMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__RelativeMove * soap_new_req__tptz__RelativeMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Translation)
{
	_tptz__RelativeMove *_p = ::soap_new__tptz__RelativeMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RelativeMove::ProfileToken = ProfileToken;
		_p->_tptz__RelativeMove::Translation = Translation;
	}
	return _p;
}

inline _tptz__RelativeMove * soap_new_set__tptz__RelativeMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZVector *Translation,
	tt__PTZSpeed *Speed)
{
	_tptz__RelativeMove *_p = ::soap_new__tptz__RelativeMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RelativeMove::ProfileToken = ProfileToken;
		_p->_tptz__RelativeMove::Translation = Translation;
		_p->_tptz__RelativeMove::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RelativeMove", p->soap_type() == SOAP_TYPE__tptz__RelativeMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RelativeMove * SOAP_FMAC4 soap_get__tptz__RelativeMove(struct soap*, _tptz__RelativeMove *, const char*, const char*);

inline int soap_read__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RelativeMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RelativeMove(struct soap *soap, const char *URL, _tptz__RelativeMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RelativeMove(struct soap *soap, _tptz__RelativeMove *p)
{
	if (::soap_read__tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMoveResponse_DEFINED
#define SOAP_TYPE__tptz__ContinuousMoveResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ContinuousMoveResponse(struct soap*, const char*, int, const _tptz__ContinuousMoveResponse *, const char*);
SOAP_FMAC3 _tptz__ContinuousMoveResponse * SOAP_FMAC4 soap_in__tptz__ContinuousMoveResponse(struct soap*, const char*, _tptz__ContinuousMoveResponse *, const char*);
SOAP_FMAC1 _tptz__ContinuousMoveResponse * SOAP_FMAC2 soap_instantiate__tptz__ContinuousMoveResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ContinuousMoveResponse * soap_new__tptz__ContinuousMoveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ContinuousMoveResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__ContinuousMoveResponse * soap_new_req__tptz__ContinuousMoveResponse(
	struct soap *soap)
{
	_tptz__ContinuousMoveResponse *_p = ::soap_new__tptz__ContinuousMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__ContinuousMoveResponse * soap_new_set__tptz__ContinuousMoveResponse(
	struct soap *soap)
{
	_tptz__ContinuousMoveResponse *_p = ::soap_new__tptz__ContinuousMoveResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMoveResponse", p->soap_type() == SOAP_TYPE__tptz__ContinuousMoveResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ContinuousMoveResponse * SOAP_FMAC4 soap_get__tptz__ContinuousMoveResponse(struct soap*, _tptz__ContinuousMoveResponse *, const char*, const char*);

inline int soap_read__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ContinuousMoveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ContinuousMoveResponse(struct soap *soap, const char *URL, _tptz__ContinuousMoveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ContinuousMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ContinuousMoveResponse(struct soap *soap, _tptz__ContinuousMoveResponse *p)
{
	if (::soap_read__tptz__ContinuousMoveResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMove_DEFINED
#define SOAP_TYPE__tptz__ContinuousMove_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__ContinuousMove(struct soap*, const char*, int, const _tptz__ContinuousMove *, const char*);
SOAP_FMAC3 _tptz__ContinuousMove * SOAP_FMAC4 soap_in__tptz__ContinuousMove(struct soap*, const char*, _tptz__ContinuousMove *, const char*);
SOAP_FMAC1 _tptz__ContinuousMove * SOAP_FMAC2 soap_instantiate__tptz__ContinuousMove(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__ContinuousMove * soap_new__tptz__ContinuousMove(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__ContinuousMove(soap, n, NULL, NULL, NULL);
}

inline _tptz__ContinuousMove * soap_new_req__tptz__ContinuousMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Velocity)
{
	_tptz__ContinuousMove *_p = ::soap_new__tptz__ContinuousMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ContinuousMove::ProfileToken = ProfileToken;
		_p->_tptz__ContinuousMove::Velocity = Velocity;
	}
	return _p;
}

inline _tptz__ContinuousMove * soap_new_set__tptz__ContinuousMove(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Velocity,
	std::string *Timeout)
{
	_tptz__ContinuousMove *_p = ::soap_new__tptz__ContinuousMove(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__ContinuousMove::ProfileToken = ProfileToken;
		_p->_tptz__ContinuousMove::Velocity = Velocity;
		_p->_tptz__ContinuousMove::Timeout = Timeout;
	}
	return _p;
}

inline int soap_write__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:ContinuousMove", p->soap_type() == SOAP_TYPE__tptz__ContinuousMove ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__ContinuousMove * SOAP_FMAC4 soap_get__tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *, const char*, const char*);

inline int soap_read__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__ContinuousMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__ContinuousMove(struct soap *soap, const char *URL, _tptz__ContinuousMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__ContinuousMove(struct soap *soap, _tptz__ContinuousMove *p)
{
	if (::soap_read__tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetHomePositionResponse_DEFINED
#define SOAP_TYPE__tptz__SetHomePositionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetHomePositionResponse(struct soap*, const char*, int, const _tptz__SetHomePositionResponse *, const char*);
SOAP_FMAC3 _tptz__SetHomePositionResponse * SOAP_FMAC4 soap_in__tptz__SetHomePositionResponse(struct soap*, const char*, _tptz__SetHomePositionResponse *, const char*);
SOAP_FMAC1 _tptz__SetHomePositionResponse * SOAP_FMAC2 soap_instantiate__tptz__SetHomePositionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetHomePositionResponse * soap_new__tptz__SetHomePositionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetHomePositionResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetHomePositionResponse * soap_new_req__tptz__SetHomePositionResponse(
	struct soap *soap)
{
	_tptz__SetHomePositionResponse *_p = ::soap_new__tptz__SetHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__SetHomePositionResponse * soap_new_set__tptz__SetHomePositionResponse(
	struct soap *soap)
{
	_tptz__SetHomePositionResponse *_p = ::soap_new__tptz__SetHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__SetHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetHomePositionResponse * SOAP_FMAC4 soap_get__tptz__SetHomePositionResponse(struct soap*, _tptz__SetHomePositionResponse *, const char*, const char*);

inline int soap_read__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetHomePositionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetHomePositionResponse(struct soap *soap, const char *URL, _tptz__SetHomePositionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetHomePositionResponse(struct soap *soap, _tptz__SetHomePositionResponse *p)
{
	if (::soap_read__tptz__SetHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetHomePosition_DEFINED
#define SOAP_TYPE__tptz__SetHomePosition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetHomePosition(struct soap*, const char*, int, const _tptz__SetHomePosition *, const char*);
SOAP_FMAC3 _tptz__SetHomePosition * SOAP_FMAC4 soap_in__tptz__SetHomePosition(struct soap*, const char*, _tptz__SetHomePosition *, const char*);
SOAP_FMAC1 _tptz__SetHomePosition * SOAP_FMAC2 soap_instantiate__tptz__SetHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetHomePosition * soap_new__tptz__SetHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetHomePosition(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetHomePosition * soap_new_req__tptz__SetHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetHomePosition *_p = ::soap_new__tptz__SetHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__SetHomePosition * soap_new_set__tptz__SetHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetHomePosition *_p = ::soap_new__tptz__SetHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetHomePosition", p->soap_type() == SOAP_TYPE__tptz__SetHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetHomePosition * SOAP_FMAC4 soap_get__tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *, const char*, const char*);

inline int soap_read__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetHomePosition(struct soap *soap, const char *URL, _tptz__SetHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetHomePosition(struct soap *soap, _tptz__SetHomePosition *p)
{
	if (::soap_read__tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePositionResponse_DEFINED
#define SOAP_TYPE__tptz__GotoHomePositionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoHomePositionResponse(struct soap*, const char*, int, const _tptz__GotoHomePositionResponse *, const char*);
SOAP_FMAC3 _tptz__GotoHomePositionResponse * SOAP_FMAC4 soap_in__tptz__GotoHomePositionResponse(struct soap*, const char*, _tptz__GotoHomePositionResponse *, const char*);
SOAP_FMAC1 _tptz__GotoHomePositionResponse * SOAP_FMAC2 soap_instantiate__tptz__GotoHomePositionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoHomePositionResponse * soap_new__tptz__GotoHomePositionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoHomePositionResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoHomePositionResponse * soap_new_req__tptz__GotoHomePositionResponse(
	struct soap *soap)
{
	_tptz__GotoHomePositionResponse *_p = ::soap_new__tptz__GotoHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GotoHomePositionResponse * soap_new_set__tptz__GotoHomePositionResponse(
	struct soap *soap)
{
	_tptz__GotoHomePositionResponse *_p = ::soap_new__tptz__GotoHomePositionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePositionResponse", p->soap_type() == SOAP_TYPE__tptz__GotoHomePositionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoHomePositionResponse * SOAP_FMAC4 soap_get__tptz__GotoHomePositionResponse(struct soap*, _tptz__GotoHomePositionResponse *, const char*, const char*);

inline int soap_read__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoHomePositionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoHomePositionResponse(struct soap *soap, const char *URL, _tptz__GotoHomePositionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoHomePositionResponse(struct soap *soap, _tptz__GotoHomePositionResponse *p)
{
	if (::soap_read__tptz__GotoHomePositionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE__tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoHomePosition(struct soap*, const char*, int, const _tptz__GotoHomePosition *, const char*);
SOAP_FMAC3 _tptz__GotoHomePosition * SOAP_FMAC4 soap_in__tptz__GotoHomePosition(struct soap*, const char*, _tptz__GotoHomePosition *, const char*);
SOAP_FMAC1 _tptz__GotoHomePosition * SOAP_FMAC2 soap_instantiate__tptz__GotoHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoHomePosition * soap_new__tptz__GotoHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoHomePosition(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoHomePosition * soap_new_req__tptz__GotoHomePosition(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GotoHomePosition *_p = ::soap_new__tptz__GotoHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoHomePosition::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GotoHomePosition * soap_new_set__tptz__GotoHomePosition(
	struct soap *soap,
	const std::string& ProfileToken,
	tt__PTZSpeed *Speed)
{
	_tptz__GotoHomePosition *_p = ::soap_new__tptz__GotoHomePosition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoHomePosition::ProfileToken = ProfileToken;
		_p->_tptz__GotoHomePosition::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoHomePosition", p->soap_type() == SOAP_TYPE__tptz__GotoHomePosition ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoHomePosition * SOAP_FMAC4 soap_get__tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *, const char*, const char*);

inline int soap_read__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoHomePosition(struct soap *soap, const char *URL, _tptz__GotoHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoHomePosition(struct soap *soap, _tptz__GotoHomePosition *p)
{
	if (::soap_read__tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetStatusResponse_DEFINED
#define SOAP_TYPE__tptz__GetStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetStatusResponse(struct soap*, const char*, int, const _tptz__GetStatusResponse *, const char*);
SOAP_FMAC3 _tptz__GetStatusResponse * SOAP_FMAC4 soap_in__tptz__GetStatusResponse(struct soap*, const char*, _tptz__GetStatusResponse *, const char*);
SOAP_FMAC1 _tptz__GetStatusResponse * SOAP_FMAC2 soap_instantiate__tptz__GetStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetStatusResponse * soap_new__tptz__GetStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetStatusResponse * soap_new_req__tptz__GetStatusResponse(
	struct soap *soap,
	tt__PTZStatus *PTZStatus)
{
	_tptz__GetStatusResponse *_p = ::soap_new__tptz__GetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatusResponse::PTZStatus = PTZStatus;
	}
	return _p;
}

inline _tptz__GetStatusResponse * soap_new_set__tptz__GetStatusResponse(
	struct soap *soap,
	tt__PTZStatus *PTZStatus)
{
	_tptz__GetStatusResponse *_p = ::soap_new__tptz__GetStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatusResponse::PTZStatus = PTZStatus;
	}
	return _p;
}

inline int soap_write__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatusResponse", p->soap_type() == SOAP_TYPE__tptz__GetStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetStatusResponse * SOAP_FMAC4 soap_get__tptz__GetStatusResponse(struct soap*, _tptz__GetStatusResponse *, const char*, const char*);

inline int soap_read__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetStatusResponse(struct soap *soap, const char *URL, _tptz__GetStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetStatusResponse(struct soap *soap, _tptz__GetStatusResponse *p)
{
	if (::soap_read__tptz__GetStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetStatus_DEFINED
#define SOAP_TYPE__tptz__GetStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetStatus(struct soap*, const char*, int, const _tptz__GetStatus *, const char*);
SOAP_FMAC3 _tptz__GetStatus * SOAP_FMAC4 soap_in__tptz__GetStatus(struct soap*, const char*, _tptz__GetStatus *, const char*);
SOAP_FMAC1 _tptz__GetStatus * SOAP_FMAC2 soap_instantiate__tptz__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetStatus * soap_new__tptz__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetStatus(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetStatus * soap_new_req__tptz__GetStatus(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetStatus *_p = ::soap_new__tptz__GetStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatus::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetStatus * soap_new_set__tptz__GetStatus(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetStatus *_p = ::soap_new__tptz__GetStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetStatus::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetStatus(struct soap *soap, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetStatus", p->soap_type() == SOAP_TYPE__tptz__GetStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetStatus * SOAP_FMAC4 soap_get__tptz__GetStatus(struct soap*, _tptz__GetStatus *, const char*, const char*);

inline int soap_read__tptz__GetStatus(struct soap *soap, _tptz__GetStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetStatus(struct soap *soap, const char *URL, _tptz__GetStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetStatus(struct soap *soap, _tptz__GetStatus *p)
{
	if (::soap_read__tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoPresetResponse_DEFINED
#define SOAP_TYPE__tptz__GotoPresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoPresetResponse(struct soap*, const char*, int, const _tptz__GotoPresetResponse *, const char*);
SOAP_FMAC3 _tptz__GotoPresetResponse * SOAP_FMAC4 soap_in__tptz__GotoPresetResponse(struct soap*, const char*, _tptz__GotoPresetResponse *, const char*);
SOAP_FMAC1 _tptz__GotoPresetResponse * SOAP_FMAC2 soap_instantiate__tptz__GotoPresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoPresetResponse * soap_new__tptz__GotoPresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoPresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoPresetResponse * soap_new_req__tptz__GotoPresetResponse(
	struct soap *soap)
{
	_tptz__GotoPresetResponse *_p = ::soap_new__tptz__GotoPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GotoPresetResponse * soap_new_set__tptz__GotoPresetResponse(
	struct soap *soap)
{
	_tptz__GotoPresetResponse *_p = ::soap_new__tptz__GotoPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPresetResponse", p->soap_type() == SOAP_TYPE__tptz__GotoPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoPresetResponse * SOAP_FMAC4 soap_get__tptz__GotoPresetResponse(struct soap*, _tptz__GotoPresetResponse *, const char*, const char*);

inline int soap_read__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoPresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoPresetResponse(struct soap *soap, const char *URL, _tptz__GotoPresetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoPresetResponse(struct soap *soap, _tptz__GotoPresetResponse *p)
{
	if (::soap_read__tptz__GotoPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GotoPreset_DEFINED
#define SOAP_TYPE__tptz__GotoPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GotoPreset(struct soap*, const char*, int, const _tptz__GotoPreset *, const char*);
SOAP_FMAC3 _tptz__GotoPreset * SOAP_FMAC4 soap_in__tptz__GotoPreset(struct soap*, const char*, _tptz__GotoPreset *, const char*);
SOAP_FMAC1 _tptz__GotoPreset * SOAP_FMAC2 soap_instantiate__tptz__GotoPreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GotoPreset * soap_new__tptz__GotoPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GotoPreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__GotoPreset * soap_new_req__tptz__GotoPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__GotoPreset *_p = ::soap_new__tptz__GotoPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoPreset::ProfileToken = ProfileToken;
		_p->_tptz__GotoPreset::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__GotoPreset * soap_new_set__tptz__GotoPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken,
	tt__PTZSpeed *Speed)
{
	_tptz__GotoPreset *_p = ::soap_new__tptz__GotoPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GotoPreset::ProfileToken = ProfileToken;
		_p->_tptz__GotoPreset::PresetToken = PresetToken;
		_p->_tptz__GotoPreset::Speed = Speed;
	}
	return _p;
}

inline int soap_write__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GotoPreset", p->soap_type() == SOAP_TYPE__tptz__GotoPreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GotoPreset * SOAP_FMAC4 soap_get__tptz__GotoPreset(struct soap*, _tptz__GotoPreset *, const char*, const char*);

inline int soap_read__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GotoPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GotoPreset(struct soap *soap, const char *URL, _tptz__GotoPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GotoPreset(struct soap *soap, _tptz__GotoPreset *p)
{
	if (::soap_read__tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetResponse_DEFINED
#define SOAP_TYPE__tptz__RemovePresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePresetResponse(struct soap*, const char*, int, const _tptz__RemovePresetResponse *, const char*);
SOAP_FMAC3 _tptz__RemovePresetResponse * SOAP_FMAC4 soap_in__tptz__RemovePresetResponse(struct soap*, const char*, _tptz__RemovePresetResponse *, const char*);
SOAP_FMAC1 _tptz__RemovePresetResponse * SOAP_FMAC2 soap_instantiate__tptz__RemovePresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePresetResponse * soap_new__tptz__RemovePresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePresetResponse * soap_new_req__tptz__RemovePresetResponse(
	struct soap *soap)
{
	_tptz__RemovePresetResponse *_p = ::soap_new__tptz__RemovePresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__RemovePresetResponse * soap_new_set__tptz__RemovePresetResponse(
	struct soap *soap)
{
	_tptz__RemovePresetResponse *_p = ::soap_new__tptz__RemovePresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePresetResponse", p->soap_type() == SOAP_TYPE__tptz__RemovePresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePresetResponse * SOAP_FMAC4 soap_get__tptz__RemovePresetResponse(struct soap*, _tptz__RemovePresetResponse *, const char*, const char*);

inline int soap_read__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePresetResponse(struct soap *soap, const char *URL, _tptz__RemovePresetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePresetResponse(struct soap *soap, _tptz__RemovePresetResponse *p)
{
	if (::soap_read__tptz__RemovePresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__RemovePreset_DEFINED
#define SOAP_TYPE__tptz__RemovePreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__RemovePreset(struct soap*, const char*, int, const _tptz__RemovePreset *, const char*);
SOAP_FMAC3 _tptz__RemovePreset * SOAP_FMAC4 soap_in__tptz__RemovePreset(struct soap*, const char*, _tptz__RemovePreset *, const char*);
SOAP_FMAC1 _tptz__RemovePreset * SOAP_FMAC2 soap_instantiate__tptz__RemovePreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__RemovePreset * soap_new__tptz__RemovePreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__RemovePreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__RemovePreset * soap_new_req__tptz__RemovePreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__RemovePreset *_p = ::soap_new__tptz__RemovePreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePreset::ProfileToken = ProfileToken;
		_p->_tptz__RemovePreset::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__RemovePreset * soap_new_set__tptz__RemovePreset(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& PresetToken)
{
	_tptz__RemovePreset *_p = ::soap_new__tptz__RemovePreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__RemovePreset::ProfileToken = ProfileToken;
		_p->_tptz__RemovePreset::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:RemovePreset", p->soap_type() == SOAP_TYPE__tptz__RemovePreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__RemovePreset * SOAP_FMAC4 soap_get__tptz__RemovePreset(struct soap*, _tptz__RemovePreset *, const char*, const char*);

inline int soap_read__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__RemovePreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__RemovePreset(struct soap *soap, const char *URL, _tptz__RemovePreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__RemovePreset(struct soap *soap, _tptz__RemovePreset *p)
{
	if (::soap_read__tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetPresetResponse_DEFINED
#define SOAP_TYPE__tptz__SetPresetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetPresetResponse(struct soap*, const char*, int, const _tptz__SetPresetResponse *, const char*);
SOAP_FMAC3 _tptz__SetPresetResponse * SOAP_FMAC4 soap_in__tptz__SetPresetResponse(struct soap*, const char*, _tptz__SetPresetResponse *, const char*);
SOAP_FMAC1 _tptz__SetPresetResponse * SOAP_FMAC2 soap_instantiate__tptz__SetPresetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetPresetResponse * soap_new__tptz__SetPresetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetPresetResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetPresetResponse * soap_new_req__tptz__SetPresetResponse(
	struct soap *soap,
	const std::string& PresetToken)
{
	_tptz__SetPresetResponse *_p = ::soap_new__tptz__SetPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPresetResponse::PresetToken = PresetToken;
	}
	return _p;
}

inline _tptz__SetPresetResponse * soap_new_set__tptz__SetPresetResponse(
	struct soap *soap,
	const std::string& PresetToken)
{
	_tptz__SetPresetResponse *_p = ::soap_new__tptz__SetPresetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPresetResponse::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPresetResponse", p->soap_type() == SOAP_TYPE__tptz__SetPresetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetPresetResponse * SOAP_FMAC4 soap_get__tptz__SetPresetResponse(struct soap*, _tptz__SetPresetResponse *, const char*, const char*);

inline int soap_read__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetPresetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetPresetResponse(struct soap *soap, const char *URL, _tptz__SetPresetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetPresetResponse(struct soap *soap, _tptz__SetPresetResponse *p)
{
	if (::soap_read__tptz__SetPresetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetPreset_DEFINED
#define SOAP_TYPE__tptz__SetPreset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetPreset(struct soap*, const char*, int, const _tptz__SetPreset *, const char*);
SOAP_FMAC3 _tptz__SetPreset * SOAP_FMAC4 soap_in__tptz__SetPreset(struct soap*, const char*, _tptz__SetPreset *, const char*);
SOAP_FMAC1 _tptz__SetPreset * SOAP_FMAC2 soap_instantiate__tptz__SetPreset(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetPreset * soap_new__tptz__SetPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetPreset(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetPreset * soap_new_req__tptz__SetPreset(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__SetPreset *_p = ::soap_new__tptz__SetPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPreset::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__SetPreset * soap_new_set__tptz__SetPreset(
	struct soap *soap,
	const std::string& ProfileToken,
	std::string *PresetName,
	std::string *PresetToken)
{
	_tptz__SetPreset *_p = ::soap_new__tptz__SetPreset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetPreset::ProfileToken = ProfileToken;
		_p->_tptz__SetPreset::PresetName = PresetName;
		_p->_tptz__SetPreset::PresetToken = PresetToken;
	}
	return _p;
}

inline int soap_write__tptz__SetPreset(struct soap *soap, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetPreset", p->soap_type() == SOAP_TYPE__tptz__SetPreset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetPreset * SOAP_FMAC4 soap_get__tptz__SetPreset(struct soap*, _tptz__SetPreset *, const char*, const char*);

inline int soap_read__tptz__SetPreset(struct soap *soap, _tptz__SetPreset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetPreset(struct soap *soap, const char *URL, _tptz__SetPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetPreset(struct soap *soap, _tptz__SetPreset *p)
{
	if (::soap_read__tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresetsResponse_DEFINED
#define SOAP_TYPE__tptz__GetPresetsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresetsResponse(struct soap*, const char*, int, const _tptz__GetPresetsResponse *, const char*);
SOAP_FMAC3 _tptz__GetPresetsResponse * SOAP_FMAC4 soap_in__tptz__GetPresetsResponse(struct soap*, const char*, _tptz__GetPresetsResponse *, const char*);
SOAP_FMAC1 _tptz__GetPresetsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetPresetsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresetsResponse * soap_new__tptz__GetPresetsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresetsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresetsResponse * soap_new_req__tptz__GetPresetsResponse(
	struct soap *soap)
{
	_tptz__GetPresetsResponse *_p = ::soap_new__tptz__GetPresetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetPresetsResponse * soap_new_set__tptz__GetPresetsResponse(
	struct soap *soap,
	const std::vector<tt__PTZPreset *> & Preset)
{
	_tptz__GetPresetsResponse *_p = ::soap_new__tptz__GetPresetsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresetsResponse::Preset = Preset;
	}
	return _p;
}

inline int soap_write__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresetsResponse", p->soap_type() == SOAP_TYPE__tptz__GetPresetsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresetsResponse * SOAP_FMAC4 soap_get__tptz__GetPresetsResponse(struct soap*, _tptz__GetPresetsResponse *, const char*, const char*);

inline int soap_read__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresetsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresetsResponse(struct soap *soap, const char *URL, _tptz__GetPresetsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresetsResponse(struct soap *soap, _tptz__GetPresetsResponse *p)
{
	if (::soap_read__tptz__GetPresetsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetPresets_DEFINED
#define SOAP_TYPE__tptz__GetPresets_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetPresets(struct soap*, const char*, int, const _tptz__GetPresets *, const char*);
SOAP_FMAC3 _tptz__GetPresets * SOAP_FMAC4 soap_in__tptz__GetPresets(struct soap*, const char*, _tptz__GetPresets *, const char*);
SOAP_FMAC1 _tptz__GetPresets * SOAP_FMAC2 soap_instantiate__tptz__GetPresets(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetPresets * soap_new__tptz__GetPresets(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetPresets(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetPresets * soap_new_req__tptz__GetPresets(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresets *_p = ::soap_new__tptz__GetPresets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresets::ProfileToken = ProfileToken;
	}
	return _p;
}

inline _tptz__GetPresets * soap_new_set__tptz__GetPresets(
	struct soap *soap,
	const std::string& ProfileToken)
{
	_tptz__GetPresets *_p = ::soap_new__tptz__GetPresets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetPresets::ProfileToken = ProfileToken;
	}
	return _p;
}

inline int soap_write__tptz__GetPresets(struct soap *soap, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetPresets", p->soap_type() == SOAP_TYPE__tptz__GetPresets ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetPresets * SOAP_FMAC4 soap_get__tptz__GetPresets(struct soap*, _tptz__GetPresets *, const char*, const char*);

inline int soap_read__tptz__GetPresets(struct soap *soap, _tptz__GetPresets *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetPresets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetPresets(struct soap *soap, const char *URL, _tptz__GetPresets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetPresets(struct soap *soap, _tptz__GetPresets *p)
{
	if (::soap_read__tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommandResponse_DEFINED
#define SOAP_TYPE__tptz__SendAuxiliaryCommandResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SendAuxiliaryCommandResponse(struct soap*, const char*, int, const _tptz__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_in__tptz__SendAuxiliaryCommandResponse(struct soap*, const char*, _tptz__SendAuxiliaryCommandResponse *, const char*);
SOAP_FMAC1 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC2 soap_instantiate__tptz__SendAuxiliaryCommandResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SendAuxiliaryCommandResponse * soap_new__tptz__SendAuxiliaryCommandResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SendAuxiliaryCommandResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SendAuxiliaryCommandResponse * soap_new_req__tptz__SendAuxiliaryCommandResponse(
	struct soap *soap,
	const std::string& AuxiliaryResponse)
{
	_tptz__SendAuxiliaryCommandResponse *_p = ::soap_new__tptz__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommandResponse::AuxiliaryResponse = AuxiliaryResponse;
	}
	return _p;
}

inline _tptz__SendAuxiliaryCommandResponse * soap_new_set__tptz__SendAuxiliaryCommandResponse(
	struct soap *soap,
	const std::string& AuxiliaryResponse)
{
	_tptz__SendAuxiliaryCommandResponse *_p = ::soap_new__tptz__SendAuxiliaryCommandResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommandResponse::AuxiliaryResponse = AuxiliaryResponse;
	}
	return _p;
}

inline int soap_write__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommandResponse", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommandResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SendAuxiliaryCommandResponse * SOAP_FMAC4 soap_get__tptz__SendAuxiliaryCommandResponse(struct soap*, _tptz__SendAuxiliaryCommandResponse *, const char*, const char*);

inline int soap_read__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SendAuxiliaryCommandResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SendAuxiliaryCommandResponse(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommandResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SendAuxiliaryCommandResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SendAuxiliaryCommandResponse(struct soap *soap, _tptz__SendAuxiliaryCommandResponse *p)
{
	if (::soap_read__tptz__SendAuxiliaryCommandResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE__tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SendAuxiliaryCommand(struct soap*, const char*, int, const _tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_in__tptz__SendAuxiliaryCommand(struct soap*, const char*, _tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 _tptz__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate__tptz__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SendAuxiliaryCommand * soap_new__tptz__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline _tptz__SendAuxiliaryCommand * soap_new_req__tptz__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& AuxiliaryData)
{
	_tptz__SendAuxiliaryCommand *_p = ::soap_new__tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommand::ProfileToken = ProfileToken;
		_p->_tptz__SendAuxiliaryCommand::AuxiliaryData = AuxiliaryData;
	}
	return _p;
}

inline _tptz__SendAuxiliaryCommand * soap_new_set__tptz__SendAuxiliaryCommand(
	struct soap *soap,
	const std::string& ProfileToken,
	const std::string& AuxiliaryData)
{
	_tptz__SendAuxiliaryCommand *_p = ::soap_new__tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SendAuxiliaryCommand::ProfileToken = ProfileToken;
		_p->_tptz__SendAuxiliaryCommand::AuxiliaryData = AuxiliaryData;
	}
	return _p;
}

inline int soap_write__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SendAuxiliaryCommand", p->soap_type() == SOAP_TYPE__tptz__SendAuxiliaryCommand ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_get__tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, _tptz__SendAuxiliaryCommand *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SendAuxiliaryCommand(struct soap *soap, _tptz__SendAuxiliaryCommand *p)
{
	if (::soap_read__tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptionsResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationOptionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationOptionsResponse(struct soap*, const char*, int, const _tptz__GetConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationOptionsResponse(struct soap*, const char*, _tptz__GetConfigurationOptionsResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationOptionsResponse * soap_new__tptz__GetConfigurationOptionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationOptionsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationOptionsResponse * soap_new_req__tptz__GetConfigurationOptionsResponse(
	struct soap *soap,
	tt__PTZConfigurationOptions *PTZConfigurationOptions)
{
	_tptz__GetConfigurationOptionsResponse *_p = ::soap_new__tptz__GetConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptionsResponse::PTZConfigurationOptions = PTZConfigurationOptions;
	}
	return _p;
}

inline _tptz__GetConfigurationOptionsResponse * soap_new_set__tptz__GetConfigurationOptionsResponse(
	struct soap *soap,
	tt__PTZConfigurationOptions *PTZConfigurationOptions)
{
	_tptz__GetConfigurationOptionsResponse *_p = ::soap_new__tptz__GetConfigurationOptionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptionsResponse::PTZConfigurationOptions = PTZConfigurationOptions;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptionsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationOptionsResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationOptionsResponse(struct soap*, _tptz__GetConfigurationOptionsResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationOptionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationOptionsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationOptionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationOptionsResponse(struct soap *soap, _tptz__GetConfigurationOptionsResponse *p)
{
	if (::soap_read__tptz__GetConfigurationOptionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationOptions(struct soap*, const char*, int, const _tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptions * SOAP_FMAC4 soap_in__tptz__GetConfigurationOptions(struct soap*, const char*, _tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationOptions * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationOptions * soap_new__tptz__GetConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationOptions * soap_new_req__tptz__GetConfigurationOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_tptz__GetConfigurationOptions *_p = ::soap_new__tptz__GetConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline _tptz__GetConfigurationOptions * soap_new_set__tptz__GetConfigurationOptions(
	struct soap *soap,
	const std::string& ConfigurationToken)
{
	_tptz__GetConfigurationOptions *_p = ::soap_new__tptz__GetConfigurationOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationOptions::ConfigurationToken = ConfigurationToken;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationOptions", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationOptions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationOptions * SOAP_FMAC4 soap_get__tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationOptions(struct soap *soap, const char *URL, _tptz__GetConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationOptions(struct soap *soap, _tptz__GetConfigurationOptions *p)
{
	if (::soap_read__tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetConfigurationResponse_DEFINED
#define SOAP_TYPE__tptz__SetConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetConfigurationResponse(struct soap*, const char*, int, const _tptz__SetConfigurationResponse *, const char*);
SOAP_FMAC3 _tptz__SetConfigurationResponse * SOAP_FMAC4 soap_in__tptz__SetConfigurationResponse(struct soap*, const char*, _tptz__SetConfigurationResponse *, const char*);
SOAP_FMAC1 _tptz__SetConfigurationResponse * SOAP_FMAC2 soap_instantiate__tptz__SetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetConfigurationResponse * soap_new__tptz__SetConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetConfigurationResponse * soap_new_req__tptz__SetConfigurationResponse(
	struct soap *soap)
{
	_tptz__SetConfigurationResponse *_p = ::soap_new__tptz__SetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__SetConfigurationResponse * soap_new_set__tptz__SetConfigurationResponse(
	struct soap *soap,
	struct __tptz__SetConfigurationResponse_sequence *__SetConfigurationResponse_sequence)
{
	_tptz__SetConfigurationResponse *_p = ::soap_new__tptz__SetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfigurationResponse::__SetConfigurationResponse_sequence = __SetConfigurationResponse_sequence;
	}
	return _p;
}

inline int soap_write__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__SetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetConfigurationResponse * SOAP_FMAC4 soap_get__tptz__SetConfigurationResponse(struct soap*, _tptz__SetConfigurationResponse *, const char*, const char*);

inline int soap_read__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetConfigurationResponse(struct soap *soap, const char *URL, _tptz__SetConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetConfigurationResponse(struct soap *soap, _tptz__SetConfigurationResponse *p)
{
	if (::soap_read__tptz__SetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__SetConfiguration_DEFINED
#define SOAP_TYPE__tptz__SetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__SetConfiguration(struct soap*, const char*, int, const _tptz__SetConfiguration *, const char*);
SOAP_FMAC3 _tptz__SetConfiguration * SOAP_FMAC4 soap_in__tptz__SetConfiguration(struct soap*, const char*, _tptz__SetConfiguration *, const char*);
SOAP_FMAC1 _tptz__SetConfiguration * SOAP_FMAC2 soap_instantiate__tptz__SetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__SetConfiguration * soap_new__tptz__SetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__SetConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tptz__SetConfiguration * soap_new_req__tptz__SetConfiguration(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration,
	bool ForcePersistence)
{
	_tptz__SetConfiguration *_p = ::soap_new__tptz__SetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfiguration::PTZConfiguration = PTZConfiguration;
		_p->_tptz__SetConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline _tptz__SetConfiguration * soap_new_set__tptz__SetConfiguration(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration,
	bool ForcePersistence)
{
	_tptz__SetConfiguration *_p = ::soap_new__tptz__SetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__SetConfiguration::PTZConfiguration = PTZConfiguration;
		_p->_tptz__SetConfiguration::ForcePersistence = ForcePersistence;
	}
	return _p;
}

inline int soap_write__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:SetConfiguration", p->soap_type() == SOAP_TYPE__tptz__SetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__SetConfiguration * SOAP_FMAC4 soap_get__tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *, const char*, const char*);

inline int soap_read__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__SetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__SetConfiguration(struct soap *soap, const char *URL, _tptz__SetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__SetConfiguration(struct soap *soap, _tptz__SetConfiguration *p)
{
	if (::soap_read__tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationResponse(struct soap*, const char*, int, const _tptz__GetConfigurationResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationResponse(struct soap*, const char*, _tptz__GetConfigurationResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationResponse * soap_new__tptz__GetConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationResponse * soap_new_req__tptz__GetConfigurationResponse(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration)
{
	_tptz__GetConfigurationResponse *_p = ::soap_new__tptz__GetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline _tptz__GetConfigurationResponse * soap_new_set__tptz__GetConfigurationResponse(
	struct soap *soap,
	tt__PTZConfiguration *PTZConfiguration)
{
	_tptz__GetConfigurationResponse *_p = ::soap_new__tptz__GetConfigurationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationResponse(struct soap*, _tptz__GetConfigurationResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationResponse(struct soap *soap, _tptz__GetConfigurationResponse *p)
{
	if (::soap_read__tptz__GetConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfiguration_DEFINED
#define SOAP_TYPE__tptz__GetConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfiguration(struct soap*, const char*, int, const _tptz__GetConfiguration *, const char*);
SOAP_FMAC3 _tptz__GetConfiguration * SOAP_FMAC4 soap_in__tptz__GetConfiguration(struct soap*, const char*, _tptz__GetConfiguration *, const char*);
SOAP_FMAC1 _tptz__GetConfiguration * SOAP_FMAC2 soap_instantiate__tptz__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfiguration * soap_new__tptz__GetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfiguration(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfiguration * soap_new_req__tptz__GetConfiguration(
	struct soap *soap,
	const std::string& PTZConfigurationToken)
{
	_tptz__GetConfiguration *_p = ::soap_new__tptz__GetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfiguration::PTZConfigurationToken = PTZConfigurationToken;
	}
	return _p;
}

inline _tptz__GetConfiguration * soap_new_set__tptz__GetConfiguration(
	struct soap *soap,
	const std::string& PTZConfigurationToken)
{
	_tptz__GetConfiguration *_p = ::soap_new__tptz__GetConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfiguration::PTZConfigurationToken = PTZConfigurationToken;
	}
	return _p;
}

inline int soap_write__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfiguration", p->soap_type() == SOAP_TYPE__tptz__GetConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfiguration * SOAP_FMAC4 soap_get__tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *, const char*, const char*);

inline int soap_read__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfiguration(struct soap *soap, const char *URL, _tptz__GetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfiguration(struct soap *soap, _tptz__GetConfiguration *p)
{
	if (::soap_read__tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationsResponse_DEFINED
#define SOAP_TYPE__tptz__GetConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurationsResponse(struct soap*, const char*, int, const _tptz__GetConfigurationsResponse *, const char*);
SOAP_FMAC3 _tptz__GetConfigurationsResponse * SOAP_FMAC4 soap_in__tptz__GetConfigurationsResponse(struct soap*, const char*, _tptz__GetConfigurationsResponse *, const char*);
SOAP_FMAC1 _tptz__GetConfigurationsResponse * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurationsResponse * soap_new__tptz__GetConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurationsResponse * soap_new_req__tptz__GetConfigurationsResponse(
	struct soap *soap)
{
	_tptz__GetConfigurationsResponse *_p = ::soap_new__tptz__GetConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetConfigurationsResponse * soap_new_set__tptz__GetConfigurationsResponse(
	struct soap *soap,
	const std::vector<tt__PTZConfiguration *> & PTZConfiguration)
{
	_tptz__GetConfigurationsResponse *_p = ::soap_new__tptz__GetConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetConfigurationsResponse::PTZConfiguration = PTZConfiguration;
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurationsResponse", p->soap_type() == SOAP_TYPE__tptz__GetConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurationsResponse * SOAP_FMAC4 soap_get__tptz__GetConfigurationsResponse(struct soap*, _tptz__GetConfigurationsResponse *, const char*, const char*);

inline int soap_read__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurationsResponse(struct soap *soap, const char *URL, _tptz__GetConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurationsResponse(struct soap *soap, _tptz__GetConfigurationsResponse *p)
{
	if (::soap_read__tptz__GetConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurations_DEFINED
#define SOAP_TYPE__tptz__GetConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetConfigurations(struct soap*, const char*, int, const _tptz__GetConfigurations *, const char*);
SOAP_FMAC3 _tptz__GetConfigurations * SOAP_FMAC4 soap_in__tptz__GetConfigurations(struct soap*, const char*, _tptz__GetConfigurations *, const char*);
SOAP_FMAC1 _tptz__GetConfigurations * SOAP_FMAC2 soap_instantiate__tptz__GetConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetConfigurations * soap_new__tptz__GetConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetConfigurations(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetConfigurations * soap_new_req__tptz__GetConfigurations(
	struct soap *soap)
{
	_tptz__GetConfigurations *_p = ::soap_new__tptz__GetConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetConfigurations * soap_new_set__tptz__GetConfigurations(
	struct soap *soap)
{
	_tptz__GetConfigurations *_p = ::soap_new__tptz__GetConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetConfigurations", p->soap_type() == SOAP_TYPE__tptz__GetConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetConfigurations * SOAP_FMAC4 soap_get__tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *, const char*, const char*);

inline int soap_read__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetConfigurations(struct soap *soap, const char *URL, _tptz__GetConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetConfigurations(struct soap *soap, _tptz__GetConfigurations *p)
{
	if (::soap_read__tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodeResponse_DEFINED
#define SOAP_TYPE__tptz__GetNodeResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodeResponse(struct soap*, const char*, int, const _tptz__GetNodeResponse *, const char*);
SOAP_FMAC3 _tptz__GetNodeResponse * SOAP_FMAC4 soap_in__tptz__GetNodeResponse(struct soap*, const char*, _tptz__GetNodeResponse *, const char*);
SOAP_FMAC1 _tptz__GetNodeResponse * SOAP_FMAC2 soap_instantiate__tptz__GetNodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodeResponse * soap_new__tptz__GetNodeResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodeResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodeResponse * soap_new_req__tptz__GetNodeResponse(
	struct soap *soap,
	tt__PTZNode *PTZNode)
{
	_tptz__GetNodeResponse *_p = ::soap_new__tptz__GetNodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodeResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline _tptz__GetNodeResponse * soap_new_set__tptz__GetNodeResponse(
	struct soap *soap,
	tt__PTZNode *PTZNode)
{
	_tptz__GetNodeResponse *_p = ::soap_new__tptz__GetNodeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodeResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline int soap_write__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodeResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodeResponse * SOAP_FMAC4 soap_get__tptz__GetNodeResponse(struct soap*, _tptz__GetNodeResponse *, const char*, const char*);

inline int soap_read__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNodeResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNodeResponse(struct soap *soap, const char *URL, _tptz__GetNodeResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNodeResponse(struct soap *soap, _tptz__GetNodeResponse *p)
{
	if (::soap_read__tptz__GetNodeResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNode_DEFINED
#define SOAP_TYPE__tptz__GetNode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNode(struct soap*, const char*, int, const _tptz__GetNode *, const char*);
SOAP_FMAC3 _tptz__GetNode * SOAP_FMAC4 soap_in__tptz__GetNode(struct soap*, const char*, _tptz__GetNode *, const char*);
SOAP_FMAC1 _tptz__GetNode * SOAP_FMAC2 soap_instantiate__tptz__GetNode(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNode * soap_new__tptz__GetNode(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNode(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNode * soap_new_req__tptz__GetNode(
	struct soap *soap,
	const std::string& NodeToken)
{
	_tptz__GetNode *_p = ::soap_new__tptz__GetNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNode::NodeToken = NodeToken;
	}
	return _p;
}

inline _tptz__GetNode * soap_new_set__tptz__GetNode(
	struct soap *soap,
	const std::string& NodeToken)
{
	_tptz__GetNode *_p = ::soap_new__tptz__GetNode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNode::NodeToken = NodeToken;
	}
	return _p;
}

inline int soap_write__tptz__GetNode(struct soap *soap, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNode", p->soap_type() == SOAP_TYPE__tptz__GetNode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNode * SOAP_FMAC4 soap_get__tptz__GetNode(struct soap*, _tptz__GetNode *, const char*, const char*);

inline int soap_read__tptz__GetNode(struct soap *soap, _tptz__GetNode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNode(struct soap *soap, const char *URL, _tptz__GetNode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNode(struct soap *soap, _tptz__GetNode *p)
{
	if (::soap_read__tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodesResponse_DEFINED
#define SOAP_TYPE__tptz__GetNodesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodesResponse(struct soap*, const char*, int, const _tptz__GetNodesResponse *, const char*);
SOAP_FMAC3 _tptz__GetNodesResponse * SOAP_FMAC4 soap_in__tptz__GetNodesResponse(struct soap*, const char*, _tptz__GetNodesResponse *, const char*);
SOAP_FMAC1 _tptz__GetNodesResponse * SOAP_FMAC2 soap_instantiate__tptz__GetNodesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodesResponse * soap_new__tptz__GetNodesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodesResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodesResponse * soap_new_req__tptz__GetNodesResponse(
	struct soap *soap)
{
	_tptz__GetNodesResponse *_p = ::soap_new__tptz__GetNodesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetNodesResponse * soap_new_set__tptz__GetNodesResponse(
	struct soap *soap,
	const std::vector<tt__PTZNode *> & PTZNode)
{
	_tptz__GetNodesResponse *_p = ::soap_new__tptz__GetNodesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetNodesResponse::PTZNode = PTZNode;
	}
	return _p;
}

inline int soap_write__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodesResponse", p->soap_type() == SOAP_TYPE__tptz__GetNodesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodesResponse * SOAP_FMAC4 soap_get__tptz__GetNodesResponse(struct soap*, _tptz__GetNodesResponse *, const char*, const char*);

inline int soap_read__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNodesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNodesResponse(struct soap *soap, const char *URL, _tptz__GetNodesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNodesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNodesResponse(struct soap *soap, _tptz__GetNodesResponse *p)
{
	if (::soap_read__tptz__GetNodesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetNodes_DEFINED
#define SOAP_TYPE__tptz__GetNodes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetNodes(struct soap*, const char*, int, const _tptz__GetNodes *, const char*);
SOAP_FMAC3 _tptz__GetNodes * SOAP_FMAC4 soap_in__tptz__GetNodes(struct soap*, const char*, _tptz__GetNodes *, const char*);
SOAP_FMAC1 _tptz__GetNodes * SOAP_FMAC2 soap_instantiate__tptz__GetNodes(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetNodes * soap_new__tptz__GetNodes(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetNodes(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetNodes * soap_new_req__tptz__GetNodes(
	struct soap *soap)
{
	_tptz__GetNodes *_p = ::soap_new__tptz__GetNodes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetNodes * soap_new_set__tptz__GetNodes(
	struct soap *soap)
{
	_tptz__GetNodes *_p = ::soap_new__tptz__GetNodes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetNodes(struct soap *soap, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetNodes", p->soap_type() == SOAP_TYPE__tptz__GetNodes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetNodes * SOAP_FMAC4 soap_get__tptz__GetNodes(struct soap*, _tptz__GetNodes *, const char*, const char*);

inline int soap_read__tptz__GetNodes(struct soap *soap, _tptz__GetNodes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetNodes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetNodes(struct soap *soap, const char *URL, _tptz__GetNodes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetNodes(struct soap *soap, _tptz__GetNodes *p)
{
	if (::soap_read__tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilitiesResponse_DEFINED
#define SOAP_TYPE__tptz__GetServiceCapabilitiesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _tptz__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__tptz__GetServiceCapabilitiesResponse(struct soap*, const char*, _tptz__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC1 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__tptz__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetServiceCapabilitiesResponse * soap_new__tptz__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetServiceCapabilitiesResponse * soap_new_req__tptz__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tptz__Capabilities *Capabilities)
{
	_tptz__GetServiceCapabilitiesResponse *_p = ::soap_new__tptz__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline _tptz__GetServiceCapabilitiesResponse * soap_new_set__tptz__GetServiceCapabilitiesResponse(
	struct soap *soap,
	tptz__Capabilities *Capabilities)
{
	_tptz__GetServiceCapabilitiesResponse *_p = ::soap_new__tptz__GetServiceCapabilitiesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_tptz__GetServiceCapabilitiesResponse::Capabilities = Capabilities;
	}
	return _p;
}

inline int soap_write__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilitiesResponse", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilitiesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__tptz__GetServiceCapabilitiesResponse(struct soap*, _tptz__GetServiceCapabilitiesResponse *, const char*, const char*);

inline int soap_read__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetServiceCapabilitiesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetServiceCapabilitiesResponse(struct soap *soap, const char *URL, _tptz__GetServiceCapabilitiesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetServiceCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetServiceCapabilitiesResponse(struct soap *soap, _tptz__GetServiceCapabilitiesResponse *p)
{
	if (::soap_read__tptz__GetServiceCapabilitiesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE__tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tptz__GetServiceCapabilities(struct soap*, const char*, int, const _tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilities * SOAP_FMAC4 soap_in__tptz__GetServiceCapabilities(struct soap*, const char*, _tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC1 _tptz__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__tptz__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _tptz__GetServiceCapabilities * soap_new__tptz__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__tptz__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline _tptz__GetServiceCapabilities * soap_new_req__tptz__GetServiceCapabilities(
	struct soap *soap)
{
	_tptz__GetServiceCapabilities *_p = ::soap_new__tptz__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _tptz__GetServiceCapabilities * soap_new_set__tptz__GetServiceCapabilities(
	struct soap *soap)
{
	_tptz__GetServiceCapabilities *_p = ::soap_new__tptz__GetServiceCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:GetServiceCapabilities", p->soap_type() == SOAP_TYPE__tptz__GetServiceCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _tptz__GetServiceCapabilities * SOAP_FMAC4 soap_get__tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_read__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__tptz__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__tptz__GetServiceCapabilities(struct soap *soap, const char *URL, _tptz__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__tptz__GetServiceCapabilities(struct soap *soap, _tptz__GetServiceCapabilities *p)
{
	if (::soap_read__tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_tptz__Capabilities_DEFINED
#define SOAP_TYPE_tptz__Capabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tptz__Capabilities(struct soap*, const char*, int, const tptz__Capabilities *, const char*);
SOAP_FMAC3 tptz__Capabilities * SOAP_FMAC4 soap_in_tptz__Capabilities(struct soap*, const char*, tptz__Capabilities *, const char*);
SOAP_FMAC1 tptz__Capabilities * SOAP_FMAC2 soap_instantiate_tptz__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tptz__Capabilities * soap_new_tptz__Capabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate_tptz__Capabilities(soap, n, NULL, NULL, NULL);
}

inline tptz__Capabilities * soap_new_req_tptz__Capabilities(
	struct soap *soap)
{
	tptz__Capabilities *_p = ::soap_new_tptz__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline tptz__Capabilities * soap_new_set_tptz__Capabilities(
	struct soap *soap,
	bool *EFlip,
	bool *Reverse,
	bool *GetCompatibleConfigurations,
	bool *MoveStatus,
	bool *StatusPosition)
{
	tptz__Capabilities *_p = ::soap_new_tptz__Capabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->tptz__Capabilities::EFlip = EFlip;
		_p->tptz__Capabilities::Reverse = Reverse;
		_p->tptz__Capabilities::GetCompatibleConfigurations = GetCompatibleConfigurations;
		_p->tptz__Capabilities::MoveStatus = MoveStatus;
		_p->tptz__Capabilities::StatusPosition = StatusPosition;
	}
	return _p;
}

inline int soap_write_tptz__Capabilities(struct soap *soap, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "tptz:Capabilities", p->soap_type() == SOAP_TYPE_tptz__Capabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 tptz__Capabilities * SOAP_FMAC4 soap_get_tptz__Capabilities(struct soap*, tptz__Capabilities *, const char*, const char*);

inline int soap_read_tptz__Capabilities(struct soap *soap, tptz__Capabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_tptz__Capabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_tptz__Capabilities(struct soap *soap, const char *URL, tptz__Capabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_tptz__Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_tptz__Capabilities(struct soap *soap, tptz__Capabilities *p)
{
	if (::soap_read_tptz__Capabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _xml__lang is a typedef synonym of std__string */

#ifndef SOAP_TYPE__xml__lang_DEFINED
#define SOAP_TYPE__xml__lang_DEFINED

#define soap_default__xml__lang soap_default_std__string


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap__xml__lang2s(soap, a) ((a).c_str())

#define soap_out__xml__lang soap_out_std__string


#define soap_s2_xml__lang(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__xml__lang soap_in_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_new__xml__lang soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xml__lang(struct soap*, const std::string *, const char*, const char*);

inline int soap_write__xml__lang(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xml__lang(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__xml__lang soap_get_std__string


#define soap_read__xml__lang soap_read_std__string


#define soap_GET__xml__lang soap_GET_std__string


#define soap_POST_recv__xml__lang soap_POST_recv_std__string

#endif

#ifndef SOAP_TYPE_xsd__token_DEFINED
#define SOAP_TYPE_xsd__token_DEFINED

inline void soap_default_xsd__token(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);

#define soap_xsd__token2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__token(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_new_xsd__token soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__token(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__token(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__token(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__token(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__token(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__token(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger_DEFINED

inline void soap_default_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);

#define soap_xsd__nonNegativeInteger2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__nonNegativeInteger(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "\\+?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_new_xsd__nonNegativeInteger soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__nonNegativeInteger(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__nonNegativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__nonNegativeInteger(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__nonNegativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__nonNegativeInteger(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__nonNegativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED

inline void soap_default_xsd__duration(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, const std::string *);

#define soap_xsd__duration2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__duration(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d*)?S)?)?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__duration soap_instantiate_std__string


#define soap_new_xsd__duration soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__duration(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType_DEFINED
#define SOAP_TYPE_xsd__anySimpleType_DEFINED

inline void soap_default_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anySimpleType(struct soap*, const std::string *);

#define soap_xsd__anySimpleType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anySimpleType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anySimpleType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anySimpleType soap_instantiate_std__string


#define soap_new_xsd__anySimpleType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anySimpleType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anySimpleType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anySimpleType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anySimpleType(soap, p, "xsd:anySimpleType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anySimpleType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anySimpleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anySimpleType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anySimpleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anySimpleType(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anySimpleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__NCName_DEFINED
#define SOAP_TYPE_xsd__NCName_DEFINED

inline void soap_default_xsd__NCName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, const std::string *);

#define soap_xsd__NCName2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__NCName(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__NCName soap_instantiate_std__string


#define soap_new_xsd__NCName soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__NCName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__NCName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__NCName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__NCName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__NCName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__NCName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__NCName(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__NCName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__hexBinary_DEFINED
#define SOAP_TYPE_xsd__hexBinary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__hexBinary2s(struct soap*, xsd__hexBinary);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *);
SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL);
}

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(
	struct soap *soap)
{
	xsd__hexBinary *_p = ::soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{
	xsd__hexBinary *_p = ::soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary::__ptr = __ptr;
		_p->xsd__hexBinary::__size = __size;
	}
	return _p;
}

inline int soap_write_xsd__hexBinary(struct soap *soap, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__hexBinary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__hexBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (::soap_read_xsd__hexBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED

inline void soap_default_xsd__QName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);

#define soap_xsd__QName2s(soap, a) soap_QName2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__QName(soap, s, a) soap_s2stdQName((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_xsd__QName(
	struct soap *soap)
{
	std::string *_p = ::soap_new_xsd__QName(soap);
	if (_p)
	{	::soap_default_xsd__QName(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_xsd__QName(
	struct soap *soap)
{
	std::string *_p = ::soap_new_xsd__QName(soap);
	if (_p)
	{	::soap_default_xsd__QName(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__QName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__QName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__QName(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__QName(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (::soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE___tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetCompatibleConfigurations(struct soap*, struct __tptz__GetCompatibleConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetCompatibleConfigurations(struct soap*, const struct __tptz__GetCompatibleConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetCompatibleConfigurations(struct soap*, const char*, int, const struct __tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC3 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_in___tptz__GetCompatibleConfigurations(struct soap*, const char*, struct __tptz__GetCompatibleConfigurations *, const char*);
SOAP_FMAC1 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC2 soap_instantiate___tptz__GetCompatibleConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetCompatibleConfigurations * soap_new___tptz__GetCompatibleConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetCompatibleConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetCompatibleConfigurations * soap_new_req___tptz__GetCompatibleConfigurations(
	struct soap *soap)
{
	struct __tptz__GetCompatibleConfigurations *_p = ::soap_new___tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetCompatibleConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetCompatibleConfigurations * soap_new_set___tptz__GetCompatibleConfigurations(
	struct soap *soap,
	_tptz__GetCompatibleConfigurations *tptz__GetCompatibleConfigurations)
{
	struct __tptz__GetCompatibleConfigurations *_p = ::soap_new___tptz__GetCompatibleConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetCompatibleConfigurations(soap, _p);
		_p->tptz__GetCompatibleConfigurations = tptz__GetCompatibleConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetCompatibleConfigurations(struct soap*, const struct __tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_write___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetCompatibleConfigurations(soap, p), 0) || ::soap_put___tptz__GetCompatibleConfigurations(soap, p, "-tptz:GetCompatibleConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetCompatibleConfigurations * SOAP_FMAC4 soap_get___tptz__GetCompatibleConfigurations(struct soap*, struct __tptz__GetCompatibleConfigurations *, const char*, const char*);

inline int soap_read___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations *p)
{
	if (p)
	{	::soap_default___tptz__GetCompatibleConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetCompatibleConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetCompatibleConfigurations(struct soap *soap, const char *URL, struct __tptz__GetCompatibleConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetCompatibleConfigurations(struct soap *soap, struct __tptz__GetCompatibleConfigurations *p)
{
	if (::soap_read___tptz__GetCompatibleConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE___tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RemovePresetTour(struct soap*, struct __tptz__RemovePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RemovePresetTour(struct soap*, const struct __tptz__RemovePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RemovePresetTour(struct soap*, const char*, int, const struct __tptz__RemovePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__RemovePresetTour * SOAP_FMAC4 soap_in___tptz__RemovePresetTour(struct soap*, const char*, struct __tptz__RemovePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__RemovePresetTour * SOAP_FMAC2 soap_instantiate___tptz__RemovePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RemovePresetTour * soap_new___tptz__RemovePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RemovePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RemovePresetTour * soap_new_req___tptz__RemovePresetTour(
	struct soap *soap)
{
	struct __tptz__RemovePresetTour *_p = ::soap_new___tptz__RemovePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__RemovePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__RemovePresetTour * soap_new_set___tptz__RemovePresetTour(
	struct soap *soap,
	_tptz__RemovePresetTour *tptz__RemovePresetTour)
{
	struct __tptz__RemovePresetTour *_p = ::soap_new___tptz__RemovePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__RemovePresetTour(soap, _p);
		_p->tptz__RemovePresetTour = tptz__RemovePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RemovePresetTour(struct soap*, const struct __tptz__RemovePresetTour *, const char*, const char*);

inline int soap_write___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePresetTour(soap, p), 0) || ::soap_put___tptz__RemovePresetTour(soap, p, "-tptz:RemovePresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RemovePresetTour * SOAP_FMAC4 soap_get___tptz__RemovePresetTour(struct soap*, struct __tptz__RemovePresetTour *, const char*, const char*);

inline int soap_read___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour *p)
{
	if (p)
	{	::soap_default___tptz__RemovePresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__RemovePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__RemovePresetTour(struct soap *soap, const char *URL, struct __tptz__RemovePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__RemovePresetTour(struct soap *soap, struct __tptz__RemovePresetTour *p)
{
	if (::soap_read___tptz__RemovePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE___tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__OperatePresetTour(struct soap*, struct __tptz__OperatePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__OperatePresetTour(struct soap*, const struct __tptz__OperatePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__OperatePresetTour(struct soap*, const char*, int, const struct __tptz__OperatePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__OperatePresetTour * SOAP_FMAC4 soap_in___tptz__OperatePresetTour(struct soap*, const char*, struct __tptz__OperatePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__OperatePresetTour * SOAP_FMAC2 soap_instantiate___tptz__OperatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__OperatePresetTour * soap_new___tptz__OperatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__OperatePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__OperatePresetTour * soap_new_req___tptz__OperatePresetTour(
	struct soap *soap)
{
	struct __tptz__OperatePresetTour *_p = ::soap_new___tptz__OperatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__OperatePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__OperatePresetTour * soap_new_set___tptz__OperatePresetTour(
	struct soap *soap,
	_tptz__OperatePresetTour *tptz__OperatePresetTour)
{
	struct __tptz__OperatePresetTour *_p = ::soap_new___tptz__OperatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__OperatePresetTour(soap, _p);
		_p->tptz__OperatePresetTour = tptz__OperatePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__OperatePresetTour(struct soap*, const struct __tptz__OperatePresetTour *, const char*, const char*);

inline int soap_write___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__OperatePresetTour(soap, p), 0) || ::soap_put___tptz__OperatePresetTour(soap, p, "-tptz:OperatePresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__OperatePresetTour * SOAP_FMAC4 soap_get___tptz__OperatePresetTour(struct soap*, struct __tptz__OperatePresetTour *, const char*, const char*);

inline int soap_read___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour *p)
{
	if (p)
	{	::soap_default___tptz__OperatePresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__OperatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__OperatePresetTour(struct soap *soap, const char *URL, struct __tptz__OperatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__OperatePresetTour(struct soap *soap, struct __tptz__OperatePresetTour *p)
{
	if (::soap_read___tptz__OperatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE___tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__ModifyPresetTour(struct soap*, struct __tptz__ModifyPresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__ModifyPresetTour(struct soap*, const struct __tptz__ModifyPresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__ModifyPresetTour(struct soap*, const char*, int, const struct __tptz__ModifyPresetTour *, const char*);
SOAP_FMAC3 struct __tptz__ModifyPresetTour * SOAP_FMAC4 soap_in___tptz__ModifyPresetTour(struct soap*, const char*, struct __tptz__ModifyPresetTour *, const char*);
SOAP_FMAC1 struct __tptz__ModifyPresetTour * SOAP_FMAC2 soap_instantiate___tptz__ModifyPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__ModifyPresetTour * soap_new___tptz__ModifyPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__ModifyPresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__ModifyPresetTour * soap_new_req___tptz__ModifyPresetTour(
	struct soap *soap)
{
	struct __tptz__ModifyPresetTour *_p = ::soap_new___tptz__ModifyPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__ModifyPresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__ModifyPresetTour * soap_new_set___tptz__ModifyPresetTour(
	struct soap *soap,
	_tptz__ModifyPresetTour *tptz__ModifyPresetTour)
{
	struct __tptz__ModifyPresetTour *_p = ::soap_new___tptz__ModifyPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__ModifyPresetTour(soap, _p);
		_p->tptz__ModifyPresetTour = tptz__ModifyPresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__ModifyPresetTour(struct soap*, const struct __tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_write___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ModifyPresetTour(soap, p), 0) || ::soap_put___tptz__ModifyPresetTour(soap, p, "-tptz:ModifyPresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__ModifyPresetTour * SOAP_FMAC4 soap_get___tptz__ModifyPresetTour(struct soap*, struct __tptz__ModifyPresetTour *, const char*, const char*);

inline int soap_read___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour *p)
{
	if (p)
	{	::soap_default___tptz__ModifyPresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__ModifyPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__ModifyPresetTour(struct soap *soap, const char *URL, struct __tptz__ModifyPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__ModifyPresetTour(struct soap *soap, struct __tptz__ModifyPresetTour *p)
{
	if (::soap_read___tptz__ModifyPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE___tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__CreatePresetTour(struct soap*, struct __tptz__CreatePresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__CreatePresetTour(struct soap*, const struct __tptz__CreatePresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__CreatePresetTour(struct soap*, const char*, int, const struct __tptz__CreatePresetTour *, const char*);
SOAP_FMAC3 struct __tptz__CreatePresetTour * SOAP_FMAC4 soap_in___tptz__CreatePresetTour(struct soap*, const char*, struct __tptz__CreatePresetTour *, const char*);
SOAP_FMAC1 struct __tptz__CreatePresetTour * SOAP_FMAC2 soap_instantiate___tptz__CreatePresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__CreatePresetTour * soap_new___tptz__CreatePresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__CreatePresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__CreatePresetTour * soap_new_req___tptz__CreatePresetTour(
	struct soap *soap)
{
	struct __tptz__CreatePresetTour *_p = ::soap_new___tptz__CreatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__CreatePresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__CreatePresetTour * soap_new_set___tptz__CreatePresetTour(
	struct soap *soap,
	_tptz__CreatePresetTour *tptz__CreatePresetTour)
{
	struct __tptz__CreatePresetTour *_p = ::soap_new___tptz__CreatePresetTour(soap);
	if (_p)
	{	::soap_default___tptz__CreatePresetTour(soap, _p);
		_p->tptz__CreatePresetTour = tptz__CreatePresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__CreatePresetTour(struct soap*, const struct __tptz__CreatePresetTour *, const char*, const char*);

inline int soap_write___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__CreatePresetTour(soap, p), 0) || ::soap_put___tptz__CreatePresetTour(soap, p, "-tptz:CreatePresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__CreatePresetTour * SOAP_FMAC4 soap_get___tptz__CreatePresetTour(struct soap*, struct __tptz__CreatePresetTour *, const char*, const char*);

inline int soap_read___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour *p)
{
	if (p)
	{	::soap_default___tptz__CreatePresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__CreatePresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__CreatePresetTour(struct soap *soap, const char *URL, struct __tptz__CreatePresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__CreatePresetTour(struct soap *soap, struct __tptz__CreatePresetTour *p)
{
	if (::soap_read___tptz__CreatePresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE___tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTourOptions(struct soap*, struct __tptz__GetPresetTourOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTourOptions(struct soap*, const struct __tptz__GetPresetTourOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTourOptions(struct soap*, const char*, int, const struct __tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTourOptions * SOAP_FMAC4 soap_in___tptz__GetPresetTourOptions(struct soap*, const char*, struct __tptz__GetPresetTourOptions *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTourOptions * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTourOptions * soap_new___tptz__GetPresetTourOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTourOptions(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTourOptions * soap_new_req___tptz__GetPresetTourOptions(
	struct soap *soap)
{
	struct __tptz__GetPresetTourOptions *_p = ::soap_new___tptz__GetPresetTourOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTourOptions(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTourOptions * soap_new_set___tptz__GetPresetTourOptions(
	struct soap *soap,
	_tptz__GetPresetTourOptions *tptz__GetPresetTourOptions)
{
	struct __tptz__GetPresetTourOptions *_p = ::soap_new___tptz__GetPresetTourOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTourOptions(soap, _p);
		_p->tptz__GetPresetTourOptions = tptz__GetPresetTourOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTourOptions(struct soap*, const struct __tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_write___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTourOptions(soap, p), 0) || ::soap_put___tptz__GetPresetTourOptions(soap, p, "-tptz:GetPresetTourOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTourOptions * SOAP_FMAC4 soap_get___tptz__GetPresetTourOptions(struct soap*, struct __tptz__GetPresetTourOptions *, const char*, const char*);

inline int soap_read___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions *p)
{
	if (p)
	{	::soap_default___tptz__GetPresetTourOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresetTourOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresetTourOptions(struct soap *soap, const char *URL, struct __tptz__GetPresetTourOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresetTourOptions(struct soap *soap, struct __tptz__GetPresetTourOptions *p)
{
	if (::soap_read___tptz__GetPresetTourOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTour_DEFINED
#define SOAP_TYPE___tptz__GetPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTour(struct soap*, struct __tptz__GetPresetTour *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTour(struct soap*, const struct __tptz__GetPresetTour *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTour(struct soap*, const char*, int, const struct __tptz__GetPresetTour *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTour * SOAP_FMAC4 soap_in___tptz__GetPresetTour(struct soap*, const char*, struct __tptz__GetPresetTour *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTour * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTour(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTour * soap_new___tptz__GetPresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTour(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTour * soap_new_req___tptz__GetPresetTour(
	struct soap *soap)
{
	struct __tptz__GetPresetTour *_p = ::soap_new___tptz__GetPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTour(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTour * soap_new_set___tptz__GetPresetTour(
	struct soap *soap,
	_tptz__GetPresetTour *tptz__GetPresetTour)
{
	struct __tptz__GetPresetTour *_p = ::soap_new___tptz__GetPresetTour(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTour(soap, _p);
		_p->tptz__GetPresetTour = tptz__GetPresetTour;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTour(struct soap*, const struct __tptz__GetPresetTour *, const char*, const char*);

inline int soap_write___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTour(soap, p), 0) || ::soap_put___tptz__GetPresetTour(soap, p, "-tptz:GetPresetTour", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTour * SOAP_FMAC4 soap_get___tptz__GetPresetTour(struct soap*, struct __tptz__GetPresetTour *, const char*, const char*);

inline int soap_read___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour *p)
{
	if (p)
	{	::soap_default___tptz__GetPresetTour(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresetTour(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresetTour(struct soap *soap, const char *URL, struct __tptz__GetPresetTour *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresetTour(struct soap *soap, struct __tptz__GetPresetTour *p)
{
	if (::soap_read___tptz__GetPresetTour(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTours_DEFINED
#define SOAP_TYPE___tptz__GetPresetTours_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresetTours(struct soap*, struct __tptz__GetPresetTours *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresetTours(struct soap*, const struct __tptz__GetPresetTours *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresetTours(struct soap*, const char*, int, const struct __tptz__GetPresetTours *, const char*);
SOAP_FMAC3 struct __tptz__GetPresetTours * SOAP_FMAC4 soap_in___tptz__GetPresetTours(struct soap*, const char*, struct __tptz__GetPresetTours *, const char*);
SOAP_FMAC1 struct __tptz__GetPresetTours * SOAP_FMAC2 soap_instantiate___tptz__GetPresetTours(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresetTours * soap_new___tptz__GetPresetTours(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresetTours(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresetTours * soap_new_req___tptz__GetPresetTours(
	struct soap *soap)
{
	struct __tptz__GetPresetTours *_p = ::soap_new___tptz__GetPresetTours(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTours(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresetTours * soap_new_set___tptz__GetPresetTours(
	struct soap *soap,
	_tptz__GetPresetTours *tptz__GetPresetTours)
{
	struct __tptz__GetPresetTours *_p = ::soap_new___tptz__GetPresetTours(soap);
	if (_p)
	{	::soap_default___tptz__GetPresetTours(soap, _p);
		_p->tptz__GetPresetTours = tptz__GetPresetTours;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresetTours(struct soap*, const struct __tptz__GetPresetTours *, const char*, const char*);

inline int soap_write___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresetTours(soap, p), 0) || ::soap_put___tptz__GetPresetTours(soap, p, "-tptz:GetPresetTours", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresetTours * SOAP_FMAC4 soap_get___tptz__GetPresetTours(struct soap*, struct __tptz__GetPresetTours *, const char*, const char*);

inline int soap_read___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours *p)
{
	if (p)
	{	::soap_default___tptz__GetPresetTours(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresetTours(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresetTours(struct soap *soap, const char *URL, struct __tptz__GetPresetTours *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresetTours(struct soap *soap, struct __tptz__GetPresetTours *p)
{
	if (::soap_read___tptz__GetPresetTours(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__Stop_DEFINED
#define SOAP_TYPE___tptz__Stop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__Stop(struct soap*, struct __tptz__Stop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__Stop(struct soap*, const struct __tptz__Stop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__Stop(struct soap*, const char*, int, const struct __tptz__Stop *, const char*);
SOAP_FMAC3 struct __tptz__Stop * SOAP_FMAC4 soap_in___tptz__Stop(struct soap*, const char*, struct __tptz__Stop *, const char*);
SOAP_FMAC1 struct __tptz__Stop * SOAP_FMAC2 soap_instantiate___tptz__Stop(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__Stop * soap_new___tptz__Stop(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__Stop(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__Stop * soap_new_req___tptz__Stop(
	struct soap *soap)
{
	struct __tptz__Stop *_p = ::soap_new___tptz__Stop(soap);
	if (_p)
	{	::soap_default___tptz__Stop(soap, _p);
	}
	return _p;
}

inline struct __tptz__Stop * soap_new_set___tptz__Stop(
	struct soap *soap,
	_tptz__Stop *tptz__Stop)
{
	struct __tptz__Stop *_p = ::soap_new___tptz__Stop(soap);
	if (_p)
	{	::soap_default___tptz__Stop(soap, _p);
		_p->tptz__Stop = tptz__Stop;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__Stop(struct soap*, const struct __tptz__Stop *, const char*, const char*);

inline int soap_write___tptz__Stop(struct soap *soap, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__Stop(soap, p), 0) || ::soap_put___tptz__Stop(soap, p, "-tptz:Stop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__Stop * SOAP_FMAC4 soap_get___tptz__Stop(struct soap*, struct __tptz__Stop *, const char*, const char*);

inline int soap_read___tptz__Stop(struct soap *soap, struct __tptz__Stop *p)
{
	if (p)
	{	::soap_default___tptz__Stop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__Stop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__Stop(struct soap *soap, const char *URL, struct __tptz__Stop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__Stop(struct soap *soap, struct __tptz__Stop *p)
{
	if (::soap_read___tptz__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GeoMove_DEFINED
#define SOAP_TYPE___tptz__GeoMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GeoMove(struct soap*, struct __tptz__GeoMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GeoMove(struct soap*, const struct __tptz__GeoMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GeoMove(struct soap*, const char*, int, const struct __tptz__GeoMove *, const char*);
SOAP_FMAC3 struct __tptz__GeoMove * SOAP_FMAC4 soap_in___tptz__GeoMove(struct soap*, const char*, struct __tptz__GeoMove *, const char*);
SOAP_FMAC1 struct __tptz__GeoMove * SOAP_FMAC2 soap_instantiate___tptz__GeoMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GeoMove * soap_new___tptz__GeoMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GeoMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GeoMove * soap_new_req___tptz__GeoMove(
	struct soap *soap)
{
	struct __tptz__GeoMove *_p = ::soap_new___tptz__GeoMove(soap);
	if (_p)
	{	::soap_default___tptz__GeoMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__GeoMove * soap_new_set___tptz__GeoMove(
	struct soap *soap,
	_tptz__GeoMove *tptz__GeoMove)
{
	struct __tptz__GeoMove *_p = ::soap_new___tptz__GeoMove(soap);
	if (_p)
	{	::soap_default___tptz__GeoMove(soap, _p);
		_p->tptz__GeoMove = tptz__GeoMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GeoMove(struct soap*, const struct __tptz__GeoMove *, const char*, const char*);

inline int soap_write___tptz__GeoMove(struct soap *soap, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GeoMove(soap, p), 0) || ::soap_put___tptz__GeoMove(soap, p, "-tptz:GeoMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GeoMove * SOAP_FMAC4 soap_get___tptz__GeoMove(struct soap*, struct __tptz__GeoMove *, const char*, const char*);

inline int soap_read___tptz__GeoMove(struct soap *soap, struct __tptz__GeoMove *p)
{
	if (p)
	{	::soap_default___tptz__GeoMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GeoMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GeoMove(struct soap *soap, const char *URL, struct __tptz__GeoMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GeoMove(struct soap *soap, struct __tptz__GeoMove *p)
{
	if (::soap_read___tptz__GeoMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE___tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__AbsoluteMove(struct soap*, struct __tptz__AbsoluteMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__AbsoluteMove(struct soap*, const struct __tptz__AbsoluteMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__AbsoluteMove(struct soap*, const char*, int, const struct __tptz__AbsoluteMove *, const char*);
SOAP_FMAC3 struct __tptz__AbsoluteMove * SOAP_FMAC4 soap_in___tptz__AbsoluteMove(struct soap*, const char*, struct __tptz__AbsoluteMove *, const char*);
SOAP_FMAC1 struct __tptz__AbsoluteMove * SOAP_FMAC2 soap_instantiate___tptz__AbsoluteMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__AbsoluteMove * soap_new___tptz__AbsoluteMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__AbsoluteMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__AbsoluteMove * soap_new_req___tptz__AbsoluteMove(
	struct soap *soap)
{
	struct __tptz__AbsoluteMove *_p = ::soap_new___tptz__AbsoluteMove(soap);
	if (_p)
	{	::soap_default___tptz__AbsoluteMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__AbsoluteMove * soap_new_set___tptz__AbsoluteMove(
	struct soap *soap,
	_tptz__AbsoluteMove *tptz__AbsoluteMove)
{
	struct __tptz__AbsoluteMove *_p = ::soap_new___tptz__AbsoluteMove(soap);
	if (_p)
	{	::soap_default___tptz__AbsoluteMove(soap, _p);
		_p->tptz__AbsoluteMove = tptz__AbsoluteMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__AbsoluteMove(struct soap*, const struct __tptz__AbsoluteMove *, const char*, const char*);

inline int soap_write___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__AbsoluteMove(soap, p), 0) || ::soap_put___tptz__AbsoluteMove(soap, p, "-tptz:AbsoluteMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__AbsoluteMove * SOAP_FMAC4 soap_get___tptz__AbsoluteMove(struct soap*, struct __tptz__AbsoluteMove *, const char*, const char*);

inline int soap_read___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove *p)
{
	if (p)
	{	::soap_default___tptz__AbsoluteMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__AbsoluteMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__AbsoluteMove(struct soap *soap, const char *URL, struct __tptz__AbsoluteMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__AbsoluteMove(struct soap *soap, struct __tptz__AbsoluteMove *p)
{
	if (::soap_read___tptz__AbsoluteMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE___tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SendAuxiliaryCommand(struct soap*, struct __tptz__SendAuxiliaryCommand *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SendAuxiliaryCommand(struct soap*, const struct __tptz__SendAuxiliaryCommand *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SendAuxiliaryCommand(struct soap*, const char*, int, const struct __tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC3 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_in___tptz__SendAuxiliaryCommand(struct soap*, const char*, struct __tptz__SendAuxiliaryCommand *, const char*);
SOAP_FMAC1 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC2 soap_instantiate___tptz__SendAuxiliaryCommand(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SendAuxiliaryCommand * soap_new___tptz__SendAuxiliaryCommand(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SendAuxiliaryCommand(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SendAuxiliaryCommand * soap_new_req___tptz__SendAuxiliaryCommand(
	struct soap *soap)
{
	struct __tptz__SendAuxiliaryCommand *_p = ::soap_new___tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	::soap_default___tptz__SendAuxiliaryCommand(soap, _p);
	}
	return _p;
}

inline struct __tptz__SendAuxiliaryCommand * soap_new_set___tptz__SendAuxiliaryCommand(
	struct soap *soap,
	_tptz__SendAuxiliaryCommand *tptz__SendAuxiliaryCommand)
{
	struct __tptz__SendAuxiliaryCommand *_p = ::soap_new___tptz__SendAuxiliaryCommand(soap);
	if (_p)
	{	::soap_default___tptz__SendAuxiliaryCommand(soap, _p);
		_p->tptz__SendAuxiliaryCommand = tptz__SendAuxiliaryCommand;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SendAuxiliaryCommand(struct soap*, const struct __tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_write___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SendAuxiliaryCommand(soap, p), 0) || ::soap_put___tptz__SendAuxiliaryCommand(soap, p, "-tptz:SendAuxiliaryCommand", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SendAuxiliaryCommand * SOAP_FMAC4 soap_get___tptz__SendAuxiliaryCommand(struct soap*, struct __tptz__SendAuxiliaryCommand *, const char*, const char*);

inline int soap_read___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand *p)
{
	if (p)
	{	::soap_default___tptz__SendAuxiliaryCommand(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SendAuxiliaryCommand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SendAuxiliaryCommand(struct soap *soap, const char *URL, struct __tptz__SendAuxiliaryCommand *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SendAuxiliaryCommand(struct soap *soap, struct __tptz__SendAuxiliaryCommand *p)
{
	if (::soap_read___tptz__SendAuxiliaryCommand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__RelativeMove_DEFINED
#define SOAP_TYPE___tptz__RelativeMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RelativeMove(struct soap*, struct __tptz__RelativeMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RelativeMove(struct soap*, const struct __tptz__RelativeMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RelativeMove(struct soap*, const char*, int, const struct __tptz__RelativeMove *, const char*);
SOAP_FMAC3 struct __tptz__RelativeMove * SOAP_FMAC4 soap_in___tptz__RelativeMove(struct soap*, const char*, struct __tptz__RelativeMove *, const char*);
SOAP_FMAC1 struct __tptz__RelativeMove * SOAP_FMAC2 soap_instantiate___tptz__RelativeMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RelativeMove * soap_new___tptz__RelativeMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RelativeMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RelativeMove * soap_new_req___tptz__RelativeMove(
	struct soap *soap)
{
	struct __tptz__RelativeMove *_p = ::soap_new___tptz__RelativeMove(soap);
	if (_p)
	{	::soap_default___tptz__RelativeMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__RelativeMove * soap_new_set___tptz__RelativeMove(
	struct soap *soap,
	_tptz__RelativeMove *tptz__RelativeMove)
{
	struct __tptz__RelativeMove *_p = ::soap_new___tptz__RelativeMove(soap);
	if (_p)
	{	::soap_default___tptz__RelativeMove(soap, _p);
		_p->tptz__RelativeMove = tptz__RelativeMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RelativeMove(struct soap*, const struct __tptz__RelativeMove *, const char*, const char*);

inline int soap_write___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RelativeMove(soap, p), 0) || ::soap_put___tptz__RelativeMove(soap, p, "-tptz:RelativeMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RelativeMove * SOAP_FMAC4 soap_get___tptz__RelativeMove(struct soap*, struct __tptz__RelativeMove *, const char*, const char*);

inline int soap_read___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove *p)
{
	if (p)
	{	::soap_default___tptz__RelativeMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__RelativeMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__RelativeMove(struct soap *soap, const char *URL, struct __tptz__RelativeMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__RelativeMove(struct soap *soap, struct __tptz__RelativeMove *p)
{
	if (::soap_read___tptz__RelativeMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__ContinuousMove_DEFINED
#define SOAP_TYPE___tptz__ContinuousMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__ContinuousMove(struct soap*, struct __tptz__ContinuousMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__ContinuousMove(struct soap*, const struct __tptz__ContinuousMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__ContinuousMove(struct soap*, const char*, int, const struct __tptz__ContinuousMove *, const char*);
SOAP_FMAC3 struct __tptz__ContinuousMove * SOAP_FMAC4 soap_in___tptz__ContinuousMove(struct soap*, const char*, struct __tptz__ContinuousMove *, const char*);
SOAP_FMAC1 struct __tptz__ContinuousMove * SOAP_FMAC2 soap_instantiate___tptz__ContinuousMove(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__ContinuousMove * soap_new___tptz__ContinuousMove(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__ContinuousMove(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__ContinuousMove * soap_new_req___tptz__ContinuousMove(
	struct soap *soap)
{
	struct __tptz__ContinuousMove *_p = ::soap_new___tptz__ContinuousMove(soap);
	if (_p)
	{	::soap_default___tptz__ContinuousMove(soap, _p);
	}
	return _p;
}

inline struct __tptz__ContinuousMove * soap_new_set___tptz__ContinuousMove(
	struct soap *soap,
	_tptz__ContinuousMove *tptz__ContinuousMove)
{
	struct __tptz__ContinuousMove *_p = ::soap_new___tptz__ContinuousMove(soap);
	if (_p)
	{	::soap_default___tptz__ContinuousMove(soap, _p);
		_p->tptz__ContinuousMove = tptz__ContinuousMove;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__ContinuousMove(struct soap*, const struct __tptz__ContinuousMove *, const char*, const char*);

inline int soap_write___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__ContinuousMove(soap, p), 0) || ::soap_put___tptz__ContinuousMove(soap, p, "-tptz:ContinuousMove", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__ContinuousMove * SOAP_FMAC4 soap_get___tptz__ContinuousMove(struct soap*, struct __tptz__ContinuousMove *, const char*, const char*);

inline int soap_read___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove *p)
{
	if (p)
	{	::soap_default___tptz__ContinuousMove(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__ContinuousMove(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__ContinuousMove(struct soap *soap, const char *URL, struct __tptz__ContinuousMove *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__ContinuousMove(struct soap *soap, struct __tptz__ContinuousMove *p)
{
	if (::soap_read___tptz__ContinuousMove(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetHomePosition_DEFINED
#define SOAP_TYPE___tptz__SetHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetHomePosition(struct soap*, struct __tptz__SetHomePosition *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetHomePosition(struct soap*, const struct __tptz__SetHomePosition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetHomePosition(struct soap*, const char*, int, const struct __tptz__SetHomePosition *, const char*);
SOAP_FMAC3 struct __tptz__SetHomePosition * SOAP_FMAC4 soap_in___tptz__SetHomePosition(struct soap*, const char*, struct __tptz__SetHomePosition *, const char*);
SOAP_FMAC1 struct __tptz__SetHomePosition * SOAP_FMAC2 soap_instantiate___tptz__SetHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetHomePosition * soap_new___tptz__SetHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetHomePosition(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetHomePosition * soap_new_req___tptz__SetHomePosition(
	struct soap *soap)
{
	struct __tptz__SetHomePosition *_p = ::soap_new___tptz__SetHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__SetHomePosition(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetHomePosition * soap_new_set___tptz__SetHomePosition(
	struct soap *soap,
	_tptz__SetHomePosition *tptz__SetHomePosition)
{
	struct __tptz__SetHomePosition *_p = ::soap_new___tptz__SetHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__SetHomePosition(soap, _p);
		_p->tptz__SetHomePosition = tptz__SetHomePosition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetHomePosition(struct soap*, const struct __tptz__SetHomePosition *, const char*, const char*);

inline int soap_write___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetHomePosition(soap, p), 0) || ::soap_put___tptz__SetHomePosition(soap, p, "-tptz:SetHomePosition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetHomePosition * SOAP_FMAC4 soap_get___tptz__SetHomePosition(struct soap*, struct __tptz__SetHomePosition *, const char*, const char*);

inline int soap_read___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition *p)
{
	if (p)
	{	::soap_default___tptz__SetHomePosition(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetHomePosition(struct soap *soap, const char *URL, struct __tptz__SetHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetHomePosition(struct soap *soap, struct __tptz__SetHomePosition *p)
{
	if (::soap_read___tptz__SetHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE___tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GotoHomePosition(struct soap*, struct __tptz__GotoHomePosition *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GotoHomePosition(struct soap*, const struct __tptz__GotoHomePosition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GotoHomePosition(struct soap*, const char*, int, const struct __tptz__GotoHomePosition *, const char*);
SOAP_FMAC3 struct __tptz__GotoHomePosition * SOAP_FMAC4 soap_in___tptz__GotoHomePosition(struct soap*, const char*, struct __tptz__GotoHomePosition *, const char*);
SOAP_FMAC1 struct __tptz__GotoHomePosition * SOAP_FMAC2 soap_instantiate___tptz__GotoHomePosition(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GotoHomePosition * soap_new___tptz__GotoHomePosition(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GotoHomePosition(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GotoHomePosition * soap_new_req___tptz__GotoHomePosition(
	struct soap *soap)
{
	struct __tptz__GotoHomePosition *_p = ::soap_new___tptz__GotoHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__GotoHomePosition(soap, _p);
	}
	return _p;
}

inline struct __tptz__GotoHomePosition * soap_new_set___tptz__GotoHomePosition(
	struct soap *soap,
	_tptz__GotoHomePosition *tptz__GotoHomePosition)
{
	struct __tptz__GotoHomePosition *_p = ::soap_new___tptz__GotoHomePosition(soap);
	if (_p)
	{	::soap_default___tptz__GotoHomePosition(soap, _p);
		_p->tptz__GotoHomePosition = tptz__GotoHomePosition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GotoHomePosition(struct soap*, const struct __tptz__GotoHomePosition *, const char*, const char*);

inline int soap_write___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoHomePosition(soap, p), 0) || ::soap_put___tptz__GotoHomePosition(soap, p, "-tptz:GotoHomePosition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GotoHomePosition * SOAP_FMAC4 soap_get___tptz__GotoHomePosition(struct soap*, struct __tptz__GotoHomePosition *, const char*, const char*);

inline int soap_read___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition *p)
{
	if (p)
	{	::soap_default___tptz__GotoHomePosition(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GotoHomePosition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GotoHomePosition(struct soap *soap, const char *URL, struct __tptz__GotoHomePosition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GotoHomePosition(struct soap *soap, struct __tptz__GotoHomePosition *p)
{
	if (::soap_read___tptz__GotoHomePosition(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE___tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfigurationOptions(struct soap*, struct __tptz__GetConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfigurationOptions(struct soap*, const struct __tptz__GetConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfigurationOptions(struct soap*, const char*, int, const struct __tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC3 struct __tptz__GetConfigurationOptions * SOAP_FMAC4 soap_in___tptz__GetConfigurationOptions(struct soap*, const char*, struct __tptz__GetConfigurationOptions *, const char*);
SOAP_FMAC1 struct __tptz__GetConfigurationOptions * SOAP_FMAC2 soap_instantiate___tptz__GetConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfigurationOptions * soap_new___tptz__GetConfigurationOptions(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfigurationOptions(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfigurationOptions * soap_new_req___tptz__GetConfigurationOptions(
	struct soap *soap)
{
	struct __tptz__GetConfigurationOptions *_p = ::soap_new___tptz__GetConfigurationOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurationOptions(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfigurationOptions * soap_new_set___tptz__GetConfigurationOptions(
	struct soap *soap,
	_tptz__GetConfigurationOptions *tptz__GetConfigurationOptions)
{
	struct __tptz__GetConfigurationOptions *_p = ::soap_new___tptz__GetConfigurationOptions(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurationOptions(soap, _p);
		_p->tptz__GetConfigurationOptions = tptz__GetConfigurationOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfigurationOptions(struct soap*, const struct __tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_write___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurationOptions(soap, p), 0) || ::soap_put___tptz__GetConfigurationOptions(soap, p, "-tptz:GetConfigurationOptions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfigurationOptions * SOAP_FMAC4 soap_get___tptz__GetConfigurationOptions(struct soap*, struct __tptz__GetConfigurationOptions *, const char*, const char*);

inline int soap_read___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions *p)
{
	if (p)
	{	::soap_default___tptz__GetConfigurationOptions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetConfigurationOptions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetConfigurationOptions(struct soap *soap, const char *URL, struct __tptz__GetConfigurationOptions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetConfigurationOptions(struct soap *soap, struct __tptz__GetConfigurationOptions *p)
{
	if (::soap_read___tptz__GetConfigurationOptions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetConfiguration_DEFINED
#define SOAP_TYPE___tptz__SetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetConfiguration(struct soap*, struct __tptz__SetConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetConfiguration(struct soap*, const struct __tptz__SetConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetConfiguration(struct soap*, const char*, int, const struct __tptz__SetConfiguration *, const char*);
SOAP_FMAC3 struct __tptz__SetConfiguration * SOAP_FMAC4 soap_in___tptz__SetConfiguration(struct soap*, const char*, struct __tptz__SetConfiguration *, const char*);
SOAP_FMAC1 struct __tptz__SetConfiguration * SOAP_FMAC2 soap_instantiate___tptz__SetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetConfiguration * soap_new___tptz__SetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetConfiguration * soap_new_req___tptz__SetConfiguration(
	struct soap *soap)
{
	struct __tptz__SetConfiguration *_p = ::soap_new___tptz__SetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__SetConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetConfiguration * soap_new_set___tptz__SetConfiguration(
	struct soap *soap,
	_tptz__SetConfiguration *tptz__SetConfiguration)
{
	struct __tptz__SetConfiguration *_p = ::soap_new___tptz__SetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__SetConfiguration(soap, _p);
		_p->tptz__SetConfiguration = tptz__SetConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetConfiguration(struct soap*, const struct __tptz__SetConfiguration *, const char*, const char*);

inline int soap_write___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfiguration(soap, p), 0) || ::soap_put___tptz__SetConfiguration(soap, p, "-tptz:SetConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetConfiguration * SOAP_FMAC4 soap_get___tptz__SetConfiguration(struct soap*, struct __tptz__SetConfiguration *, const char*, const char*);

inline int soap_read___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration *p)
{
	if (p)
	{	::soap_default___tptz__SetConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetConfiguration(struct soap *soap, const char *URL, struct __tptz__SetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetConfiguration(struct soap *soap, struct __tptz__SetConfiguration *p)
{
	if (::soap_read___tptz__SetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetNode_DEFINED
#define SOAP_TYPE___tptz__GetNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetNode(struct soap*, struct __tptz__GetNode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetNode(struct soap*, const struct __tptz__GetNode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetNode(struct soap*, const char*, int, const struct __tptz__GetNode *, const char*);
SOAP_FMAC3 struct __tptz__GetNode * SOAP_FMAC4 soap_in___tptz__GetNode(struct soap*, const char*, struct __tptz__GetNode *, const char*);
SOAP_FMAC1 struct __tptz__GetNode * SOAP_FMAC2 soap_instantiate___tptz__GetNode(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetNode * soap_new___tptz__GetNode(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetNode(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetNode * soap_new_req___tptz__GetNode(
	struct soap *soap)
{
	struct __tptz__GetNode *_p = ::soap_new___tptz__GetNode(soap);
	if (_p)
	{	::soap_default___tptz__GetNode(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetNode * soap_new_set___tptz__GetNode(
	struct soap *soap,
	_tptz__GetNode *tptz__GetNode)
{
	struct __tptz__GetNode *_p = ::soap_new___tptz__GetNode(soap);
	if (_p)
	{	::soap_default___tptz__GetNode(soap, _p);
		_p->tptz__GetNode = tptz__GetNode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetNode(struct soap*, const struct __tptz__GetNode *, const char*, const char*);

inline int soap_write___tptz__GetNode(struct soap *soap, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNode(soap, p), 0) || ::soap_put___tptz__GetNode(soap, p, "-tptz:GetNode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetNode * SOAP_FMAC4 soap_get___tptz__GetNode(struct soap*, struct __tptz__GetNode *, const char*, const char*);

inline int soap_read___tptz__GetNode(struct soap *soap, struct __tptz__GetNode *p)
{
	if (p)
	{	::soap_default___tptz__GetNode(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetNode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetNode(struct soap *soap, const char *URL, struct __tptz__GetNode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetNode(struct soap *soap, struct __tptz__GetNode *p)
{
	if (::soap_read___tptz__GetNode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetNodes_DEFINED
#define SOAP_TYPE___tptz__GetNodes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetNodes(struct soap*, struct __tptz__GetNodes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetNodes(struct soap*, const struct __tptz__GetNodes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetNodes(struct soap*, const char*, int, const struct __tptz__GetNodes *, const char*);
SOAP_FMAC3 struct __tptz__GetNodes * SOAP_FMAC4 soap_in___tptz__GetNodes(struct soap*, const char*, struct __tptz__GetNodes *, const char*);
SOAP_FMAC1 struct __tptz__GetNodes * SOAP_FMAC2 soap_instantiate___tptz__GetNodes(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetNodes * soap_new___tptz__GetNodes(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetNodes(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetNodes * soap_new_req___tptz__GetNodes(
	struct soap *soap)
{
	struct __tptz__GetNodes *_p = ::soap_new___tptz__GetNodes(soap);
	if (_p)
	{	::soap_default___tptz__GetNodes(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetNodes * soap_new_set___tptz__GetNodes(
	struct soap *soap,
	_tptz__GetNodes *tptz__GetNodes)
{
	struct __tptz__GetNodes *_p = ::soap_new___tptz__GetNodes(soap);
	if (_p)
	{	::soap_default___tptz__GetNodes(soap, _p);
		_p->tptz__GetNodes = tptz__GetNodes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetNodes(struct soap*, const struct __tptz__GetNodes *, const char*, const char*);

inline int soap_write___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetNodes(soap, p), 0) || ::soap_put___tptz__GetNodes(soap, p, "-tptz:GetNodes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetNodes * SOAP_FMAC4 soap_get___tptz__GetNodes(struct soap*, struct __tptz__GetNodes *, const char*, const char*);

inline int soap_read___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes *p)
{
	if (p)
	{	::soap_default___tptz__GetNodes(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetNodes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetNodes(struct soap *soap, const char *URL, struct __tptz__GetNodes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetNodes(struct soap *soap, struct __tptz__GetNodes *p)
{
	if (::soap_read___tptz__GetNodes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfiguration_DEFINED
#define SOAP_TYPE___tptz__GetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfiguration(struct soap*, struct __tptz__GetConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfiguration(struct soap*, const struct __tptz__GetConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfiguration(struct soap*, const char*, int, const struct __tptz__GetConfiguration *, const char*);
SOAP_FMAC3 struct __tptz__GetConfiguration * SOAP_FMAC4 soap_in___tptz__GetConfiguration(struct soap*, const char*, struct __tptz__GetConfiguration *, const char*);
SOAP_FMAC1 struct __tptz__GetConfiguration * SOAP_FMAC2 soap_instantiate___tptz__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfiguration * soap_new___tptz__GetConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfiguration * soap_new_req___tptz__GetConfiguration(
	struct soap *soap)
{
	struct __tptz__GetConfiguration *_p = ::soap_new___tptz__GetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__GetConfiguration(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfiguration * soap_new_set___tptz__GetConfiguration(
	struct soap *soap,
	_tptz__GetConfiguration *tptz__GetConfiguration)
{
	struct __tptz__GetConfiguration *_p = ::soap_new___tptz__GetConfiguration(soap);
	if (_p)
	{	::soap_default___tptz__GetConfiguration(soap, _p);
		_p->tptz__GetConfiguration = tptz__GetConfiguration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfiguration(struct soap*, const struct __tptz__GetConfiguration *, const char*, const char*);

inline int soap_write___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfiguration(soap, p), 0) || ::soap_put___tptz__GetConfiguration(soap, p, "-tptz:GetConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfiguration * SOAP_FMAC4 soap_get___tptz__GetConfiguration(struct soap*, struct __tptz__GetConfiguration *, const char*, const char*);

inline int soap_read___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration *p)
{
	if (p)
	{	::soap_default___tptz__GetConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetConfiguration(struct soap *soap, const char *URL, struct __tptz__GetConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetConfiguration(struct soap *soap, struct __tptz__GetConfiguration *p)
{
	if (::soap_read___tptz__GetConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetStatus_DEFINED
#define SOAP_TYPE___tptz__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetStatus(struct soap*, struct __tptz__GetStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetStatus(struct soap*, const struct __tptz__GetStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetStatus(struct soap*, const char*, int, const struct __tptz__GetStatus *, const char*);
SOAP_FMAC3 struct __tptz__GetStatus * SOAP_FMAC4 soap_in___tptz__GetStatus(struct soap*, const char*, struct __tptz__GetStatus *, const char*);
SOAP_FMAC1 struct __tptz__GetStatus * SOAP_FMAC2 soap_instantiate___tptz__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetStatus * soap_new___tptz__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetStatus(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetStatus * soap_new_req___tptz__GetStatus(
	struct soap *soap)
{
	struct __tptz__GetStatus *_p = ::soap_new___tptz__GetStatus(soap);
	if (_p)
	{	::soap_default___tptz__GetStatus(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetStatus * soap_new_set___tptz__GetStatus(
	struct soap *soap,
	_tptz__GetStatus *tptz__GetStatus)
{
	struct __tptz__GetStatus *_p = ::soap_new___tptz__GetStatus(soap);
	if (_p)
	{	::soap_default___tptz__GetStatus(soap, _p);
		_p->tptz__GetStatus = tptz__GetStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetStatus(struct soap*, const struct __tptz__GetStatus *, const char*, const char*);

inline int soap_write___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetStatus(soap, p), 0) || ::soap_put___tptz__GetStatus(soap, p, "-tptz:GetStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetStatus * SOAP_FMAC4 soap_get___tptz__GetStatus(struct soap*, struct __tptz__GetStatus *, const char*, const char*);

inline int soap_read___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus *p)
{
	if (p)
	{	::soap_default___tptz__GetStatus(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetStatus(struct soap *soap, const char *URL, struct __tptz__GetStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetStatus(struct soap *soap, struct __tptz__GetStatus *p)
{
	if (::soap_read___tptz__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GotoPreset_DEFINED
#define SOAP_TYPE___tptz__GotoPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GotoPreset(struct soap*, struct __tptz__GotoPreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GotoPreset(struct soap*, const struct __tptz__GotoPreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GotoPreset(struct soap*, const char*, int, const struct __tptz__GotoPreset *, const char*);
SOAP_FMAC3 struct __tptz__GotoPreset * SOAP_FMAC4 soap_in___tptz__GotoPreset(struct soap*, const char*, struct __tptz__GotoPreset *, const char*);
SOAP_FMAC1 struct __tptz__GotoPreset * SOAP_FMAC2 soap_instantiate___tptz__GotoPreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GotoPreset * soap_new___tptz__GotoPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GotoPreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GotoPreset * soap_new_req___tptz__GotoPreset(
	struct soap *soap)
{
	struct __tptz__GotoPreset *_p = ::soap_new___tptz__GotoPreset(soap);
	if (_p)
	{	::soap_default___tptz__GotoPreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__GotoPreset * soap_new_set___tptz__GotoPreset(
	struct soap *soap,
	_tptz__GotoPreset *tptz__GotoPreset)
{
	struct __tptz__GotoPreset *_p = ::soap_new___tptz__GotoPreset(soap);
	if (_p)
	{	::soap_default___tptz__GotoPreset(soap, _p);
		_p->tptz__GotoPreset = tptz__GotoPreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GotoPreset(struct soap*, const struct __tptz__GotoPreset *, const char*, const char*);

inline int soap_write___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GotoPreset(soap, p), 0) || ::soap_put___tptz__GotoPreset(soap, p, "-tptz:GotoPreset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GotoPreset * SOAP_FMAC4 soap_get___tptz__GotoPreset(struct soap*, struct __tptz__GotoPreset *, const char*, const char*);

inline int soap_read___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset *p)
{
	if (p)
	{	::soap_default___tptz__GotoPreset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GotoPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GotoPreset(struct soap *soap, const char *URL, struct __tptz__GotoPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GotoPreset(struct soap *soap, struct __tptz__GotoPreset *p)
{
	if (::soap_read___tptz__GotoPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__RemovePreset_DEFINED
#define SOAP_TYPE___tptz__RemovePreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__RemovePreset(struct soap*, struct __tptz__RemovePreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__RemovePreset(struct soap*, const struct __tptz__RemovePreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__RemovePreset(struct soap*, const char*, int, const struct __tptz__RemovePreset *, const char*);
SOAP_FMAC3 struct __tptz__RemovePreset * SOAP_FMAC4 soap_in___tptz__RemovePreset(struct soap*, const char*, struct __tptz__RemovePreset *, const char*);
SOAP_FMAC1 struct __tptz__RemovePreset * SOAP_FMAC2 soap_instantiate___tptz__RemovePreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__RemovePreset * soap_new___tptz__RemovePreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__RemovePreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__RemovePreset * soap_new_req___tptz__RemovePreset(
	struct soap *soap)
{
	struct __tptz__RemovePreset *_p = ::soap_new___tptz__RemovePreset(soap);
	if (_p)
	{	::soap_default___tptz__RemovePreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__RemovePreset * soap_new_set___tptz__RemovePreset(
	struct soap *soap,
	_tptz__RemovePreset *tptz__RemovePreset)
{
	struct __tptz__RemovePreset *_p = ::soap_new___tptz__RemovePreset(soap);
	if (_p)
	{	::soap_default___tptz__RemovePreset(soap, _p);
		_p->tptz__RemovePreset = tptz__RemovePreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__RemovePreset(struct soap*, const struct __tptz__RemovePreset *, const char*, const char*);

inline int soap_write___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__RemovePreset(soap, p), 0) || ::soap_put___tptz__RemovePreset(soap, p, "-tptz:RemovePreset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__RemovePreset * SOAP_FMAC4 soap_get___tptz__RemovePreset(struct soap*, struct __tptz__RemovePreset *, const char*, const char*);

inline int soap_read___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset *p)
{
	if (p)
	{	::soap_default___tptz__RemovePreset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__RemovePreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__RemovePreset(struct soap *soap, const char *URL, struct __tptz__RemovePreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__RemovePreset(struct soap *soap, struct __tptz__RemovePreset *p)
{
	if (::soap_read___tptz__RemovePreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetPreset_DEFINED
#define SOAP_TYPE___tptz__SetPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetPreset(struct soap*, struct __tptz__SetPreset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetPreset(struct soap*, const struct __tptz__SetPreset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetPreset(struct soap*, const char*, int, const struct __tptz__SetPreset *, const char*);
SOAP_FMAC3 struct __tptz__SetPreset * SOAP_FMAC4 soap_in___tptz__SetPreset(struct soap*, const char*, struct __tptz__SetPreset *, const char*);
SOAP_FMAC1 struct __tptz__SetPreset * SOAP_FMAC2 soap_instantiate___tptz__SetPreset(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetPreset * soap_new___tptz__SetPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetPreset(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetPreset * soap_new_req___tptz__SetPreset(
	struct soap *soap)
{
	struct __tptz__SetPreset *_p = ::soap_new___tptz__SetPreset(soap);
	if (_p)
	{	::soap_default___tptz__SetPreset(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetPreset * soap_new_set___tptz__SetPreset(
	struct soap *soap,
	_tptz__SetPreset *tptz__SetPreset)
{
	struct __tptz__SetPreset *_p = ::soap_new___tptz__SetPreset(soap);
	if (_p)
	{	::soap_default___tptz__SetPreset(soap, _p);
		_p->tptz__SetPreset = tptz__SetPreset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetPreset(struct soap*, const struct __tptz__SetPreset *, const char*, const char*);

inline int soap_write___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetPreset(soap, p), 0) || ::soap_put___tptz__SetPreset(soap, p, "-tptz:SetPreset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetPreset * SOAP_FMAC4 soap_get___tptz__SetPreset(struct soap*, struct __tptz__SetPreset *, const char*, const char*);

inline int soap_read___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset *p)
{
	if (p)
	{	::soap_default___tptz__SetPreset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetPreset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetPreset(struct soap *soap, const char *URL, struct __tptz__SetPreset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetPreset(struct soap *soap, struct __tptz__SetPreset *p)
{
	if (::soap_read___tptz__SetPreset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetPresets_DEFINED
#define SOAP_TYPE___tptz__GetPresets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetPresets(struct soap*, struct __tptz__GetPresets *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetPresets(struct soap*, const struct __tptz__GetPresets *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetPresets(struct soap*, const char*, int, const struct __tptz__GetPresets *, const char*);
SOAP_FMAC3 struct __tptz__GetPresets * SOAP_FMAC4 soap_in___tptz__GetPresets(struct soap*, const char*, struct __tptz__GetPresets *, const char*);
SOAP_FMAC1 struct __tptz__GetPresets * SOAP_FMAC2 soap_instantiate___tptz__GetPresets(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetPresets * soap_new___tptz__GetPresets(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetPresets(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetPresets * soap_new_req___tptz__GetPresets(
	struct soap *soap)
{
	struct __tptz__GetPresets *_p = ::soap_new___tptz__GetPresets(soap);
	if (_p)
	{	::soap_default___tptz__GetPresets(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetPresets * soap_new_set___tptz__GetPresets(
	struct soap *soap,
	_tptz__GetPresets *tptz__GetPresets)
{
	struct __tptz__GetPresets *_p = ::soap_new___tptz__GetPresets(soap);
	if (_p)
	{	::soap_default___tptz__GetPresets(soap, _p);
		_p->tptz__GetPresets = tptz__GetPresets;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetPresets(struct soap*, const struct __tptz__GetPresets *, const char*, const char*);

inline int soap_write___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetPresets(soap, p), 0) || ::soap_put___tptz__GetPresets(soap, p, "-tptz:GetPresets", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetPresets * SOAP_FMAC4 soap_get___tptz__GetPresets(struct soap*, struct __tptz__GetPresets *, const char*, const char*);

inline int soap_read___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets *p)
{
	if (p)
	{	::soap_default___tptz__GetPresets(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetPresets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetPresets(struct soap *soap, const char *URL, struct __tptz__GetPresets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetPresets(struct soap *soap, struct __tptz__GetPresets *p)
{
	if (::soap_read___tptz__GetPresets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurations_DEFINED
#define SOAP_TYPE___tptz__GetConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetConfigurations(struct soap*, struct __tptz__GetConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetConfigurations(struct soap*, const struct __tptz__GetConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetConfigurations(struct soap*, const char*, int, const struct __tptz__GetConfigurations *, const char*);
SOAP_FMAC3 struct __tptz__GetConfigurations * SOAP_FMAC4 soap_in___tptz__GetConfigurations(struct soap*, const char*, struct __tptz__GetConfigurations *, const char*);
SOAP_FMAC1 struct __tptz__GetConfigurations * SOAP_FMAC2 soap_instantiate___tptz__GetConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetConfigurations * soap_new___tptz__GetConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetConfigurations * soap_new_req___tptz__GetConfigurations(
	struct soap *soap)
{
	struct __tptz__GetConfigurations *_p = ::soap_new___tptz__GetConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetConfigurations * soap_new_set___tptz__GetConfigurations(
	struct soap *soap,
	_tptz__GetConfigurations *tptz__GetConfigurations)
{
	struct __tptz__GetConfigurations *_p = ::soap_new___tptz__GetConfigurations(soap);
	if (_p)
	{	::soap_default___tptz__GetConfigurations(soap, _p);
		_p->tptz__GetConfigurations = tptz__GetConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetConfigurations(struct soap*, const struct __tptz__GetConfigurations *, const char*, const char*);

inline int soap_write___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetConfigurations(soap, p), 0) || ::soap_put___tptz__GetConfigurations(soap, p, "-tptz:GetConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetConfigurations * SOAP_FMAC4 soap_get___tptz__GetConfigurations(struct soap*, struct __tptz__GetConfigurations *, const char*, const char*);

inline int soap_read___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations *p)
{
	if (p)
	{	::soap_default___tptz__GetConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetConfigurations(struct soap *soap, const char *URL, struct __tptz__GetConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetConfigurations(struct soap *soap, struct __tptz__GetConfigurations *p)
{
	if (::soap_read___tptz__GetConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE___tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__GetServiceCapabilities(struct soap*, struct __tptz__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__GetServiceCapabilities(struct soap*, const struct __tptz__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__GetServiceCapabilities(struct soap*, const char*, int, const struct __tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __tptz__GetServiceCapabilities * SOAP_FMAC4 soap_in___tptz__GetServiceCapabilities(struct soap*, const char*, struct __tptz__GetServiceCapabilities *, const char*);
SOAP_FMAC1 struct __tptz__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___tptz__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__GetServiceCapabilities * soap_new___tptz__GetServiceCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__GetServiceCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__GetServiceCapabilities * soap_new_req___tptz__GetServiceCapabilities(
	struct soap *soap)
{
	struct __tptz__GetServiceCapabilities *_p = ::soap_new___tptz__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___tptz__GetServiceCapabilities(soap, _p);
	}
	return _p;
}

inline struct __tptz__GetServiceCapabilities * soap_new_set___tptz__GetServiceCapabilities(
	struct soap *soap,
	_tptz__GetServiceCapabilities *tptz__GetServiceCapabilities)
{
	struct __tptz__GetServiceCapabilities *_p = ::soap_new___tptz__GetServiceCapabilities(soap);
	if (_p)
	{	::soap_default___tptz__GetServiceCapabilities(soap, _p);
		_p->tptz__GetServiceCapabilities = tptz__GetServiceCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__GetServiceCapabilities(struct soap*, const struct __tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_write___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__GetServiceCapabilities(soap, p), 0) || ::soap_put___tptz__GetServiceCapabilities(soap, p, "-tptz:GetServiceCapabilities", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__GetServiceCapabilities * SOAP_FMAC4 soap_get___tptz__GetServiceCapabilities(struct soap*, struct __tptz__GetServiceCapabilities *, const char*, const char*);

inline int soap_read___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities *p)
{
	if (p)
	{	::soap_default___tptz__GetServiceCapabilities(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__GetServiceCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__GetServiceCapabilities(struct soap *soap, const char *URL, struct __tptz__GetServiceCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__GetServiceCapabilities(struct soap *soap, struct __tptz__GetServiceCapabilities *p)
{
	if (::soap_read___tptz__GetServiceCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tptz__SetConfigurationResponse_sequence_DEFINED
#define SOAP_TYPE___tptz__SetConfigurationResponse_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tptz__SetConfigurationResponse_sequence(struct soap*, const struct __tptz__SetConfigurationResponse_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tptz__SetConfigurationResponse_sequence(struct soap*, const char*, int, const struct __tptz__SetConfigurationResponse_sequence *, const char*);
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence * SOAP_FMAC4 soap_in___tptz__SetConfigurationResponse_sequence(struct soap*, const char*, struct __tptz__SetConfigurationResponse_sequence *, const char*);
SOAP_FMAC1 struct __tptz__SetConfigurationResponse_sequence * SOAP_FMAC2 soap_instantiate___tptz__SetConfigurationResponse_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __tptz__SetConfigurationResponse_sequence * soap_new___tptz__SetConfigurationResponse_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___tptz__SetConfigurationResponse_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __tptz__SetConfigurationResponse_sequence * soap_new_req___tptz__SetConfigurationResponse_sequence(
	struct soap *soap)
{
	struct __tptz__SetConfigurationResponse_sequence *_p = ::soap_new___tptz__SetConfigurationResponse_sequence(soap);
	if (_p)
	{	::soap_default___tptz__SetConfigurationResponse_sequence(soap, _p);
	}
	return _p;
}

inline struct __tptz__SetConfigurationResponse_sequence * soap_new_set___tptz__SetConfigurationResponse_sequence(
	struct soap *soap)
{
	struct __tptz__SetConfigurationResponse_sequence *_p = ::soap_new___tptz__SetConfigurationResponse_sequence(soap);
	if (_p)
	{	::soap_default___tptz__SetConfigurationResponse_sequence(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tptz__SetConfigurationResponse_sequence(struct soap*, const struct __tptz__SetConfigurationResponse_sequence *, const char*, const char*);

inline int soap_write___tptz__SetConfigurationResponse_sequence(struct soap *soap, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tptz__SetConfigurationResponse_sequence(soap, p), 0) || ::soap_put___tptz__SetConfigurationResponse_sequence(soap, p, "-tptz:SetConfigurationResponse-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence * SOAP_FMAC4 soap_get___tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *, const char*, const char*);

inline int soap_read___tptz__SetConfigurationResponse_sequence(struct soap *soap, struct __tptz__SetConfigurationResponse_sequence *p)
{
	if (p)
	{	::soap_default___tptz__SetConfigurationResponse_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tptz__SetConfigurationResponse_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tptz__SetConfigurationResponse_sequence(struct soap *soap, const char *URL, struct __tptz__SetConfigurationResponse_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tptz__SetConfigurationResponse_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tptz__SetConfigurationResponse_sequence(struct soap *soap, struct __tptz__SetConfigurationResponse_sequence *p)
{
	if (::soap_read___tptz__SetConfigurationResponse_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Envelope_DEFINED
#define SOAP_TYPE_SOAP_ENV__Envelope_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Envelope(struct soap*, const char*, int, const struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_in_SOAP_ENV__Envelope(struct soap*, const char*, struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Envelope * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Envelope(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Envelope * soap_new_SOAP_ENV__Envelope(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Envelope(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Envelope * soap_new_req_SOAP_ENV__Envelope(
	struct soap *soap)
{
	struct SOAP_ENV__Envelope *_p = ::soap_new_SOAP_ENV__Envelope(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Envelope(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Envelope * soap_new_set_SOAP_ENV__Envelope(
	struct soap *soap,
	struct SOAP_ENV__Header *SOAP_ENV__Header,
	char *SOAP_ENV__Body)
{
	struct SOAP_ENV__Envelope *_p = ::soap_new_SOAP_ENV__Envelope(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Envelope(soap, _p);
		_p->SOAP_ENV__Header = SOAP_ENV__Header;
		_p->SOAP_ENV__Body = SOAP_ENV__Body;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *, const char*, const char*);

inline int soap_write_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Envelope(soap, p), 0) || ::soap_put_SOAP_ENV__Envelope(soap, p, "SOAP-ENV:Envelope", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_get_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *, const char*, const char*);

inline int soap_read_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Envelope(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Envelope(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Envelope(struct soap *soap, const char *URL, struct SOAP_ENV__Envelope *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Envelope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope *p)
{
	if (::soap_read_SOAP_ENV__Envelope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__Security_DEFINED
#define SOAP_TYPE__wsse__Security_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Security(struct soap*, struct _wsse__Security *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Security(struct soap*, const struct _wsse__Security *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Security(struct soap*, const char*, int, const struct _wsse__Security *, const char*);
SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_in__wsse__Security(struct soap*, const char*, struct _wsse__Security *, const char*);
SOAP_FMAC1 struct _wsse__Security * SOAP_FMAC2 soap_instantiate__wsse__Security(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Security * soap_new__wsse__Security(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Security(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Security * soap_new_req__wsse__Security(
	struct soap *soap)
{
	struct _wsse__Security *_p = ::soap_new__wsse__Security(soap);
	if (_p)
	{	::soap_default__wsse__Security(soap, _p);
	}
	return _p;
}

inline struct _wsse__Security * soap_new_set__wsse__Security(
	struct soap *soap,
	struct _wsu__Timestamp *wsu__Timestamp,
	struct _wsse__UsernameToken *UsernameToken,
	struct _wsse__BinarySecurityToken *BinarySecurityToken,
	struct xenc__EncryptedKeyType *xenc__EncryptedKey,
	struct _xenc__ReferenceList *xenc__ReferenceList,
	struct wsc__SecurityContextTokenType *wsc__SecurityContextToken,
	struct ds__SignatureType *ds__Signature,
	struct saml1__AssertionType *saml1__Assertion,
	struct saml2__AssertionType *saml2__Assertion,
	char *SOAP_ENV__actor,
	char *SOAP_ENV__role)
{
	struct _wsse__Security *_p = ::soap_new__wsse__Security(soap);
	if (_p)
	{	::soap_default__wsse__Security(soap, _p);
		_p->wsu__Timestamp = wsu__Timestamp;
		_p->UsernameToken = UsernameToken;
		_p->BinarySecurityToken = BinarySecurityToken;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
		_p->xenc__ReferenceList = xenc__ReferenceList;
		_p->wsc__SecurityContextToken = wsc__SecurityContextToken;
		_p->ds__Signature = ds__Signature;
		_p->saml1__Assertion = saml1__Assertion;
		_p->saml2__Assertion = saml2__Assertion;
		_p->SOAP_ENV__actor = SOAP_ENV__actor;
		_p->SOAP_ENV__role = SOAP_ENV__role;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Security(struct soap*, const struct _wsse__Security *, const char*, const char*);

inline int soap_write__wsse__Security(struct soap *soap, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_get__wsse__Security(struct soap*, struct _wsse__Security *, const char*, const char*);

inline int soap_read__wsse__Security(struct soap *soap, struct _wsse__Security *p)
{
	if (p)
	{	::soap_default__wsse__Security(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Security(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Security(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Security(struct soap *soap, struct _wsse__Security *p)
{
	if (::soap_read__wsse__Security(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _saml2__EncryptedAttribute is a typedef synonym of saml2__EncryptedElementType */

#ifndef SOAP_TYPE__saml2__EncryptedAttribute_DEFINED
#define SOAP_TYPE__saml2__EncryptedAttribute_DEFINED

#define soap_default__saml2__EncryptedAttribute soap_default_saml2__EncryptedElementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);

#define soap_serialize__saml2__EncryptedAttribute soap_serialize_saml2__EncryptedElementType


#define soap__saml2__EncryptedAttribute2s soap_saml2__EncryptedElementType2s


#define soap_out__saml2__EncryptedAttribute soap_out_saml2__EncryptedElementType


#define soap_s2_saml2__EncryptedAttribute soap_s2saml2__EncryptedElementType


#define soap_in__saml2__EncryptedAttribute soap_in_saml2__EncryptedElementType


#define soap_instantiate__saml2__EncryptedAttribute soap_instantiate_saml2__EncryptedElementType


#define soap_new__saml2__EncryptedAttribute soap_new_saml2__EncryptedElementType


#define soap_new_req__saml2__EncryptedAttribute soap_new_req_saml2__EncryptedElementType


#define soap_new_set__saml2__EncryptedAttribute soap_new_set_saml2__EncryptedElementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedAttribute(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write__saml2__EncryptedAttribute(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__EncryptedAttribute(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__EncryptedAttribute(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__EncryptedAttribute(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__EncryptedAttribute soap_get_saml2__EncryptedElementType


#define soap_read__saml2__EncryptedAttribute soap_read_saml2__EncryptedElementType


#define soap_GET__saml2__EncryptedAttribute soap_GET_saml2__EncryptedElementType


#define soap_POST_recv__saml2__EncryptedAttribute soap_POST_recv_saml2__EncryptedElementType

#endif
/* _saml2__Attribute is a typedef synonym of saml2__AttributeType */

#ifndef SOAP_TYPE__saml2__Attribute_DEFINED
#define SOAP_TYPE__saml2__Attribute_DEFINED

#define soap_default__saml2__Attribute soap_default_saml2__AttributeType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *);

#define soap_serialize__saml2__Attribute soap_serialize_saml2__AttributeType


#define soap__saml2__Attribute2s soap_saml2__AttributeType2s


#define soap_out__saml2__Attribute soap_out_saml2__AttributeType


#define soap_s2_saml2__Attribute soap_s2saml2__AttributeType


#define soap_in__saml2__Attribute soap_in_saml2__AttributeType


#define soap_instantiate__saml2__Attribute soap_instantiate_saml2__AttributeType


#define soap_new__saml2__Attribute soap_new_saml2__AttributeType


#define soap_new_req__saml2__Attribute soap_new_req_saml2__AttributeType


#define soap_new_set__saml2__Attribute soap_new_set_saml2__AttributeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Attribute(struct soap*, const struct saml2__AttributeType *, const char*, const char*);

inline int soap_write__saml2__Attribute(struct soap *soap, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Attribute(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Attribute(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Attribute(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Attribute soap_get_saml2__AttributeType


#define soap_read__saml2__Attribute soap_read_saml2__AttributeType


#define soap_GET__saml2__Attribute soap_GET_saml2__AttributeType


#define soap_POST_recv__saml2__Attribute soap_POST_recv_saml2__AttributeType

#endif
/* _saml2__AttributeStatement is a typedef synonym of saml2__AttributeStatementType */

#ifndef SOAP_TYPE__saml2__AttributeStatement_DEFINED
#define SOAP_TYPE__saml2__AttributeStatement_DEFINED

#define soap_default__saml2__AttributeStatement soap_default_saml2__AttributeStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *);

#define soap_serialize__saml2__AttributeStatement soap_serialize_saml2__AttributeStatementType


#define soap__saml2__AttributeStatement2s soap_saml2__AttributeStatementType2s


#define soap_out__saml2__AttributeStatement soap_out_saml2__AttributeStatementType


#define soap_s2_saml2__AttributeStatement soap_s2saml2__AttributeStatementType


#define soap_in__saml2__AttributeStatement soap_in_saml2__AttributeStatementType


#define soap_instantiate__saml2__AttributeStatement soap_instantiate_saml2__AttributeStatementType


#define soap_new__saml2__AttributeStatement soap_new_saml2__AttributeStatementType


#define soap_new_req__saml2__AttributeStatement soap_new_req_saml2__AttributeStatementType


#define soap_new_set__saml2__AttributeStatement soap_new_set_saml2__AttributeStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AttributeStatement(struct soap*, const struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_write__saml2__AttributeStatement(struct soap *soap, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AttributeStatement(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AttributeStatement(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AttributeStatement(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AttributeStatement soap_get_saml2__AttributeStatementType


#define soap_read__saml2__AttributeStatement soap_read_saml2__AttributeStatementType


#define soap_GET__saml2__AttributeStatement soap_GET_saml2__AttributeStatementType


#define soap_POST_recv__saml2__AttributeStatement soap_POST_recv_saml2__AttributeStatementType

#endif
/* _saml2__Evidence is a typedef synonym of saml2__EvidenceType */

#ifndef SOAP_TYPE__saml2__Evidence_DEFINED
#define SOAP_TYPE__saml2__Evidence_DEFINED

#define soap_default__saml2__Evidence soap_default_saml2__EvidenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *);

#define soap_serialize__saml2__Evidence soap_serialize_saml2__EvidenceType


#define soap__saml2__Evidence2s soap_saml2__EvidenceType2s


#define soap_out__saml2__Evidence soap_out_saml2__EvidenceType


#define soap_s2_saml2__Evidence soap_s2saml2__EvidenceType


#define soap_in__saml2__Evidence soap_in_saml2__EvidenceType


#define soap_instantiate__saml2__Evidence soap_instantiate_saml2__EvidenceType


#define soap_new__saml2__Evidence soap_new_saml2__EvidenceType


#define soap_new_req__saml2__Evidence soap_new_req_saml2__EvidenceType


#define soap_new_set__saml2__Evidence soap_new_set_saml2__EvidenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Evidence(struct soap*, const struct saml2__EvidenceType *, const char*, const char*);

inline int soap_write__saml2__Evidence(struct soap *soap, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Evidence(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Evidence(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Evidence(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Evidence soap_get_saml2__EvidenceType


#define soap_read__saml2__Evidence soap_read_saml2__EvidenceType


#define soap_GET__saml2__Evidence soap_GET_saml2__EvidenceType


#define soap_POST_recv__saml2__Evidence soap_POST_recv_saml2__EvidenceType

#endif
/* _saml2__Action is a typedef synonym of saml2__ActionType */

#ifndef SOAP_TYPE__saml2__Action_DEFINED
#define SOAP_TYPE__saml2__Action_DEFINED

#define soap_default__saml2__Action soap_default_saml2__ActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ActionType(struct soap*, const struct saml2__ActionType *);

#define soap_serialize__saml2__Action soap_serialize_saml2__ActionType


#define soap__saml2__Action2s soap_saml2__ActionType2s


#define soap_out__saml2__Action soap_out_saml2__ActionType


#define soap_s2_saml2__Action soap_s2saml2__ActionType


#define soap_in__saml2__Action soap_in_saml2__ActionType


#define soap_instantiate__saml2__Action soap_instantiate_saml2__ActionType


#define soap_new__saml2__Action soap_new_saml2__ActionType


#define soap_new_req__saml2__Action soap_new_req_saml2__ActionType


#define soap_new_set__saml2__Action soap_new_set_saml2__ActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Action(struct soap*, const struct saml2__ActionType *, const char*, const char*);

inline int soap_write__saml2__Action(struct soap *soap, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Action(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Action(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Action(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Action soap_get_saml2__ActionType


#define soap_read__saml2__Action soap_read_saml2__ActionType


#define soap_GET__saml2__Action soap_GET_saml2__ActionType


#define soap_POST_recv__saml2__Action soap_POST_recv_saml2__ActionType

#endif
/* _saml2__AuthzDecisionStatement is a typedef synonym of saml2__AuthzDecisionStatementType */

#ifndef SOAP_TYPE__saml2__AuthzDecisionStatement_DEFINED
#define SOAP_TYPE__saml2__AuthzDecisionStatement_DEFINED

#define soap_default__saml2__AuthzDecisionStatement soap_default_saml2__AuthzDecisionStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *);

#define soap_serialize__saml2__AuthzDecisionStatement soap_serialize_saml2__AuthzDecisionStatementType


#define soap__saml2__AuthzDecisionStatement2s soap_saml2__AuthzDecisionStatementType2s


#define soap_out__saml2__AuthzDecisionStatement soap_out_saml2__AuthzDecisionStatementType


#define soap_s2_saml2__AuthzDecisionStatement soap_s2saml2__AuthzDecisionStatementType


#define soap_in__saml2__AuthzDecisionStatement soap_in_saml2__AuthzDecisionStatementType


#define soap_instantiate__saml2__AuthzDecisionStatement soap_instantiate_saml2__AuthzDecisionStatementType


#define soap_new__saml2__AuthzDecisionStatement soap_new_saml2__AuthzDecisionStatementType


#define soap_new_req__saml2__AuthzDecisionStatement soap_new_req_saml2__AuthzDecisionStatementType


#define soap_new_set__saml2__AuthzDecisionStatement soap_new_set_saml2__AuthzDecisionStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthzDecisionStatement(struct soap*, const struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_write__saml2__AuthzDecisionStatement(struct soap *soap, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthzDecisionStatement(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthzDecisionStatement(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthzDecisionStatement(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthzDecisionStatement soap_get_saml2__AuthzDecisionStatementType


#define soap_read__saml2__AuthzDecisionStatement soap_read_saml2__AuthzDecisionStatementType


#define soap_GET__saml2__AuthzDecisionStatement soap_GET_saml2__AuthzDecisionStatementType


#define soap_POST_recv__saml2__AuthzDecisionStatement soap_POST_recv_saml2__AuthzDecisionStatementType

#endif
/* _saml2__AuthnContext is a typedef synonym of saml2__AuthnContextType */

#ifndef SOAP_TYPE__saml2__AuthnContext_DEFINED
#define SOAP_TYPE__saml2__AuthnContext_DEFINED

#define soap_default__saml2__AuthnContext soap_default_saml2__AuthnContextType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *);

#define soap_serialize__saml2__AuthnContext soap_serialize_saml2__AuthnContextType


#define soap__saml2__AuthnContext2s soap_saml2__AuthnContextType2s


#define soap_out__saml2__AuthnContext soap_out_saml2__AuthnContextType


#define soap_s2_saml2__AuthnContext soap_s2saml2__AuthnContextType


#define soap_in__saml2__AuthnContext soap_in_saml2__AuthnContextType


#define soap_instantiate__saml2__AuthnContext soap_instantiate_saml2__AuthnContextType


#define soap_new__saml2__AuthnContext soap_new_saml2__AuthnContextType


#define soap_new_req__saml2__AuthnContext soap_new_req_saml2__AuthnContextType


#define soap_new_set__saml2__AuthnContext soap_new_set_saml2__AuthnContextType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContext(struct soap*, const struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_write__saml2__AuthnContext(struct soap *soap, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnContext(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnContext(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnContext(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnContext soap_get_saml2__AuthnContextType


#define soap_read__saml2__AuthnContext soap_read_saml2__AuthnContextType


#define soap_GET__saml2__AuthnContext soap_GET_saml2__AuthnContextType


#define soap_POST_recv__saml2__AuthnContext soap_POST_recv_saml2__AuthnContextType

#endif
/* _saml2__SubjectLocality is a typedef synonym of saml2__SubjectLocalityType */

#ifndef SOAP_TYPE__saml2__SubjectLocality_DEFINED
#define SOAP_TYPE__saml2__SubjectLocality_DEFINED

#define soap_default__saml2__SubjectLocality soap_default_saml2__SubjectLocalityType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *);

#define soap_serialize__saml2__SubjectLocality soap_serialize_saml2__SubjectLocalityType


#define soap__saml2__SubjectLocality2s soap_saml2__SubjectLocalityType2s


#define soap_out__saml2__SubjectLocality soap_out_saml2__SubjectLocalityType


#define soap_s2_saml2__SubjectLocality soap_s2saml2__SubjectLocalityType


#define soap_in__saml2__SubjectLocality soap_in_saml2__SubjectLocalityType


#define soap_instantiate__saml2__SubjectLocality soap_instantiate_saml2__SubjectLocalityType


#define soap_new__saml2__SubjectLocality soap_new_saml2__SubjectLocalityType


#define soap_new_req__saml2__SubjectLocality soap_new_req_saml2__SubjectLocalityType


#define soap_new_set__saml2__SubjectLocality soap_new_set_saml2__SubjectLocalityType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectLocality(struct soap*, const struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_write__saml2__SubjectLocality(struct soap *soap, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__SubjectLocality(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__SubjectLocality(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__SubjectLocality(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__SubjectLocality soap_get_saml2__SubjectLocalityType


#define soap_read__saml2__SubjectLocality soap_read_saml2__SubjectLocalityType


#define soap_GET__saml2__SubjectLocality soap_GET_saml2__SubjectLocalityType


#define soap_POST_recv__saml2__SubjectLocality soap_POST_recv_saml2__SubjectLocalityType

#endif
/* _saml2__AuthnStatement is a typedef synonym of saml2__AuthnStatementType */

#ifndef SOAP_TYPE__saml2__AuthnStatement_DEFINED
#define SOAP_TYPE__saml2__AuthnStatement_DEFINED

#define soap_default__saml2__AuthnStatement soap_default_saml2__AuthnStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *);

#define soap_serialize__saml2__AuthnStatement soap_serialize_saml2__AuthnStatementType


#define soap__saml2__AuthnStatement2s soap_saml2__AuthnStatementType2s


#define soap_out__saml2__AuthnStatement soap_out_saml2__AuthnStatementType


#define soap_s2_saml2__AuthnStatement soap_s2saml2__AuthnStatementType


#define soap_in__saml2__AuthnStatement soap_in_saml2__AuthnStatementType


#define soap_instantiate__saml2__AuthnStatement soap_instantiate_saml2__AuthnStatementType


#define soap_new__saml2__AuthnStatement soap_new_saml2__AuthnStatementType


#define soap_new_req__saml2__AuthnStatement soap_new_req_saml2__AuthnStatementType


#define soap_new_set__saml2__AuthnStatement soap_new_set_saml2__AuthnStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnStatement(struct soap*, const struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_write__saml2__AuthnStatement(struct soap *soap, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnStatement(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnStatement(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnStatement(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnStatement soap_get_saml2__AuthnStatementType


#define soap_read__saml2__AuthnStatement soap_read_saml2__AuthnStatementType


#define soap_GET__saml2__AuthnStatement soap_GET_saml2__AuthnStatementType


#define soap_POST_recv__saml2__AuthnStatement soap_POST_recv_saml2__AuthnStatementType

#endif
/* _saml2__Statement is a typedef synonym of saml2__StatementAbstractType */

#ifndef SOAP_TYPE__saml2__Statement_DEFINED
#define SOAP_TYPE__saml2__Statement_DEFINED

#define soap_default__saml2__Statement soap_default_saml2__StatementAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *);

#define soap_serialize__saml2__Statement soap_serialize_saml2__StatementAbstractType


#define soap__saml2__Statement2s soap_saml2__StatementAbstractType2s


#define soap_out__saml2__Statement soap_out_saml2__StatementAbstractType


#define soap_s2_saml2__Statement soap_s2saml2__StatementAbstractType


#define soap_in__saml2__Statement soap_in_saml2__StatementAbstractType


#define soap_instantiate__saml2__Statement soap_instantiate_saml2__StatementAbstractType


#define soap_new__saml2__Statement soap_new_saml2__StatementAbstractType


#define soap_new_req__saml2__Statement soap_new_req_saml2__StatementAbstractType


#define soap_new_set__saml2__Statement soap_new_set_saml2__StatementAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Statement(struct soap*, const struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_write__saml2__Statement(struct soap *soap, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Statement(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Statement(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Statement(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Statement soap_get_saml2__StatementAbstractType


#define soap_read__saml2__Statement soap_read_saml2__StatementAbstractType


#define soap_GET__saml2__Statement soap_GET_saml2__StatementAbstractType


#define soap_POST_recv__saml2__Statement soap_POST_recv_saml2__StatementAbstractType

#endif
/* _saml2__EncryptedAssertion is a typedef synonym of saml2__EncryptedElementType */

#ifndef SOAP_TYPE__saml2__EncryptedAssertion_DEFINED
#define SOAP_TYPE__saml2__EncryptedAssertion_DEFINED

#define soap_default__saml2__EncryptedAssertion soap_default_saml2__EncryptedElementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);

#define soap_serialize__saml2__EncryptedAssertion soap_serialize_saml2__EncryptedElementType


#define soap__saml2__EncryptedAssertion2s soap_saml2__EncryptedElementType2s


#define soap_out__saml2__EncryptedAssertion soap_out_saml2__EncryptedElementType


#define soap_s2_saml2__EncryptedAssertion soap_s2saml2__EncryptedElementType


#define soap_in__saml2__EncryptedAssertion soap_in_saml2__EncryptedElementType


#define soap_instantiate__saml2__EncryptedAssertion soap_instantiate_saml2__EncryptedElementType


#define soap_new__saml2__EncryptedAssertion soap_new_saml2__EncryptedElementType


#define soap_new_req__saml2__EncryptedAssertion soap_new_req_saml2__EncryptedElementType


#define soap_new_set__saml2__EncryptedAssertion soap_new_set_saml2__EncryptedElementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedAssertion(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write__saml2__EncryptedAssertion(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__EncryptedAssertion(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__EncryptedAssertion(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__EncryptedAssertion(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__EncryptedAssertion soap_get_saml2__EncryptedElementType


#define soap_read__saml2__EncryptedAssertion soap_read_saml2__EncryptedElementType


#define soap_GET__saml2__EncryptedAssertion soap_GET_saml2__EncryptedElementType


#define soap_POST_recv__saml2__EncryptedAssertion soap_POST_recv_saml2__EncryptedElementType

#endif
/* _saml2__Advice is a typedef synonym of saml2__AdviceType */

#ifndef SOAP_TYPE__saml2__Advice_DEFINED
#define SOAP_TYPE__saml2__Advice_DEFINED

#define soap_default__saml2__Advice soap_default_saml2__AdviceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *);

#define soap_serialize__saml2__Advice soap_serialize_saml2__AdviceType


#define soap__saml2__Advice2s soap_saml2__AdviceType2s


#define soap_out__saml2__Advice soap_out_saml2__AdviceType


#define soap_s2_saml2__Advice soap_s2saml2__AdviceType


#define soap_in__saml2__Advice soap_in_saml2__AdviceType


#define soap_instantiate__saml2__Advice soap_instantiate_saml2__AdviceType


#define soap_new__saml2__Advice soap_new_saml2__AdviceType


#define soap_new_req__saml2__Advice soap_new_req_saml2__AdviceType


#define soap_new_set__saml2__Advice soap_new_set_saml2__AdviceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Advice(struct soap*, const struct saml2__AdviceType *, const char*, const char*);

inline int soap_write__saml2__Advice(struct soap *soap, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Advice(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Advice(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Advice(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Advice soap_get_saml2__AdviceType


#define soap_read__saml2__Advice soap_read_saml2__AdviceType


#define soap_GET__saml2__Advice soap_GET_saml2__AdviceType


#define soap_POST_recv__saml2__Advice soap_POST_recv_saml2__AdviceType

#endif
/* _saml2__ProxyRestriction is a typedef synonym of saml2__ProxyRestrictionType */

#ifndef SOAP_TYPE__saml2__ProxyRestriction_DEFINED
#define SOAP_TYPE__saml2__ProxyRestriction_DEFINED

#define soap_default__saml2__ProxyRestriction soap_default_saml2__ProxyRestrictionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *);

#define soap_serialize__saml2__ProxyRestriction soap_serialize_saml2__ProxyRestrictionType


#define soap__saml2__ProxyRestriction2s soap_saml2__ProxyRestrictionType2s


#define soap_out__saml2__ProxyRestriction soap_out_saml2__ProxyRestrictionType


#define soap_s2_saml2__ProxyRestriction soap_s2saml2__ProxyRestrictionType


#define soap_in__saml2__ProxyRestriction soap_in_saml2__ProxyRestrictionType


#define soap_instantiate__saml2__ProxyRestriction soap_instantiate_saml2__ProxyRestrictionType


#define soap_new__saml2__ProxyRestriction soap_new_saml2__ProxyRestrictionType


#define soap_new_req__saml2__ProxyRestriction soap_new_req_saml2__ProxyRestrictionType


#define soap_new_set__saml2__ProxyRestriction soap_new_set_saml2__ProxyRestrictionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__ProxyRestriction(struct soap*, const struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_write__saml2__ProxyRestriction(struct soap *soap, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__ProxyRestriction(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__ProxyRestriction(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__ProxyRestriction(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__ProxyRestriction soap_get_saml2__ProxyRestrictionType


#define soap_read__saml2__ProxyRestriction soap_read_saml2__ProxyRestrictionType


#define soap_GET__saml2__ProxyRestriction soap_GET_saml2__ProxyRestrictionType


#define soap_POST_recv__saml2__ProxyRestriction soap_POST_recv_saml2__ProxyRestrictionType

#endif
/* _saml2__OneTimeUse is a typedef synonym of saml2__OneTimeUseType */

#ifndef SOAP_TYPE__saml2__OneTimeUse_DEFINED
#define SOAP_TYPE__saml2__OneTimeUse_DEFINED

#define soap_default__saml2__OneTimeUse soap_default_saml2__OneTimeUseType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *);

#define soap_serialize__saml2__OneTimeUse soap_serialize_saml2__OneTimeUseType


#define soap__saml2__OneTimeUse2s soap_saml2__OneTimeUseType2s


#define soap_out__saml2__OneTimeUse soap_out_saml2__OneTimeUseType


#define soap_s2_saml2__OneTimeUse soap_s2saml2__OneTimeUseType


#define soap_in__saml2__OneTimeUse soap_in_saml2__OneTimeUseType


#define soap_instantiate__saml2__OneTimeUse soap_instantiate_saml2__OneTimeUseType


#define soap_new__saml2__OneTimeUse soap_new_saml2__OneTimeUseType


#define soap_new_req__saml2__OneTimeUse soap_new_req_saml2__OneTimeUseType


#define soap_new_set__saml2__OneTimeUse soap_new_set_saml2__OneTimeUseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__OneTimeUse(struct soap*, const struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_write__saml2__OneTimeUse(struct soap *soap, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__OneTimeUse(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__OneTimeUse(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__OneTimeUse(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__OneTimeUse soap_get_saml2__OneTimeUseType


#define soap_read__saml2__OneTimeUse soap_read_saml2__OneTimeUseType


#define soap_GET__saml2__OneTimeUse soap_GET_saml2__OneTimeUseType


#define soap_POST_recv__saml2__OneTimeUse soap_POST_recv_saml2__OneTimeUseType

#endif
/* _saml2__AudienceRestriction is a typedef synonym of saml2__AudienceRestrictionType */

#ifndef SOAP_TYPE__saml2__AudienceRestriction_DEFINED
#define SOAP_TYPE__saml2__AudienceRestriction_DEFINED

#define soap_default__saml2__AudienceRestriction soap_default_saml2__AudienceRestrictionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *);

#define soap_serialize__saml2__AudienceRestriction soap_serialize_saml2__AudienceRestrictionType


#define soap__saml2__AudienceRestriction2s soap_saml2__AudienceRestrictionType2s


#define soap_out__saml2__AudienceRestriction soap_out_saml2__AudienceRestrictionType


#define soap_s2_saml2__AudienceRestriction soap_s2saml2__AudienceRestrictionType


#define soap_in__saml2__AudienceRestriction soap_in_saml2__AudienceRestrictionType


#define soap_instantiate__saml2__AudienceRestriction soap_instantiate_saml2__AudienceRestrictionType


#define soap_new__saml2__AudienceRestriction soap_new_saml2__AudienceRestrictionType


#define soap_new_req__saml2__AudienceRestriction soap_new_req_saml2__AudienceRestrictionType


#define soap_new_set__saml2__AudienceRestriction soap_new_set_saml2__AudienceRestrictionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AudienceRestriction(struct soap*, const struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_write__saml2__AudienceRestriction(struct soap *soap, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AudienceRestriction(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AudienceRestriction(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AudienceRestriction(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AudienceRestriction soap_get_saml2__AudienceRestrictionType


#define soap_read__saml2__AudienceRestriction soap_read_saml2__AudienceRestrictionType


#define soap_GET__saml2__AudienceRestriction soap_GET_saml2__AudienceRestrictionType


#define soap_POST_recv__saml2__AudienceRestriction soap_POST_recv_saml2__AudienceRestrictionType

#endif
/* _saml2__Condition is a typedef synonym of saml2__ConditionAbstractType */

#ifndef SOAP_TYPE__saml2__Condition_DEFINED
#define SOAP_TYPE__saml2__Condition_DEFINED

#define soap_default__saml2__Condition soap_default_saml2__ConditionAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *);

#define soap_serialize__saml2__Condition soap_serialize_saml2__ConditionAbstractType


#define soap__saml2__Condition2s soap_saml2__ConditionAbstractType2s


#define soap_out__saml2__Condition soap_out_saml2__ConditionAbstractType


#define soap_s2_saml2__Condition soap_s2saml2__ConditionAbstractType


#define soap_in__saml2__Condition soap_in_saml2__ConditionAbstractType


#define soap_instantiate__saml2__Condition soap_instantiate_saml2__ConditionAbstractType


#define soap_new__saml2__Condition soap_new_saml2__ConditionAbstractType


#define soap_new_req__saml2__Condition soap_new_req_saml2__ConditionAbstractType


#define soap_new_set__saml2__Condition soap_new_set_saml2__ConditionAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Condition(struct soap*, const struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_write__saml2__Condition(struct soap *soap, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Condition(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Condition(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Condition(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Condition soap_get_saml2__ConditionAbstractType


#define soap_read__saml2__Condition soap_read_saml2__ConditionAbstractType


#define soap_GET__saml2__Condition soap_GET_saml2__ConditionAbstractType


#define soap_POST_recv__saml2__Condition soap_POST_recv_saml2__ConditionAbstractType

#endif
/* _saml2__Conditions is a typedef synonym of saml2__ConditionsType */

#ifndef SOAP_TYPE__saml2__Conditions_DEFINED
#define SOAP_TYPE__saml2__Conditions_DEFINED

#define soap_default__saml2__Conditions soap_default_saml2__ConditionsType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *);

#define soap_serialize__saml2__Conditions soap_serialize_saml2__ConditionsType


#define soap__saml2__Conditions2s soap_saml2__ConditionsType2s


#define soap_out__saml2__Conditions soap_out_saml2__ConditionsType


#define soap_s2_saml2__Conditions soap_s2saml2__ConditionsType


#define soap_in__saml2__Conditions soap_in_saml2__ConditionsType


#define soap_instantiate__saml2__Conditions soap_instantiate_saml2__ConditionsType


#define soap_new__saml2__Conditions soap_new_saml2__ConditionsType


#define soap_new_req__saml2__Conditions soap_new_req_saml2__ConditionsType


#define soap_new_set__saml2__Conditions soap_new_set_saml2__ConditionsType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Conditions(struct soap*, const struct saml2__ConditionsType *, const char*, const char*);

inline int soap_write__saml2__Conditions(struct soap *soap, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Conditions(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Conditions(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Conditions(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Conditions soap_get_saml2__ConditionsType


#define soap_read__saml2__Conditions soap_read_saml2__ConditionsType


#define soap_GET__saml2__Conditions soap_GET_saml2__ConditionsType


#define soap_POST_recv__saml2__Conditions soap_POST_recv_saml2__ConditionsType

#endif
/* _saml2__SubjectConfirmationData is a typedef synonym of saml2__SubjectConfirmationDataType */

#ifndef SOAP_TYPE__saml2__SubjectConfirmationData_DEFINED
#define SOAP_TYPE__saml2__SubjectConfirmationData_DEFINED

#define soap_default__saml2__SubjectConfirmationData soap_default_saml2__SubjectConfirmationDataType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *);

#define soap_serialize__saml2__SubjectConfirmationData soap_serialize_saml2__SubjectConfirmationDataType


#define soap__saml2__SubjectConfirmationData2s soap_saml2__SubjectConfirmationDataType2s


#define soap_out__saml2__SubjectConfirmationData soap_out_saml2__SubjectConfirmationDataType


#define soap_s2_saml2__SubjectConfirmationData soap_s2saml2__SubjectConfirmationDataType


#define soap_in__saml2__SubjectConfirmationData soap_in_saml2__SubjectConfirmationDataType


#define soap_instantiate__saml2__SubjectConfirmationData soap_instantiate_saml2__SubjectConfirmationDataType


#define soap_new__saml2__SubjectConfirmationData soap_new_saml2__SubjectConfirmationDataType


#define soap_new_req__saml2__SubjectConfirmationData soap_new_req_saml2__SubjectConfirmationDataType


#define soap_new_set__saml2__SubjectConfirmationData soap_new_set_saml2__SubjectConfirmationDataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectConfirmationData(struct soap*, const struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_write__saml2__SubjectConfirmationData(struct soap *soap, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__SubjectConfirmationData(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__SubjectConfirmationData(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__SubjectConfirmationData(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__SubjectConfirmationData soap_get_saml2__SubjectConfirmationDataType


#define soap_read__saml2__SubjectConfirmationData soap_read_saml2__SubjectConfirmationDataType


#define soap_GET__saml2__SubjectConfirmationData soap_GET_saml2__SubjectConfirmationDataType


#define soap_POST_recv__saml2__SubjectConfirmationData soap_POST_recv_saml2__SubjectConfirmationDataType

#endif
/* _saml2__SubjectConfirmation is a typedef synonym of saml2__SubjectConfirmationType */

#ifndef SOAP_TYPE__saml2__SubjectConfirmation_DEFINED
#define SOAP_TYPE__saml2__SubjectConfirmation_DEFINED

#define soap_default__saml2__SubjectConfirmation soap_default_saml2__SubjectConfirmationType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *);

#define soap_serialize__saml2__SubjectConfirmation soap_serialize_saml2__SubjectConfirmationType


#define soap__saml2__SubjectConfirmation2s soap_saml2__SubjectConfirmationType2s


#define soap_out__saml2__SubjectConfirmation soap_out_saml2__SubjectConfirmationType


#define soap_s2_saml2__SubjectConfirmation soap_s2saml2__SubjectConfirmationType


#define soap_in__saml2__SubjectConfirmation soap_in_saml2__SubjectConfirmationType


#define soap_instantiate__saml2__SubjectConfirmation soap_instantiate_saml2__SubjectConfirmationType


#define soap_new__saml2__SubjectConfirmation soap_new_saml2__SubjectConfirmationType


#define soap_new_req__saml2__SubjectConfirmation soap_new_req_saml2__SubjectConfirmationType


#define soap_new_set__saml2__SubjectConfirmation soap_new_set_saml2__SubjectConfirmationType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectConfirmation(struct soap*, const struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_write__saml2__SubjectConfirmation(struct soap *soap, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__SubjectConfirmation(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__SubjectConfirmation(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__SubjectConfirmation(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__SubjectConfirmation soap_get_saml2__SubjectConfirmationType


#define soap_read__saml2__SubjectConfirmation soap_read_saml2__SubjectConfirmationType


#define soap_GET__saml2__SubjectConfirmation soap_GET_saml2__SubjectConfirmationType


#define soap_POST_recv__saml2__SubjectConfirmation soap_POST_recv_saml2__SubjectConfirmationType

#endif
/* _saml2__Subject is a typedef synonym of saml2__SubjectType */

#ifndef SOAP_TYPE__saml2__Subject_DEFINED
#define SOAP_TYPE__saml2__Subject_DEFINED

#define soap_default__saml2__Subject soap_default_saml2__SubjectType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *);

#define soap_serialize__saml2__Subject soap_serialize_saml2__SubjectType


#define soap__saml2__Subject2s soap_saml2__SubjectType2s


#define soap_out__saml2__Subject soap_out_saml2__SubjectType


#define soap_s2_saml2__Subject soap_s2saml2__SubjectType


#define soap_in__saml2__Subject soap_in_saml2__SubjectType


#define soap_instantiate__saml2__Subject soap_instantiate_saml2__SubjectType


#define soap_new__saml2__Subject soap_new_saml2__SubjectType


#define soap_new_req__saml2__Subject soap_new_req_saml2__SubjectType


#define soap_new_set__saml2__Subject soap_new_set_saml2__SubjectType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Subject(struct soap*, const struct saml2__SubjectType *, const char*, const char*);

inline int soap_write__saml2__Subject(struct soap *soap, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Subject(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Subject(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Subject(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Subject soap_get_saml2__SubjectType


#define soap_read__saml2__Subject soap_read_saml2__SubjectType


#define soap_GET__saml2__Subject soap_GET_saml2__SubjectType


#define soap_POST_recv__saml2__Subject soap_POST_recv_saml2__SubjectType

#endif
/* _saml2__Assertion is a typedef synonym of saml2__AssertionType */

#ifndef SOAP_TYPE__saml2__Assertion_DEFINED
#define SOAP_TYPE__saml2__Assertion_DEFINED

#define soap_default__saml2__Assertion soap_default_saml2__AssertionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *);

#define soap_serialize__saml2__Assertion soap_serialize_saml2__AssertionType


#define soap__saml2__Assertion2s soap_saml2__AssertionType2s


#define soap_out__saml2__Assertion soap_out_saml2__AssertionType


#define soap_s2_saml2__Assertion soap_s2saml2__AssertionType


#define soap_in__saml2__Assertion soap_in_saml2__AssertionType


#define soap_instantiate__saml2__Assertion soap_instantiate_saml2__AssertionType


#define soap_new__saml2__Assertion soap_new_saml2__AssertionType


#define soap_new_req__saml2__Assertion soap_new_req_saml2__AssertionType


#define soap_new_set__saml2__Assertion soap_new_set_saml2__AssertionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Assertion(struct soap*, const struct saml2__AssertionType *, const char*, const char*);

inline int soap_write__saml2__Assertion(struct soap *soap, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Assertion(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Assertion(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Assertion(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Assertion soap_get_saml2__AssertionType


#define soap_read__saml2__Assertion soap_read_saml2__AssertionType


#define soap_GET__saml2__Assertion soap_GET_saml2__AssertionType


#define soap_POST_recv__saml2__Assertion soap_POST_recv_saml2__AssertionType

#endif
/* _saml2__Issuer is a typedef synonym of saml2__NameIDType */

#ifndef SOAP_TYPE__saml2__Issuer_DEFINED
#define SOAP_TYPE__saml2__Issuer_DEFINED

#define soap_default__saml2__Issuer soap_default_saml2__NameIDType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *);

#define soap_serialize__saml2__Issuer soap_serialize_saml2__NameIDType


#define soap__saml2__Issuer2s soap_saml2__NameIDType2s


#define soap_out__saml2__Issuer soap_out_saml2__NameIDType


#define soap_s2_saml2__Issuer soap_s2saml2__NameIDType


#define soap_in__saml2__Issuer soap_in_saml2__NameIDType


#define soap_instantiate__saml2__Issuer soap_instantiate_saml2__NameIDType


#define soap_new__saml2__Issuer soap_new_saml2__NameIDType


#define soap_new_req__saml2__Issuer soap_new_req_saml2__NameIDType


#define soap_new_set__saml2__Issuer soap_new_set_saml2__NameIDType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Issuer(struct soap*, const struct saml2__NameIDType *, const char*, const char*);

inline int soap_write__saml2__Issuer(struct soap *soap, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Issuer(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Issuer(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Issuer(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Issuer soap_get_saml2__NameIDType


#define soap_read__saml2__Issuer soap_read_saml2__NameIDType


#define soap_GET__saml2__Issuer soap_GET_saml2__NameIDType


#define soap_POST_recv__saml2__Issuer soap_POST_recv_saml2__NameIDType

#endif
/* _saml2__EncryptedID is a typedef synonym of saml2__EncryptedElementType */

#ifndef SOAP_TYPE__saml2__EncryptedID_DEFINED
#define SOAP_TYPE__saml2__EncryptedID_DEFINED

#define soap_default__saml2__EncryptedID soap_default_saml2__EncryptedElementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);

#define soap_serialize__saml2__EncryptedID soap_serialize_saml2__EncryptedElementType


#define soap__saml2__EncryptedID2s soap_saml2__EncryptedElementType2s


#define soap_out__saml2__EncryptedID soap_out_saml2__EncryptedElementType


#define soap_s2_saml2__EncryptedID soap_s2saml2__EncryptedElementType


#define soap_in__saml2__EncryptedID soap_in_saml2__EncryptedElementType


#define soap_instantiate__saml2__EncryptedID soap_instantiate_saml2__EncryptedElementType


#define soap_new__saml2__EncryptedID soap_new_saml2__EncryptedElementType


#define soap_new_req__saml2__EncryptedID soap_new_req_saml2__EncryptedElementType


#define soap_new_set__saml2__EncryptedID soap_new_set_saml2__EncryptedElementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedID(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write__saml2__EncryptedID(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__EncryptedID(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__EncryptedID(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__EncryptedID(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__EncryptedID soap_get_saml2__EncryptedElementType


#define soap_read__saml2__EncryptedID soap_read_saml2__EncryptedElementType


#define soap_GET__saml2__EncryptedID soap_GET_saml2__EncryptedElementType


#define soap_POST_recv__saml2__EncryptedID soap_POST_recv_saml2__EncryptedElementType

#endif
/* _saml2__NameID is a typedef synonym of saml2__NameIDType */

#ifndef SOAP_TYPE__saml2__NameID_DEFINED
#define SOAP_TYPE__saml2__NameID_DEFINED

#define soap_default__saml2__NameID soap_default_saml2__NameIDType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *);

#define soap_serialize__saml2__NameID soap_serialize_saml2__NameIDType


#define soap__saml2__NameID2s soap_saml2__NameIDType2s


#define soap_out__saml2__NameID soap_out_saml2__NameIDType


#define soap_s2_saml2__NameID soap_s2saml2__NameIDType


#define soap_in__saml2__NameID soap_in_saml2__NameIDType


#define soap_instantiate__saml2__NameID soap_instantiate_saml2__NameIDType


#define soap_new__saml2__NameID soap_new_saml2__NameIDType


#define soap_new_req__saml2__NameID soap_new_req_saml2__NameIDType


#define soap_new_set__saml2__NameID soap_new_set_saml2__NameIDType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__NameID(struct soap*, const struct saml2__NameIDType *, const char*, const char*);

inline int soap_write__saml2__NameID(struct soap *soap, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__NameID(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__NameID(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__NameID(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__NameID soap_get_saml2__NameIDType


#define soap_read__saml2__NameID soap_read_saml2__NameIDType


#define soap_GET__saml2__NameID soap_GET_saml2__NameIDType


#define soap_POST_recv__saml2__NameID soap_POST_recv_saml2__NameIDType

#endif
/* _saml2__BaseID is a typedef synonym of saml2__BaseIDAbstractType */

#ifndef SOAP_TYPE__saml2__BaseID_DEFINED
#define SOAP_TYPE__saml2__BaseID_DEFINED

#define soap_default__saml2__BaseID soap_default_saml2__BaseIDAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *);

#define soap_serialize__saml2__BaseID soap_serialize_saml2__BaseIDAbstractType


#define soap__saml2__BaseID2s soap_saml2__BaseIDAbstractType2s


#define soap_out__saml2__BaseID soap_out_saml2__BaseIDAbstractType


#define soap_s2_saml2__BaseID soap_s2saml2__BaseIDAbstractType


#define soap_in__saml2__BaseID soap_in_saml2__BaseIDAbstractType


#define soap_instantiate__saml2__BaseID soap_instantiate_saml2__BaseIDAbstractType


#define soap_new__saml2__BaseID soap_new_saml2__BaseIDAbstractType


#define soap_new_req__saml2__BaseID soap_new_req_saml2__BaseIDAbstractType


#define soap_new_set__saml2__BaseID soap_new_set_saml2__BaseIDAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__BaseID(struct soap*, const struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_write__saml2__BaseID(struct soap *soap, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__BaseID(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__BaseID(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__BaseID(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__BaseID soap_get_saml2__BaseIDAbstractType


#define soap_read__saml2__BaseID soap_read_saml2__BaseIDAbstractType


#define soap_GET__saml2__BaseID soap_GET_saml2__BaseIDAbstractType


#define soap_POST_recv__saml2__BaseID soap_POST_recv_saml2__BaseIDAbstractType

#endif

#ifndef SOAP_TYPE___saml2__union_AttributeStatementType_DEFINED
#define SOAP_TYPE___saml2__union_AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AttributeStatementType(struct soap*, const struct __saml2__union_AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AttributeStatementType(struct soap*, const char*, int, const struct __saml2__union_AttributeStatementType *, const char*);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType * SOAP_FMAC4 soap_in___saml2__union_AttributeStatementType(struct soap*, const char*, struct __saml2__union_AttributeStatementType *, const char*);
SOAP_FMAC1 struct __saml2__union_AttributeStatementType * SOAP_FMAC2 soap_instantiate___saml2__union_AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AttributeStatementType * soap_new___saml2__union_AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AttributeStatementType * soap_new_req___saml2__union_AttributeStatementType(
	struct soap *soap)
{
	struct __saml2__union_AttributeStatementType *_p = ::soap_new___saml2__union_AttributeStatementType(soap);
	if (_p)
	{	::soap_default___saml2__union_AttributeStatementType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AttributeStatementType * soap_new_set___saml2__union_AttributeStatementType(
	struct soap *soap,
	struct saml2__AttributeType *saml2__Attribute,
	struct saml2__EncryptedElementType *saml2__EncryptedAttribute)
{
	struct __saml2__union_AttributeStatementType *_p = ::soap_new___saml2__union_AttributeStatementType(soap);
	if (_p)
	{	::soap_default___saml2__union_AttributeStatementType(soap, _p);
		_p->saml2__Attribute = saml2__Attribute;
		_p->saml2__EncryptedAttribute = saml2__EncryptedAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AttributeStatementType(struct soap*, const struct __saml2__union_AttributeStatementType *, const char*, const char*);

inline int soap_write___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AttributeStatementType * SOAP_FMAC4 soap_get___saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *, const char*, const char*);

inline int soap_read___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *p)
{
	if (p)
	{	::soap_default___saml2__union_AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *p)
{
	if (::soap_read___saml2__union_AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_EvidenceType_DEFINED
#define SOAP_TYPE___saml2__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_EvidenceType(struct soap*, const struct __saml2__union_EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_EvidenceType(struct soap*, const char*, int, const struct __saml2__union_EvidenceType *, const char*);
SOAP_FMAC3 struct __saml2__union_EvidenceType * SOAP_FMAC4 soap_in___saml2__union_EvidenceType(struct soap*, const char*, struct __saml2__union_EvidenceType *, const char*);
SOAP_FMAC1 struct __saml2__union_EvidenceType * SOAP_FMAC2 soap_instantiate___saml2__union_EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_EvidenceType * soap_new___saml2__union_EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_EvidenceType * soap_new_req___saml2__union_EvidenceType(
	struct soap *soap)
{
	struct __saml2__union_EvidenceType *_p = ::soap_new___saml2__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml2__union_EvidenceType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_EvidenceType * soap_new_set___saml2__union_EvidenceType(
	struct soap *soap,
	char *saml2__AssertionIDRef,
	char *saml2__AssertionURIRef,
	struct saml2__AssertionType *saml2__Assertion,
	struct saml2__EncryptedElementType *saml2__EncryptedAssertion)
{
	struct __saml2__union_EvidenceType *_p = ::soap_new___saml2__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml2__union_EvidenceType(soap, _p);
		_p->saml2__AssertionIDRef = saml2__AssertionIDRef;
		_p->saml2__AssertionURIRef = saml2__AssertionURIRef;
		_p->saml2__Assertion = saml2__Assertion;
		_p->saml2__EncryptedAssertion = saml2__EncryptedAssertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_EvidenceType(struct soap*, const struct __saml2__union_EvidenceType *, const char*, const char*);

inline int soap_write___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_EvidenceType * SOAP_FMAC4 soap_get___saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *, const char*, const char*);

inline int soap_read___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *p)
{
	if (p)
	{	::soap_default___saml2__union_EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *p)
{
	if (::soap_read___saml2__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_AdviceType_DEFINED
#define SOAP_TYPE___saml2__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AdviceType(struct soap*, const struct __saml2__union_AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AdviceType(struct soap*, const char*, int, const struct __saml2__union_AdviceType *, const char*);
SOAP_FMAC3 struct __saml2__union_AdviceType * SOAP_FMAC4 soap_in___saml2__union_AdviceType(struct soap*, const char*, struct __saml2__union_AdviceType *, const char*);
SOAP_FMAC1 struct __saml2__union_AdviceType * SOAP_FMAC2 soap_instantiate___saml2__union_AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AdviceType * soap_new___saml2__union_AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AdviceType * soap_new_req___saml2__union_AdviceType(
	struct soap *soap)
{
	struct __saml2__union_AdviceType *_p = ::soap_new___saml2__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml2__union_AdviceType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AdviceType * soap_new_set___saml2__union_AdviceType(
	struct soap *soap,
	char *saml2__AssertionIDRef,
	char *saml2__AssertionURIRef,
	struct saml2__AssertionType *saml2__Assertion,
	struct saml2__EncryptedElementType *saml2__EncryptedAssertion)
{
	struct __saml2__union_AdviceType *_p = ::soap_new___saml2__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml2__union_AdviceType(soap, _p);
		_p->saml2__AssertionIDRef = saml2__AssertionIDRef;
		_p->saml2__AssertionURIRef = saml2__AssertionURIRef;
		_p->saml2__Assertion = saml2__Assertion;
		_p->saml2__EncryptedAssertion = saml2__EncryptedAssertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AdviceType(struct soap*, const struct __saml2__union_AdviceType *, const char*, const char*);

inline int soap_write___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AdviceType * SOAP_FMAC4 soap_get___saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *, const char*, const char*);

inline int soap_read___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *p)
{
	if (p)
	{	::soap_default___saml2__union_AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *p)
{
	if (::soap_read___saml2__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_ConditionsType_DEFINED
#define SOAP_TYPE___saml2__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_ConditionsType(struct soap*, const struct __saml2__union_ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_ConditionsType(struct soap*, const char*, int, const struct __saml2__union_ConditionsType *, const char*);
SOAP_FMAC3 struct __saml2__union_ConditionsType * SOAP_FMAC4 soap_in___saml2__union_ConditionsType(struct soap*, const char*, struct __saml2__union_ConditionsType *, const char*);
SOAP_FMAC1 struct __saml2__union_ConditionsType * SOAP_FMAC2 soap_instantiate___saml2__union_ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_ConditionsType * soap_new___saml2__union_ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_ConditionsType * soap_new_req___saml2__union_ConditionsType(
	struct soap *soap)
{
	struct __saml2__union_ConditionsType *_p = ::soap_new___saml2__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml2__union_ConditionsType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_ConditionsType * soap_new_set___saml2__union_ConditionsType(
	struct soap *soap,
	struct saml2__ConditionAbstractType *saml2__Condition,
	struct saml2__AudienceRestrictionType *saml2__AudienceRestriction,
	struct saml2__OneTimeUseType *saml2__OneTimeUse,
	struct saml2__ProxyRestrictionType *saml2__ProxyRestriction)
{
	struct __saml2__union_ConditionsType *_p = ::soap_new___saml2__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml2__union_ConditionsType(soap, _p);
		_p->saml2__Condition = saml2__Condition;
		_p->saml2__AudienceRestriction = saml2__AudienceRestriction;
		_p->saml2__OneTimeUse = saml2__OneTimeUse;
		_p->saml2__ProxyRestriction = saml2__ProxyRestriction;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_ConditionsType(struct soap*, const struct __saml2__union_ConditionsType *, const char*, const char*);

inline int soap_write___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_ConditionsType * SOAP_FMAC4 soap_get___saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *, const char*, const char*);

inline int soap_read___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *p)
{
	if (p)
	{	::soap_default___saml2__union_ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *p)
{
	if (::soap_read___saml2__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_AssertionType_DEFINED
#define SOAP_TYPE___saml2__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AssertionType(struct soap*, const struct __saml2__union_AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AssertionType(struct soap*, const char*, int, const struct __saml2__union_AssertionType *, const char*);
SOAP_FMAC3 struct __saml2__union_AssertionType * SOAP_FMAC4 soap_in___saml2__union_AssertionType(struct soap*, const char*, struct __saml2__union_AssertionType *, const char*);
SOAP_FMAC1 struct __saml2__union_AssertionType * SOAP_FMAC2 soap_instantiate___saml2__union_AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AssertionType * soap_new___saml2__union_AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AssertionType * soap_new_req___saml2__union_AssertionType(
	struct soap *soap)
{
	struct __saml2__union_AssertionType *_p = ::soap_new___saml2__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml2__union_AssertionType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AssertionType * soap_new_set___saml2__union_AssertionType(
	struct soap *soap,
	struct saml2__StatementAbstractType *saml2__Statement,
	struct saml2__AuthnStatementType *saml2__AuthnStatement,
	struct saml2__AuthzDecisionStatementType *saml2__AuthzDecisionStatement,
	struct saml2__AttributeStatementType *saml2__AttributeStatement)
{
	struct __saml2__union_AssertionType *_p = ::soap_new___saml2__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml2__union_AssertionType(soap, _p);
		_p->saml2__Statement = saml2__Statement;
		_p->saml2__AuthnStatement = saml2__AuthnStatement;
		_p->saml2__AuthzDecisionStatement = saml2__AuthzDecisionStatement;
		_p->saml2__AttributeStatement = saml2__AttributeStatement;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AssertionType(struct soap*, const struct __saml2__union_AssertionType *, const char*, const char*);

inline int soap_write___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AssertionType * SOAP_FMAC4 soap_get___saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *, const char*, const char*);

inline int soap_read___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *p)
{
	if (p)
	{	::soap_default___saml2__union_AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *p)
{
	if (::soap_read___saml2__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AttributeType_DEFINED
#define SOAP_TYPE_saml2__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AttributeType(struct soap*, struct saml2__AttributeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AttributeType(struct soap*, const char*, int, const struct saml2__AttributeType *, const char*);
SOAP_FMAC3 struct saml2__AttributeType * SOAP_FMAC4 soap_in_saml2__AttributeType(struct soap*, const char*, struct saml2__AttributeType *, const char*);
SOAP_FMAC1 struct saml2__AttributeType * SOAP_FMAC2 soap_instantiate_saml2__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AttributeType * soap_new_saml2__AttributeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AttributeType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AttributeType * soap_new_req_saml2__AttributeType(
	struct soap *soap,
	int __sizeAttributeValue,
	char **saml2__AttributeValue,
	char *Name)
{
	struct saml2__AttributeType *_p = ::soap_new_saml2__AttributeType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeType(soap, _p);
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml2__AttributeValue = saml2__AttributeValue;
		_p->Name = Name;
	}
	return _p;
}

inline struct saml2__AttributeType * soap_new_set_saml2__AttributeType(
	struct soap *soap,
	int __sizeAttributeValue,
	char **saml2__AttributeValue,
	char *Name,
	char *NameFormat,
	char *FriendlyName)
{
	struct saml2__AttributeType *_p = ::soap_new_saml2__AttributeType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeType(soap, _p);
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml2__AttributeValue = saml2__AttributeValue;
		_p->Name = Name;
		_p->NameFormat = NameFormat;
		_p->FriendlyName = FriendlyName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *, const char*, const char*);

inline int soap_write_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AttributeType * SOAP_FMAC4 soap_get_saml2__AttributeType(struct soap*, struct saml2__AttributeType *, const char*, const char*);

inline int soap_read_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType *p)
{
	if (p)
	{	::soap_default_saml2__AttributeType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType *p)
{
	if (::soap_read_saml2__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AttributeStatementType_DEFINED
#define SOAP_TYPE_saml2__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AttributeStatementType(struct soap*, const char*, int, const struct saml2__AttributeStatementType *, const char*);
SOAP_FMAC3 struct saml2__AttributeStatementType * SOAP_FMAC4 soap_in_saml2__AttributeStatementType(struct soap*, const char*, struct saml2__AttributeStatementType *, const char*);
SOAP_FMAC1 struct saml2__AttributeStatementType * SOAP_FMAC2 soap_instantiate_saml2__AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AttributeStatementType * soap_new_saml2__AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AttributeStatementType * soap_new_req_saml2__AttributeStatementType(
	struct soap *soap,
	int __size_AttributeStatementType,
	struct __saml2__union_AttributeStatementType *__union_AttributeStatementType)
{
	struct saml2__AttributeStatementType *_p = ::soap_new_saml2__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeStatementType(soap, _p);
		_p->__size_AttributeStatementType = __size_AttributeStatementType;
		_p->__union_AttributeStatementType = __union_AttributeStatementType;
	}
	return _p;
}

inline struct saml2__AttributeStatementType * soap_new_set_saml2__AttributeStatementType(
	struct soap *soap,
	int __size_AttributeStatementType,
	struct __saml2__union_AttributeStatementType *__union_AttributeStatementType)
{
	struct saml2__AttributeStatementType *_p = ::soap_new_saml2__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeStatementType(soap, _p);
		_p->__size_AttributeStatementType = __size_AttributeStatementType;
		_p->__union_AttributeStatementType = __union_AttributeStatementType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_write_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AttributeStatementType * SOAP_FMAC4 soap_get_saml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_read_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *p)
{
	if (p)
	{	::soap_default_saml2__AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *p)
{
	if (::soap_read_saml2__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__EvidenceType_DEFINED
#define SOAP_TYPE_saml2__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__EvidenceType(struct soap*, struct saml2__EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__EvidenceType(struct soap*, const char*, int, const struct saml2__EvidenceType *, const char*);
SOAP_FMAC3 struct saml2__EvidenceType * SOAP_FMAC4 soap_in_saml2__EvidenceType(struct soap*, const char*, struct saml2__EvidenceType *, const char*);
SOAP_FMAC1 struct saml2__EvidenceType * SOAP_FMAC2 soap_instantiate_saml2__EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__EvidenceType * soap_new_saml2__EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__EvidenceType * soap_new_req_saml2__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml2__union_EvidenceType *__union_EvidenceType)
{
	struct saml2__EvidenceType *_p = ::soap_new_saml2__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml2__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}

inline struct saml2__EvidenceType * soap_new_set_saml2__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml2__union_EvidenceType *__union_EvidenceType)
{
	struct saml2__EvidenceType *_p = ::soap_new_saml2__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml2__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *, const char*, const char*);

inline int soap_write_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__EvidenceType * SOAP_FMAC4 soap_get_saml2__EvidenceType(struct soap*, struct saml2__EvidenceType *, const char*, const char*);

inline int soap_read_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *p)
{
	if (p)
	{	::soap_default_saml2__EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *p)
{
	if (::soap_read_saml2__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ActionType_DEFINED
#define SOAP_TYPE_saml2__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ActionType(struct soap*, struct saml2__ActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ActionType(struct soap*, const struct saml2__ActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ActionType(struct soap*, const char*, int, const struct saml2__ActionType *, const char*);
SOAP_FMAC3 struct saml2__ActionType * SOAP_FMAC4 soap_in_saml2__ActionType(struct soap*, const char*, struct saml2__ActionType *, const char*);
SOAP_FMAC1 struct saml2__ActionType * SOAP_FMAC2 soap_instantiate_saml2__ActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ActionType * soap_new_saml2__ActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ActionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ActionType * soap_new_req_saml2__ActionType(
	struct soap *soap,
	char *Namespace)
{
	struct saml2__ActionType *_p = ::soap_new_saml2__ActionType(soap);
	if (_p)
	{	::soap_default_saml2__ActionType(soap, _p);
		_p->Namespace = Namespace;
	}
	return _p;
}

inline struct saml2__ActionType * soap_new_set_saml2__ActionType(
	struct soap *soap,
	char *__item,
	char *Namespace)
{
	struct saml2__ActionType *_p = ::soap_new_saml2__ActionType(soap);
	if (_p)
	{	::soap_default_saml2__ActionType(soap, _p);
		_p->__item = __item;
		_p->Namespace = Namespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ActionType(struct soap*, const struct saml2__ActionType *, const char*, const char*);

inline int soap_write_saml2__ActionType(struct soap *soap, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ActionType * SOAP_FMAC4 soap_get_saml2__ActionType(struct soap*, struct saml2__ActionType *, const char*, const char*);

inline int soap_read_saml2__ActionType(struct soap *soap, struct saml2__ActionType *p)
{
	if (p)
	{	::soap_default_saml2__ActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ActionType(struct soap *soap, struct saml2__ActionType *p)
{
	if (::soap_read_saml2__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AuthzDecisionStatementType_DEFINED
#define SOAP_TYPE_saml2__AuthzDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthzDecisionStatementType(struct soap*, const char*, int, const struct saml2__AuthzDecisionStatementType *, const char*);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType * SOAP_FMAC4 soap_in_saml2__AuthzDecisionStatementType(struct soap*, const char*, struct saml2__AuthzDecisionStatementType *, const char*);
SOAP_FMAC1 struct saml2__AuthzDecisionStatementType * SOAP_FMAC2 soap_instantiate_saml2__AuthzDecisionStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthzDecisionStatementType * soap_new_saml2__AuthzDecisionStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthzDecisionStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthzDecisionStatementType * soap_new_req_saml2__AuthzDecisionStatementType(
	struct soap *soap,
	int __sizeAction,
	struct saml2__ActionType *saml2__Action,
	char *Resource,
	enum saml2__DecisionType Decision)
{
	struct saml2__AuthzDecisionStatementType *_p = ::soap_new_saml2__AuthzDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthzDecisionStatementType(soap, _p);
		_p->__sizeAction = __sizeAction;
		_p->saml2__Action = saml2__Action;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}

inline struct saml2__AuthzDecisionStatementType * soap_new_set_saml2__AuthzDecisionStatementType(
	struct soap *soap,
	int __sizeAction,
	struct saml2__ActionType *saml2__Action,
	struct saml2__EvidenceType *saml2__Evidence,
	char *Resource,
	enum saml2__DecisionType Decision)
{
	struct saml2__AuthzDecisionStatementType *_p = ::soap_new_saml2__AuthzDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthzDecisionStatementType(soap, _p);
		_p->__sizeAction = __sizeAction;
		_p->saml2__Action = saml2__Action;
		_p->saml2__Evidence = saml2__Evidence;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_write_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType * SOAP_FMAC4 soap_get_saml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_read_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *p)
{
	if (p)
	{	::soap_default_saml2__AuthzDecisionStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AuthzDecisionStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AuthzDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *p)
{
	if (::soap_read_saml2__AuthzDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AuthnContextType_DEFINED
#define SOAP_TYPE_saml2__AuthnContextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthnContextType(struct soap*, const char*, int, const struct saml2__AuthnContextType *, const char*);
SOAP_FMAC3 struct saml2__AuthnContextType * SOAP_FMAC4 soap_in_saml2__AuthnContextType(struct soap*, const char*, struct saml2__AuthnContextType *, const char*);
SOAP_FMAC1 struct saml2__AuthnContextType * SOAP_FMAC2 soap_instantiate_saml2__AuthnContextType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthnContextType * soap_new_saml2__AuthnContextType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthnContextType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthnContextType * soap_new_req_saml2__AuthnContextType(
	struct soap *soap,
	int __sizeAuthenticatingAuthority,
	char **saml2__AuthenticatingAuthority)
{
	struct saml2__AuthnContextType *_p = ::soap_new_saml2__AuthnContextType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnContextType(soap, _p);
		_p->__sizeAuthenticatingAuthority = __sizeAuthenticatingAuthority;
		_p->saml2__AuthenticatingAuthority = saml2__AuthenticatingAuthority;
	}
	return _p;
}

inline struct saml2__AuthnContextType * soap_new_set_saml2__AuthnContextType(
	struct soap *soap,
	char *saml2__AuthnContextClassRef,
	char *saml2__AuthnContextDecl,
	char *saml2__AuthnContextDeclRef,
	char *saml2__AuthnContextDecl_,
	char *saml2__AuthnContextDeclRef_,
	int __sizeAuthenticatingAuthority,
	char **saml2__AuthenticatingAuthority)
{
	struct saml2__AuthnContextType *_p = ::soap_new_saml2__AuthnContextType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnContextType(soap, _p);
		_p->saml2__AuthnContextClassRef = saml2__AuthnContextClassRef;
		_p->saml2__AuthnContextDecl = saml2__AuthnContextDecl;
		_p->saml2__AuthnContextDeclRef = saml2__AuthnContextDeclRef;
		_p->saml2__AuthnContextDecl_ = saml2__AuthnContextDecl_;
		_p->saml2__AuthnContextDeclRef_ = saml2__AuthnContextDeclRef_;
		_p->__sizeAuthenticatingAuthority = __sizeAuthenticatingAuthority;
		_p->saml2__AuthenticatingAuthority = saml2__AuthenticatingAuthority;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_write_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthnContextType * SOAP_FMAC4 soap_get_saml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_read_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *p)
{
	if (p)
	{	::soap_default_saml2__AuthnContextType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AuthnContextType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AuthnContextType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *p)
{
	if (::soap_read_saml2__AuthnContextType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectLocalityType_DEFINED
#define SOAP_TYPE_saml2__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectLocalityType(struct soap*, const char*, int, const struct saml2__SubjectLocalityType *, const char*);
SOAP_FMAC3 struct saml2__SubjectLocalityType * SOAP_FMAC4 soap_in_saml2__SubjectLocalityType(struct soap*, const char*, struct saml2__SubjectLocalityType *, const char*);
SOAP_FMAC1 struct saml2__SubjectLocalityType * SOAP_FMAC2 soap_instantiate_saml2__SubjectLocalityType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectLocalityType * soap_new_saml2__SubjectLocalityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectLocalityType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectLocalityType * soap_new_req_saml2__SubjectLocalityType(
	struct soap *soap)
{
	struct saml2__SubjectLocalityType *_p = ::soap_new_saml2__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectLocalityType(soap, _p);
	}
	return _p;
}

inline struct saml2__SubjectLocalityType * soap_new_set_saml2__SubjectLocalityType(
	struct soap *soap,
	char *Address,
	char *DNSName)
{
	struct saml2__SubjectLocalityType *_p = ::soap_new_saml2__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectLocalityType(soap, _p);
		_p->Address = Address;
		_p->DNSName = DNSName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_write_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectLocalityType * SOAP_FMAC4 soap_get_saml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_read_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectLocalityType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectLocalityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *p)
{
	if (::soap_read_saml2__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AuthnStatementType_DEFINED
#define SOAP_TYPE_saml2__AuthnStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthnStatementType(struct soap*, const char*, int, const struct saml2__AuthnStatementType *, const char*);
SOAP_FMAC3 struct saml2__AuthnStatementType * SOAP_FMAC4 soap_in_saml2__AuthnStatementType(struct soap*, const char*, struct saml2__AuthnStatementType *, const char*);
SOAP_FMAC1 struct saml2__AuthnStatementType * SOAP_FMAC2 soap_instantiate_saml2__AuthnStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthnStatementType * soap_new_saml2__AuthnStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthnStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthnStatementType * soap_new_req_saml2__AuthnStatementType(
	struct soap *soap,
	struct saml2__AuthnContextType *saml2__AuthnContext,
	const struct timeval& AuthnInstant)
{
	struct saml2__AuthnStatementType *_p = ::soap_new_saml2__AuthnStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnStatementType(soap, _p);
		_p->saml2__AuthnContext = saml2__AuthnContext;
		_p->AuthnInstant = AuthnInstant;
	}
	return _p;
}

inline struct saml2__AuthnStatementType * soap_new_set_saml2__AuthnStatementType(
	struct soap *soap,
	struct saml2__SubjectLocalityType *saml2__SubjectLocality,
	struct saml2__AuthnContextType *saml2__AuthnContext,
	const struct timeval& AuthnInstant,
	char *SessionIndex,
	struct timeval *SessionNotOnOrAfter)
{
	struct saml2__AuthnStatementType *_p = ::soap_new_saml2__AuthnStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnStatementType(soap, _p);
		_p->saml2__SubjectLocality = saml2__SubjectLocality;
		_p->saml2__AuthnContext = saml2__AuthnContext;
		_p->AuthnInstant = AuthnInstant;
		_p->SessionIndex = SessionIndex;
		_p->SessionNotOnOrAfter = SessionNotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_write_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthnStatementType * SOAP_FMAC4 soap_get_saml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_read_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *p)
{
	if (p)
	{	::soap_default_saml2__AuthnStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AuthnStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AuthnStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *p)
{
	if (::soap_read_saml2__AuthnStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__StatementAbstractType_DEFINED
#define SOAP_TYPE_saml2__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__StatementAbstractType(struct soap*, const char*, int, const struct saml2__StatementAbstractType *, const char*);
SOAP_FMAC3 struct saml2__StatementAbstractType * SOAP_FMAC4 soap_in_saml2__StatementAbstractType(struct soap*, const char*, struct saml2__StatementAbstractType *, const char*);
SOAP_FMAC1 struct saml2__StatementAbstractType * SOAP_FMAC2 soap_instantiate_saml2__StatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__StatementAbstractType * soap_new_saml2__StatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__StatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__StatementAbstractType * soap_new_req_saml2__StatementAbstractType(
	struct soap *soap)
{
	struct saml2__StatementAbstractType *_p = ::soap_new_saml2__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__StatementAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__StatementAbstractType * soap_new_set_saml2__StatementAbstractType(
	struct soap *soap)
{
	struct saml2__StatementAbstractType *_p = ::soap_new_saml2__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__StatementAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_write_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__StatementAbstractType * SOAP_FMAC4 soap_get_saml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_read_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *p)
{
	if (p)
	{	::soap_default_saml2__StatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__StatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *p)
{
	if (::soap_read_saml2__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AdviceType_DEFINED
#define SOAP_TYPE_saml2__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AdviceType(struct soap*, struct saml2__AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AdviceType(struct soap*, const char*, int, const struct saml2__AdviceType *, const char*);
SOAP_FMAC3 struct saml2__AdviceType * SOAP_FMAC4 soap_in_saml2__AdviceType(struct soap*, const char*, struct saml2__AdviceType *, const char*);
SOAP_FMAC1 struct saml2__AdviceType * SOAP_FMAC2 soap_instantiate_saml2__AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AdviceType * soap_new_saml2__AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AdviceType * soap_new_req_saml2__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml2__union_AdviceType *__union_AdviceType)
{
	struct saml2__AdviceType *_p = ::soap_new_saml2__AdviceType(soap);
	if (_p)
	{	::soap_default_saml2__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}

inline struct saml2__AdviceType * soap_new_set_saml2__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml2__union_AdviceType *__union_AdviceType)
{
	struct saml2__AdviceType *_p = ::soap_new_saml2__AdviceType(soap);
	if (_p)
	{	::soap_default_saml2__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *, const char*, const char*);

inline int soap_write_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AdviceType * SOAP_FMAC4 soap_get_saml2__AdviceType(struct soap*, struct saml2__AdviceType *, const char*, const char*);

inline int soap_read_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType *p)
{
	if (p)
	{	::soap_default_saml2__AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType *p)
{
	if (::soap_read_saml2__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ProxyRestrictionType_DEFINED
#define SOAP_TYPE_saml2__ProxyRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ProxyRestrictionType(struct soap*, const char*, int, const struct saml2__ProxyRestrictionType *, const char*);
SOAP_FMAC3 struct saml2__ProxyRestrictionType * SOAP_FMAC4 soap_in_saml2__ProxyRestrictionType(struct soap*, const char*, struct saml2__ProxyRestrictionType *, const char*);
SOAP_FMAC1 struct saml2__ProxyRestrictionType * SOAP_FMAC2 soap_instantiate_saml2__ProxyRestrictionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ProxyRestrictionType * soap_new_saml2__ProxyRestrictionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ProxyRestrictionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ProxyRestrictionType * soap_new_req_saml2__ProxyRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__ProxyRestrictionType *_p = ::soap_new_saml2__ProxyRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__ProxyRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}

inline struct saml2__ProxyRestrictionType * soap_new_set_saml2__ProxyRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience,
	char *Count)
{
	struct saml2__ProxyRestrictionType *_p = ::soap_new_saml2__ProxyRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__ProxyRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
		_p->Count = Count;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_write_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ProxyRestrictionType * SOAP_FMAC4 soap_get_saml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_read_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *p)
{
	if (p)
	{	::soap_default_saml2__ProxyRestrictionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ProxyRestrictionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ProxyRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *p)
{
	if (::soap_read_saml2__ProxyRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__OneTimeUseType_DEFINED
#define SOAP_TYPE_saml2__OneTimeUseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__OneTimeUseType(struct soap*, const char*, int, const struct saml2__OneTimeUseType *, const char*);
SOAP_FMAC3 struct saml2__OneTimeUseType * SOAP_FMAC4 soap_in_saml2__OneTimeUseType(struct soap*, const char*, struct saml2__OneTimeUseType *, const char*);
SOAP_FMAC1 struct saml2__OneTimeUseType * SOAP_FMAC2 soap_instantiate_saml2__OneTimeUseType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__OneTimeUseType * soap_new_saml2__OneTimeUseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__OneTimeUseType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__OneTimeUseType * soap_new_req_saml2__OneTimeUseType(
	struct soap *soap)
{
	struct saml2__OneTimeUseType *_p = ::soap_new_saml2__OneTimeUseType(soap);
	if (_p)
	{	::soap_default_saml2__OneTimeUseType(soap, _p);
	}
	return _p;
}

inline struct saml2__OneTimeUseType * soap_new_set_saml2__OneTimeUseType(
	struct soap *soap)
{
	struct saml2__OneTimeUseType *_p = ::soap_new_saml2__OneTimeUseType(soap);
	if (_p)
	{	::soap_default_saml2__OneTimeUseType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_write_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__OneTimeUseType * SOAP_FMAC4 soap_get_saml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_read_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *p)
{
	if (p)
	{	::soap_default_saml2__OneTimeUseType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__OneTimeUseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__OneTimeUseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *p)
{
	if (::soap_read_saml2__OneTimeUseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AudienceRestrictionType_DEFINED
#define SOAP_TYPE_saml2__AudienceRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AudienceRestrictionType(struct soap*, const char*, int, const struct saml2__AudienceRestrictionType *, const char*);
SOAP_FMAC3 struct saml2__AudienceRestrictionType * SOAP_FMAC4 soap_in_saml2__AudienceRestrictionType(struct soap*, const char*, struct saml2__AudienceRestrictionType *, const char*);
SOAP_FMAC1 struct saml2__AudienceRestrictionType * SOAP_FMAC2 soap_instantiate_saml2__AudienceRestrictionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AudienceRestrictionType * soap_new_saml2__AudienceRestrictionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AudienceRestrictionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AudienceRestrictionType * soap_new_req_saml2__AudienceRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__AudienceRestrictionType *_p = ::soap_new_saml2__AudienceRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__AudienceRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}

inline struct saml2__AudienceRestrictionType * soap_new_set_saml2__AudienceRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__AudienceRestrictionType *_p = ::soap_new_saml2__AudienceRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__AudienceRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_write_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AudienceRestrictionType * SOAP_FMAC4 soap_get_saml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_read_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *p)
{
	if (p)
	{	::soap_default_saml2__AudienceRestrictionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AudienceRestrictionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AudienceRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *p)
{
	if (::soap_read_saml2__AudienceRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ConditionAbstractType_DEFINED
#define SOAP_TYPE_saml2__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ConditionAbstractType(struct soap*, const char*, int, const struct saml2__ConditionAbstractType *, const char*);
SOAP_FMAC3 struct saml2__ConditionAbstractType * SOAP_FMAC4 soap_in_saml2__ConditionAbstractType(struct soap*, const char*, struct saml2__ConditionAbstractType *, const char*);
SOAP_FMAC1 struct saml2__ConditionAbstractType * SOAP_FMAC2 soap_instantiate_saml2__ConditionAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ConditionAbstractType * soap_new_saml2__ConditionAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ConditionAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ConditionAbstractType * soap_new_req_saml2__ConditionAbstractType(
	struct soap *soap)
{
	struct saml2__ConditionAbstractType *_p = ::soap_new_saml2__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__ConditionAbstractType * soap_new_set_saml2__ConditionAbstractType(
	struct soap *soap)
{
	struct saml2__ConditionAbstractType *_p = ::soap_new_saml2__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_write_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ConditionAbstractType * SOAP_FMAC4 soap_get_saml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_read_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *p)
{
	if (p)
	{	::soap_default_saml2__ConditionAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ConditionAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *p)
{
	if (::soap_read_saml2__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ConditionsType_DEFINED
#define SOAP_TYPE_saml2__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ConditionsType(struct soap*, struct saml2__ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ConditionsType(struct soap*, const char*, int, const struct saml2__ConditionsType *, const char*);
SOAP_FMAC3 struct saml2__ConditionsType * SOAP_FMAC4 soap_in_saml2__ConditionsType(struct soap*, const char*, struct saml2__ConditionsType *, const char*);
SOAP_FMAC1 struct saml2__ConditionsType * SOAP_FMAC2 soap_instantiate_saml2__ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ConditionsType * soap_new_saml2__ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ConditionsType * soap_new_req_saml2__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml2__union_ConditionsType *__union_ConditionsType)
{
	struct saml2__ConditionsType *_p = ::soap_new_saml2__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
	}
	return _p;
}

inline struct saml2__ConditionsType * soap_new_set_saml2__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml2__union_ConditionsType *__union_ConditionsType,
	struct timeval *NotBefore,
	struct timeval *NotOnOrAfter)
{
	struct saml2__ConditionsType *_p = ::soap_new_saml2__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *, const char*, const char*);

inline int soap_write_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ConditionsType * SOAP_FMAC4 soap_get_saml2__ConditionsType(struct soap*, struct saml2__ConditionsType *, const char*, const char*);

inline int soap_read_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *p)
{
	if (p)
	{	::soap_default_saml2__ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *p)
{
	if (::soap_read_saml2__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__KeyInfoConfirmationDataType_DEFINED
#define SOAP_TYPE_saml2__KeyInfoConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__KeyInfoConfirmationDataType(struct soap*, struct saml2__KeyInfoConfirmationDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__KeyInfoConfirmationDataType(struct soap*, const struct saml2__KeyInfoConfirmationDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__KeyInfoConfirmationDataType(struct soap*, const char*, int, const struct saml2__KeyInfoConfirmationDataType *, const char*);
SOAP_FMAC3 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC4 soap_in_saml2__KeyInfoConfirmationDataType(struct soap*, const char*, struct saml2__KeyInfoConfirmationDataType *, const char*);
SOAP_FMAC1 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC2 soap_instantiate_saml2__KeyInfoConfirmationDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__KeyInfoConfirmationDataType * soap_new_saml2__KeyInfoConfirmationDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__KeyInfoConfirmationDataType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__KeyInfoConfirmationDataType * soap_new_req_saml2__KeyInfoConfirmationDataType(
	struct soap *soap,
	int __sizeds__KeyInfo,
	struct ds__KeyInfoType **ds__KeyInfo)
{
	struct saml2__KeyInfoConfirmationDataType *_p = ::soap_new_saml2__KeyInfoConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__KeyInfoConfirmationDataType(soap, _p);
		_p->__sizeds__KeyInfo = __sizeds__KeyInfo;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}

inline struct saml2__KeyInfoConfirmationDataType * soap_new_set_saml2__KeyInfoConfirmationDataType(
	struct soap *soap,
	int __sizeds__KeyInfo,
	struct ds__KeyInfoType **ds__KeyInfo)
{
	struct saml2__KeyInfoConfirmationDataType *_p = ::soap_new_saml2__KeyInfoConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__KeyInfoConfirmationDataType(soap, _p);
		_p->__sizeds__KeyInfo = __sizeds__KeyInfo;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__KeyInfoConfirmationDataType(struct soap*, const struct saml2__KeyInfoConfirmationDataType *, const char*, const char*);

inline int soap_write_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC4 soap_get_saml2__KeyInfoConfirmationDataType(struct soap*, struct saml2__KeyInfoConfirmationDataType *, const char*, const char*);

inline int soap_read_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (p)
	{	::soap_default_saml2__KeyInfoConfirmationDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__KeyInfoConfirmationDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__KeyInfoConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (::soap_read_saml2__KeyInfoConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectConfirmationDataType_DEFINED
#define SOAP_TYPE_saml2__SubjectConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectConfirmationDataType(struct soap*, const char*, int, const struct saml2__SubjectConfirmationDataType *, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType * SOAP_FMAC4 soap_in_saml2__SubjectConfirmationDataType(struct soap*, const char*, struct saml2__SubjectConfirmationDataType *, const char*);
SOAP_FMAC1 struct saml2__SubjectConfirmationDataType * SOAP_FMAC2 soap_instantiate_saml2__SubjectConfirmationDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectConfirmationDataType * soap_new_saml2__SubjectConfirmationDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectConfirmationDataType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectConfirmationDataType * soap_new_req_saml2__SubjectConfirmationDataType(
	struct soap *soap)
{
	struct saml2__SubjectConfirmationDataType *_p = ::soap_new_saml2__SubjectConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationDataType(soap, _p);
	}
	return _p;
}

inline struct saml2__SubjectConfirmationDataType * soap_new_set_saml2__SubjectConfirmationDataType(
	struct soap *soap,
	struct timeval *NotBefore,
	struct timeval *NotOnOrAfter,
	char *Recipient,
	char *InResponseTo,
	char *Address,
	char *__mixed)
{
	struct saml2__SubjectConfirmationDataType *_p = ::soap_new_saml2__SubjectConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationDataType(soap, _p);
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
		_p->Recipient = Recipient;
		_p->InResponseTo = InResponseTo;
		_p->Address = Address;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_write_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType * SOAP_FMAC4 soap_get_saml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_read_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectConfirmationDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectConfirmationDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *p)
{
	if (::soap_read_saml2__SubjectConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_saml2__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectConfirmationType(struct soap*, const char*, int, const struct saml2__SubjectConfirmationType *, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationType * SOAP_FMAC4 soap_in_saml2__SubjectConfirmationType(struct soap*, const char*, struct saml2__SubjectConfirmationType *, const char*);
SOAP_FMAC1 struct saml2__SubjectConfirmationType * SOAP_FMAC2 soap_instantiate_saml2__SubjectConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectConfirmationType * soap_new_saml2__SubjectConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectConfirmationType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectConfirmationType * soap_new_req_saml2__SubjectConfirmationType(
	struct soap *soap,
	char *Method)
{
	struct saml2__SubjectConfirmationType *_p = ::soap_new_saml2__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationType(soap, _p);
		_p->Method = Method;
	}
	return _p;
}

inline struct saml2__SubjectConfirmationType * soap_new_set_saml2__SubjectConfirmationType(
	struct soap *soap,
	struct saml2__BaseIDAbstractType *saml2__BaseID,
	struct saml2__NameIDType *saml2__NameID,
	struct saml2__EncryptedElementType *saml2__EncryptedID,
	struct saml2__SubjectConfirmationDataType *saml2__SubjectConfirmationData,
	char *Method)
{
	struct saml2__SubjectConfirmationType *_p = ::soap_new_saml2__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationType(soap, _p);
		_p->saml2__BaseID = saml2__BaseID;
		_p->saml2__NameID = saml2__NameID;
		_p->saml2__EncryptedID = saml2__EncryptedID;
		_p->saml2__SubjectConfirmationData = saml2__SubjectConfirmationData;
		_p->Method = Method;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_write_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectConfirmationType * SOAP_FMAC4 soap_get_saml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_read_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectConfirmationType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *p)
{
	if (::soap_read_saml2__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectType_DEFINED
#define SOAP_TYPE_saml2__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectType(struct soap*, struct saml2__SubjectType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectType(struct soap*, const char*, int, const struct saml2__SubjectType *, const char*);
SOAP_FMAC3 struct saml2__SubjectType * SOAP_FMAC4 soap_in_saml2__SubjectType(struct soap*, const char*, struct saml2__SubjectType *, const char*);
SOAP_FMAC1 struct saml2__SubjectType * SOAP_FMAC2 soap_instantiate_saml2__SubjectType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectType * soap_new_saml2__SubjectType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectType * soap_new_req_saml2__SubjectType(
	struct soap *soap,
	int __sizeSubjectConfirmation,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation,
	int __sizeSubjectConfirmation_,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation_)
{
	struct saml2__SubjectType *_p = ::soap_new_saml2__SubjectType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectType(soap, _p);
		_p->__sizeSubjectConfirmation = __sizeSubjectConfirmation;
		_p->saml2__SubjectConfirmation = saml2__SubjectConfirmation;
		_p->__sizeSubjectConfirmation_ = __sizeSubjectConfirmation_;
		_p->saml2__SubjectConfirmation_ = saml2__SubjectConfirmation_;
	}
	return _p;
}

inline struct saml2__SubjectType * soap_new_set_saml2__SubjectType(
	struct soap *soap,
	struct saml2__BaseIDAbstractType *saml2__BaseID,
	struct saml2__NameIDType *saml2__NameID,
	struct saml2__EncryptedElementType *saml2__EncryptedID,
	int __sizeSubjectConfirmation,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation,
	int __sizeSubjectConfirmation_,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation_)
{
	struct saml2__SubjectType *_p = ::soap_new_saml2__SubjectType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectType(soap, _p);
		_p->saml2__BaseID = saml2__BaseID;
		_p->saml2__NameID = saml2__NameID;
		_p->saml2__EncryptedID = saml2__EncryptedID;
		_p->__sizeSubjectConfirmation = __sizeSubjectConfirmation;
		_p->saml2__SubjectConfirmation = saml2__SubjectConfirmation;
		_p->__sizeSubjectConfirmation_ = __sizeSubjectConfirmation_;
		_p->saml2__SubjectConfirmation_ = saml2__SubjectConfirmation_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *, const char*, const char*);

inline int soap_write_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectType * SOAP_FMAC4 soap_get_saml2__SubjectType(struct soap*, struct saml2__SubjectType *, const char*, const char*);

inline int soap_read_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType *p)
{
	if (::soap_read_saml2__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AssertionType_DEFINED
#define SOAP_TYPE_saml2__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AssertionType(struct soap*, struct saml2__AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AssertionType(struct soap*, const char*, int, const struct saml2__AssertionType *, const char*);
SOAP_FMAC3 struct saml2__AssertionType * SOAP_FMAC4 soap_in_saml2__AssertionType(struct soap*, const char*, struct saml2__AssertionType *, const char*);
SOAP_FMAC1 struct saml2__AssertionType * SOAP_FMAC2 soap_instantiate_saml2__AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AssertionType * soap_new_saml2__AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AssertionType * soap_new_req_saml2__AssertionType(
	struct soap *soap,
	struct saml2__NameIDType *saml2__Issuer,
	int __size_AssertionType,
	struct __saml2__union_AssertionType *__union_AssertionType,
	char *Version,
	char *ID,
	const struct timeval& IssueInstant)
{
	struct saml2__AssertionType *_p = ::soap_new_saml2__AssertionType(soap);
	if (_p)
	{	::soap_default_saml2__AssertionType(soap, _p);
		_p->saml2__Issuer = saml2__Issuer;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->Version = Version;
		_p->ID = ID;
		_p->IssueInstant = IssueInstant;
	}
	return _p;
}

inline struct saml2__AssertionType * soap_new_set_saml2__AssertionType(
	struct soap *soap,
	struct saml2__NameIDType *saml2__Issuer,
	struct ds__SignatureType *ds__Signature,
	struct saml2__SubjectType *saml2__Subject,
	struct saml2__ConditionsType *saml2__Conditions,
	struct saml2__AdviceType *saml2__Advice,
	int __size_AssertionType,
	struct __saml2__union_AssertionType *__union_AssertionType,
	char *Version,
	char *ID,
	const struct timeval& IssueInstant,
	char *wsu__Id)
{
	struct saml2__AssertionType *_p = ::soap_new_saml2__AssertionType(soap);
	if (_p)
	{	::soap_default_saml2__AssertionType(soap, _p);
		_p->saml2__Issuer = saml2__Issuer;
		_p->ds__Signature = ds__Signature;
		_p->saml2__Subject = saml2__Subject;
		_p->saml2__Conditions = saml2__Conditions;
		_p->saml2__Advice = saml2__Advice;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->Version = Version;
		_p->ID = ID;
		_p->IssueInstant = IssueInstant;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *, const char*, const char*);

inline int soap_write_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AssertionType * SOAP_FMAC4 soap_get_saml2__AssertionType(struct soap*, struct saml2__AssertionType *, const char*, const char*);

inline int soap_read_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType *p)
{
	if (p)
	{	::soap_default_saml2__AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType *p)
{
	if (::soap_read_saml2__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__EncryptedElementType_DEFINED
#define SOAP_TYPE_saml2__EncryptedElementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__EncryptedElementType(struct soap*, const char*, int, const struct saml2__EncryptedElementType *, const char*);
SOAP_FMAC3 struct saml2__EncryptedElementType * SOAP_FMAC4 soap_in_saml2__EncryptedElementType(struct soap*, const char*, struct saml2__EncryptedElementType *, const char*);
SOAP_FMAC1 struct saml2__EncryptedElementType * SOAP_FMAC2 soap_instantiate_saml2__EncryptedElementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__EncryptedElementType * soap_new_saml2__EncryptedElementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__EncryptedElementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__EncryptedElementType * soap_new_req_saml2__EncryptedElementType(
	struct soap *soap,
	const struct xenc__EncryptedDataType& xenc__EncryptedData,
	int __sizexenc__EncryptedKey,
	struct xenc__EncryptedKeyType **xenc__EncryptedKey)
{
	struct saml2__EncryptedElementType *_p = ::soap_new_saml2__EncryptedElementType(soap);
	if (_p)
	{	::soap_default_saml2__EncryptedElementType(soap, _p);
		_p->xenc__EncryptedData = xenc__EncryptedData;
		_p->__sizexenc__EncryptedKey = __sizexenc__EncryptedKey;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
	}
	return _p;
}

inline struct saml2__EncryptedElementType * soap_new_set_saml2__EncryptedElementType(
	struct soap *soap,
	const struct xenc__EncryptedDataType& xenc__EncryptedData,
	int __sizexenc__EncryptedKey,
	struct xenc__EncryptedKeyType **xenc__EncryptedKey)
{
	struct saml2__EncryptedElementType *_p = ::soap_new_saml2__EncryptedElementType(soap);
	if (_p)
	{	::soap_default_saml2__EncryptedElementType(soap, _p);
		_p->xenc__EncryptedData = xenc__EncryptedData;
		_p->__sizexenc__EncryptedKey = __sizexenc__EncryptedKey;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__EncryptedElementType * SOAP_FMAC4 soap_get_saml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_read_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *p)
{
	if (p)
	{	::soap_default_saml2__EncryptedElementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__EncryptedElementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__EncryptedElementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *p)
{
	if (::soap_read_saml2__EncryptedElementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__NameIDType_DEFINED
#define SOAP_TYPE_saml2__NameIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__NameIDType(struct soap*, struct saml2__NameIDType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__NameIDType(struct soap*, const char*, int, const struct saml2__NameIDType *, const char*);
SOAP_FMAC3 struct saml2__NameIDType * SOAP_FMAC4 soap_in_saml2__NameIDType(struct soap*, const char*, struct saml2__NameIDType *, const char*);
SOAP_FMAC1 struct saml2__NameIDType * SOAP_FMAC2 soap_instantiate_saml2__NameIDType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__NameIDType * soap_new_saml2__NameIDType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__NameIDType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__NameIDType * soap_new_req_saml2__NameIDType(
	struct soap *soap)
{
	struct saml2__NameIDType *_p = ::soap_new_saml2__NameIDType(soap);
	if (_p)
	{	::soap_default_saml2__NameIDType(soap, _p);
	}
	return _p;
}

inline struct saml2__NameIDType * soap_new_set_saml2__NameIDType(
	struct soap *soap,
	char *__item,
	char *Format,
	char *SPProvidedID,
	char *NameQualifier,
	char *SPNameQualifier)
{
	struct saml2__NameIDType *_p = ::soap_new_saml2__NameIDType(soap);
	if (_p)
	{	::soap_default_saml2__NameIDType(soap, _p);
		_p->__item = __item;
		_p->Format = Format;
		_p->SPProvidedID = SPProvidedID;
		_p->NameQualifier = NameQualifier;
		_p->SPNameQualifier = SPNameQualifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *, const char*, const char*);

inline int soap_write_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__NameIDType * SOAP_FMAC4 soap_get_saml2__NameIDType(struct soap*, struct saml2__NameIDType *, const char*, const char*);

inline int soap_read_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType *p)
{
	if (p)
	{	::soap_default_saml2__NameIDType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__NameIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__NameIDType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType *p)
{
	if (::soap_read_saml2__NameIDType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__BaseIDAbstractType_DEFINED
#define SOAP_TYPE_saml2__BaseIDAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__BaseIDAbstractType(struct soap*, const char*, int, const struct saml2__BaseIDAbstractType *, const char*);
SOAP_FMAC3 struct saml2__BaseIDAbstractType * SOAP_FMAC4 soap_in_saml2__BaseIDAbstractType(struct soap*, const char*, struct saml2__BaseIDAbstractType *, const char*);
SOAP_FMAC1 struct saml2__BaseIDAbstractType * SOAP_FMAC2 soap_instantiate_saml2__BaseIDAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__BaseIDAbstractType * soap_new_saml2__BaseIDAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__BaseIDAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__BaseIDAbstractType * soap_new_req_saml2__BaseIDAbstractType(
	struct soap *soap)
{
	struct saml2__BaseIDAbstractType *_p = ::soap_new_saml2__BaseIDAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__BaseIDAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__BaseIDAbstractType * soap_new_set_saml2__BaseIDAbstractType(
	struct soap *soap,
	char *NameQualifier,
	char *SPNameQualifier)
{
	struct saml2__BaseIDAbstractType *_p = ::soap_new_saml2__BaseIDAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__BaseIDAbstractType(soap, _p);
		_p->NameQualifier = NameQualifier;
		_p->SPNameQualifier = SPNameQualifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_write_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__BaseIDAbstractType * SOAP_FMAC4 soap_get_saml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_read_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *p)
{
	if (p)
	{	::soap_default_saml2__BaseIDAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__BaseIDAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__BaseIDAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *p)
{
	if (::soap_read_saml2__BaseIDAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _saml1__Attribute is a typedef synonym of saml1__AttributeType */

#ifndef SOAP_TYPE__saml1__Attribute_DEFINED
#define SOAP_TYPE__saml1__Attribute_DEFINED

#define soap_default__saml1__Attribute soap_default_saml1__AttributeType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *);

#define soap_serialize__saml1__Attribute soap_serialize_saml1__AttributeType


#define soap__saml1__Attribute2s soap_saml1__AttributeType2s


#define soap_out__saml1__Attribute soap_out_saml1__AttributeType


#define soap_s2_saml1__Attribute soap_s2saml1__AttributeType


#define soap_in__saml1__Attribute soap_in_saml1__AttributeType


#define soap_instantiate__saml1__Attribute soap_instantiate_saml1__AttributeType


#define soap_new__saml1__Attribute soap_new_saml1__AttributeType


#define soap_new_req__saml1__Attribute soap_new_req_saml1__AttributeType


#define soap_new_set__saml1__Attribute soap_new_set_saml1__AttributeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Attribute(struct soap*, const struct saml1__AttributeType *, const char*, const char*);

inline int soap_write__saml1__Attribute(struct soap *soap, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Attribute(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Attribute(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Attribute(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Attribute soap_get_saml1__AttributeType


#define soap_read__saml1__Attribute soap_read_saml1__AttributeType


#define soap_GET__saml1__Attribute soap_GET_saml1__AttributeType


#define soap_POST_recv__saml1__Attribute soap_POST_recv_saml1__AttributeType

#endif
/* _saml1__AttributeDesignator is a typedef synonym of saml1__AttributeDesignatorType */

#ifndef SOAP_TYPE__saml1__AttributeDesignator_DEFINED
#define SOAP_TYPE__saml1__AttributeDesignator_DEFINED

#define soap_default__saml1__AttributeDesignator soap_default_saml1__AttributeDesignatorType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *);

#define soap_serialize__saml1__AttributeDesignator soap_serialize_saml1__AttributeDesignatorType


#define soap__saml1__AttributeDesignator2s soap_saml1__AttributeDesignatorType2s


#define soap_out__saml1__AttributeDesignator soap_out_saml1__AttributeDesignatorType


#define soap_s2_saml1__AttributeDesignator soap_s2saml1__AttributeDesignatorType


#define soap_in__saml1__AttributeDesignator soap_in_saml1__AttributeDesignatorType


#define soap_instantiate__saml1__AttributeDesignator soap_instantiate_saml1__AttributeDesignatorType


#define soap_new__saml1__AttributeDesignator soap_new_saml1__AttributeDesignatorType


#define soap_new_req__saml1__AttributeDesignator soap_new_req_saml1__AttributeDesignatorType


#define soap_new_set__saml1__AttributeDesignator soap_new_set_saml1__AttributeDesignatorType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AttributeDesignator(struct soap*, const struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_write__saml1__AttributeDesignator(struct soap *soap, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AttributeDesignator(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AttributeDesignator(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AttributeDesignator(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AttributeDesignator soap_get_saml1__AttributeDesignatorType


#define soap_read__saml1__AttributeDesignator soap_read_saml1__AttributeDesignatorType


#define soap_GET__saml1__AttributeDesignator soap_GET_saml1__AttributeDesignatorType


#define soap_POST_recv__saml1__AttributeDesignator soap_POST_recv_saml1__AttributeDesignatorType

#endif
/* _saml1__AttributeStatement is a typedef synonym of saml1__AttributeStatementType */

#ifndef SOAP_TYPE__saml1__AttributeStatement_DEFINED
#define SOAP_TYPE__saml1__AttributeStatement_DEFINED

#define soap_default__saml1__AttributeStatement soap_default_saml1__AttributeStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *);

#define soap_serialize__saml1__AttributeStatement soap_serialize_saml1__AttributeStatementType


#define soap__saml1__AttributeStatement2s soap_saml1__AttributeStatementType2s


#define soap_out__saml1__AttributeStatement soap_out_saml1__AttributeStatementType


#define soap_s2_saml1__AttributeStatement soap_s2saml1__AttributeStatementType


#define soap_in__saml1__AttributeStatement soap_in_saml1__AttributeStatementType


#define soap_instantiate__saml1__AttributeStatement soap_instantiate_saml1__AttributeStatementType


#define soap_new__saml1__AttributeStatement soap_new_saml1__AttributeStatementType


#define soap_new_req__saml1__AttributeStatement soap_new_req_saml1__AttributeStatementType


#define soap_new_set__saml1__AttributeStatement soap_new_set_saml1__AttributeStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AttributeStatement(struct soap*, const struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_write__saml1__AttributeStatement(struct soap *soap, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AttributeStatement(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AttributeStatement(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AttributeStatement(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AttributeStatement soap_get_saml1__AttributeStatementType


#define soap_read__saml1__AttributeStatement soap_read_saml1__AttributeStatementType


#define soap_GET__saml1__AttributeStatement soap_GET_saml1__AttributeStatementType


#define soap_POST_recv__saml1__AttributeStatement soap_POST_recv_saml1__AttributeStatementType

#endif
/* _saml1__Evidence is a typedef synonym of saml1__EvidenceType */

#ifndef SOAP_TYPE__saml1__Evidence_DEFINED
#define SOAP_TYPE__saml1__Evidence_DEFINED

#define soap_default__saml1__Evidence soap_default_saml1__EvidenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *);

#define soap_serialize__saml1__Evidence soap_serialize_saml1__EvidenceType


#define soap__saml1__Evidence2s soap_saml1__EvidenceType2s


#define soap_out__saml1__Evidence soap_out_saml1__EvidenceType


#define soap_s2_saml1__Evidence soap_s2saml1__EvidenceType


#define soap_in__saml1__Evidence soap_in_saml1__EvidenceType


#define soap_instantiate__saml1__Evidence soap_instantiate_saml1__EvidenceType


#define soap_new__saml1__Evidence soap_new_saml1__EvidenceType


#define soap_new_req__saml1__Evidence soap_new_req_saml1__EvidenceType


#define soap_new_set__saml1__Evidence soap_new_set_saml1__EvidenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Evidence(struct soap*, const struct saml1__EvidenceType *, const char*, const char*);

inline int soap_write__saml1__Evidence(struct soap *soap, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Evidence(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Evidence(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Evidence(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Evidence soap_get_saml1__EvidenceType


#define soap_read__saml1__Evidence soap_read_saml1__EvidenceType


#define soap_GET__saml1__Evidence soap_GET_saml1__EvidenceType


#define soap_POST_recv__saml1__Evidence soap_POST_recv_saml1__EvidenceType

#endif
/* _saml1__Action is a typedef synonym of saml1__ActionType */

#ifndef SOAP_TYPE__saml1__Action_DEFINED
#define SOAP_TYPE__saml1__Action_DEFINED

#define soap_default__saml1__Action soap_default_saml1__ActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ActionType(struct soap*, const struct saml1__ActionType *);

#define soap_serialize__saml1__Action soap_serialize_saml1__ActionType


#define soap__saml1__Action2s soap_saml1__ActionType2s


#define soap_out__saml1__Action soap_out_saml1__ActionType


#define soap_s2_saml1__Action soap_s2saml1__ActionType


#define soap_in__saml1__Action soap_in_saml1__ActionType


#define soap_instantiate__saml1__Action soap_instantiate_saml1__ActionType


#define soap_new__saml1__Action soap_new_saml1__ActionType


#define soap_new_req__saml1__Action soap_new_req_saml1__ActionType


#define soap_new_set__saml1__Action soap_new_set_saml1__ActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Action(struct soap*, const struct saml1__ActionType *, const char*, const char*);

inline int soap_write__saml1__Action(struct soap *soap, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Action(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Action(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Action(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Action soap_get_saml1__ActionType


#define soap_read__saml1__Action soap_read_saml1__ActionType


#define soap_GET__saml1__Action soap_GET_saml1__ActionType


#define soap_POST_recv__saml1__Action soap_POST_recv_saml1__ActionType

#endif
/* _saml1__AuthorizationDecisionStatement is a typedef synonym of saml1__AuthorizationDecisionStatementType */

#ifndef SOAP_TYPE__saml1__AuthorizationDecisionStatement_DEFINED
#define SOAP_TYPE__saml1__AuthorizationDecisionStatement_DEFINED

#define soap_default__saml1__AuthorizationDecisionStatement soap_default_saml1__AuthorizationDecisionStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *);

#define soap_serialize__saml1__AuthorizationDecisionStatement soap_serialize_saml1__AuthorizationDecisionStatementType


#define soap__saml1__AuthorizationDecisionStatement2s soap_saml1__AuthorizationDecisionStatementType2s


#define soap_out__saml1__AuthorizationDecisionStatement soap_out_saml1__AuthorizationDecisionStatementType


#define soap_s2_saml1__AuthorizationDecisionStatement soap_s2saml1__AuthorizationDecisionStatementType


#define soap_in__saml1__AuthorizationDecisionStatement soap_in_saml1__AuthorizationDecisionStatementType


#define soap_instantiate__saml1__AuthorizationDecisionStatement soap_instantiate_saml1__AuthorizationDecisionStatementType


#define soap_new__saml1__AuthorizationDecisionStatement soap_new_saml1__AuthorizationDecisionStatementType


#define soap_new_req__saml1__AuthorizationDecisionStatement soap_new_req_saml1__AuthorizationDecisionStatementType


#define soap_new_set__saml1__AuthorizationDecisionStatement soap_new_set_saml1__AuthorizationDecisionStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthorizationDecisionStatement(struct soap*, const struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_write__saml1__AuthorizationDecisionStatement(struct soap *soap, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AuthorizationDecisionStatement(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AuthorizationDecisionStatement(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AuthorizationDecisionStatement(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AuthorizationDecisionStatement soap_get_saml1__AuthorizationDecisionStatementType


#define soap_read__saml1__AuthorizationDecisionStatement soap_read_saml1__AuthorizationDecisionStatementType


#define soap_GET__saml1__AuthorizationDecisionStatement soap_GET_saml1__AuthorizationDecisionStatementType


#define soap_POST_recv__saml1__AuthorizationDecisionStatement soap_POST_recv_saml1__AuthorizationDecisionStatementType

#endif
/* _saml1__AuthorityBinding is a typedef synonym of saml1__AuthorityBindingType */

#ifndef SOAP_TYPE__saml1__AuthorityBinding_DEFINED
#define SOAP_TYPE__saml1__AuthorityBinding_DEFINED

#define soap_default__saml1__AuthorityBinding soap_default_saml1__AuthorityBindingType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *);

#define soap_serialize__saml1__AuthorityBinding soap_serialize_saml1__AuthorityBindingType


#define soap__saml1__AuthorityBinding2s soap_saml1__AuthorityBindingType2s


#define soap_out__saml1__AuthorityBinding soap_out_saml1__AuthorityBindingType


#define soap_s2_saml1__AuthorityBinding soap_s2saml1__AuthorityBindingType


#define soap_in__saml1__AuthorityBinding soap_in_saml1__AuthorityBindingType


#define soap_instantiate__saml1__AuthorityBinding soap_instantiate_saml1__AuthorityBindingType


#define soap_new__saml1__AuthorityBinding soap_new_saml1__AuthorityBindingType


#define soap_new_req__saml1__AuthorityBinding soap_new_req_saml1__AuthorityBindingType


#define soap_new_set__saml1__AuthorityBinding soap_new_set_saml1__AuthorityBindingType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthorityBinding(struct soap*, const struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_write__saml1__AuthorityBinding(struct soap *soap, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AuthorityBinding(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AuthorityBinding(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AuthorityBinding(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AuthorityBinding soap_get_saml1__AuthorityBindingType


#define soap_read__saml1__AuthorityBinding soap_read_saml1__AuthorityBindingType


#define soap_GET__saml1__AuthorityBinding soap_GET_saml1__AuthorityBindingType


#define soap_POST_recv__saml1__AuthorityBinding soap_POST_recv_saml1__AuthorityBindingType

#endif
/* _saml1__SubjectLocality is a typedef synonym of saml1__SubjectLocalityType */

#ifndef SOAP_TYPE__saml1__SubjectLocality_DEFINED
#define SOAP_TYPE__saml1__SubjectLocality_DEFINED

#define soap_default__saml1__SubjectLocality soap_default_saml1__SubjectLocalityType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *);

#define soap_serialize__saml1__SubjectLocality soap_serialize_saml1__SubjectLocalityType


#define soap__saml1__SubjectLocality2s soap_saml1__SubjectLocalityType2s


#define soap_out__saml1__SubjectLocality soap_out_saml1__SubjectLocalityType


#define soap_s2_saml1__SubjectLocality soap_s2saml1__SubjectLocalityType


#define soap_in__saml1__SubjectLocality soap_in_saml1__SubjectLocalityType


#define soap_instantiate__saml1__SubjectLocality soap_instantiate_saml1__SubjectLocalityType


#define soap_new__saml1__SubjectLocality soap_new_saml1__SubjectLocalityType


#define soap_new_req__saml1__SubjectLocality soap_new_req_saml1__SubjectLocalityType


#define soap_new_set__saml1__SubjectLocality soap_new_set_saml1__SubjectLocalityType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectLocality(struct soap*, const struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_write__saml1__SubjectLocality(struct soap *soap, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__SubjectLocality(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__SubjectLocality(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__SubjectLocality(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__SubjectLocality soap_get_saml1__SubjectLocalityType


#define soap_read__saml1__SubjectLocality soap_read_saml1__SubjectLocalityType


#define soap_GET__saml1__SubjectLocality soap_GET_saml1__SubjectLocalityType


#define soap_POST_recv__saml1__SubjectLocality soap_POST_recv_saml1__SubjectLocalityType

#endif
/* _saml1__AuthenticationStatement is a typedef synonym of saml1__AuthenticationStatementType */

#ifndef SOAP_TYPE__saml1__AuthenticationStatement_DEFINED
#define SOAP_TYPE__saml1__AuthenticationStatement_DEFINED

#define soap_default__saml1__AuthenticationStatement soap_default_saml1__AuthenticationStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *);

#define soap_serialize__saml1__AuthenticationStatement soap_serialize_saml1__AuthenticationStatementType


#define soap__saml1__AuthenticationStatement2s soap_saml1__AuthenticationStatementType2s


#define soap_out__saml1__AuthenticationStatement soap_out_saml1__AuthenticationStatementType


#define soap_s2_saml1__AuthenticationStatement soap_s2saml1__AuthenticationStatementType


#define soap_in__saml1__AuthenticationStatement soap_in_saml1__AuthenticationStatementType


#define soap_instantiate__saml1__AuthenticationStatement soap_instantiate_saml1__AuthenticationStatementType


#define soap_new__saml1__AuthenticationStatement soap_new_saml1__AuthenticationStatementType


#define soap_new_req__saml1__AuthenticationStatement soap_new_req_saml1__AuthenticationStatementType


#define soap_new_set__saml1__AuthenticationStatement soap_new_set_saml1__AuthenticationStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthenticationStatement(struct soap*, const struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_write__saml1__AuthenticationStatement(struct soap *soap, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AuthenticationStatement(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AuthenticationStatement(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AuthenticationStatement(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AuthenticationStatement soap_get_saml1__AuthenticationStatementType


#define soap_read__saml1__AuthenticationStatement soap_read_saml1__AuthenticationStatementType


#define soap_GET__saml1__AuthenticationStatement soap_GET_saml1__AuthenticationStatementType


#define soap_POST_recv__saml1__AuthenticationStatement soap_POST_recv_saml1__AuthenticationStatementType

#endif
/* _saml1__SubjectConfirmation is a typedef synonym of saml1__SubjectConfirmationType */

#ifndef SOAP_TYPE__saml1__SubjectConfirmation_DEFINED
#define SOAP_TYPE__saml1__SubjectConfirmation_DEFINED

#define soap_default__saml1__SubjectConfirmation soap_default_saml1__SubjectConfirmationType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *);

#define soap_serialize__saml1__SubjectConfirmation soap_serialize_saml1__SubjectConfirmationType


#define soap__saml1__SubjectConfirmation2s soap_saml1__SubjectConfirmationType2s


#define soap_out__saml1__SubjectConfirmation soap_out_saml1__SubjectConfirmationType


#define soap_s2_saml1__SubjectConfirmation soap_s2saml1__SubjectConfirmationType


#define soap_in__saml1__SubjectConfirmation soap_in_saml1__SubjectConfirmationType


#define soap_instantiate__saml1__SubjectConfirmation soap_instantiate_saml1__SubjectConfirmationType


#define soap_new__saml1__SubjectConfirmation soap_new_saml1__SubjectConfirmationType


#define soap_new_req__saml1__SubjectConfirmation soap_new_req_saml1__SubjectConfirmationType


#define soap_new_set__saml1__SubjectConfirmation soap_new_set_saml1__SubjectConfirmationType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectConfirmation(struct soap*, const struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_write__saml1__SubjectConfirmation(struct soap *soap, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__SubjectConfirmation(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__SubjectConfirmation(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__SubjectConfirmation(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__SubjectConfirmation soap_get_saml1__SubjectConfirmationType


#define soap_read__saml1__SubjectConfirmation soap_read_saml1__SubjectConfirmationType


#define soap_GET__saml1__SubjectConfirmation soap_GET_saml1__SubjectConfirmationType


#define soap_POST_recv__saml1__SubjectConfirmation soap_POST_recv_saml1__SubjectConfirmationType

#endif
/* _saml1__NameIdentifier is a typedef synonym of saml1__NameIdentifierType */

#ifndef SOAP_TYPE__saml1__NameIdentifier_DEFINED
#define SOAP_TYPE__saml1__NameIdentifier_DEFINED

#define soap_default__saml1__NameIdentifier soap_default_saml1__NameIdentifierType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *);

#define soap_serialize__saml1__NameIdentifier soap_serialize_saml1__NameIdentifierType


#define soap__saml1__NameIdentifier2s soap_saml1__NameIdentifierType2s


#define soap_out__saml1__NameIdentifier soap_out_saml1__NameIdentifierType


#define soap_s2_saml1__NameIdentifier soap_s2saml1__NameIdentifierType


#define soap_in__saml1__NameIdentifier soap_in_saml1__NameIdentifierType


#define soap_instantiate__saml1__NameIdentifier soap_instantiate_saml1__NameIdentifierType


#define soap_new__saml1__NameIdentifier soap_new_saml1__NameIdentifierType


#define soap_new_req__saml1__NameIdentifier soap_new_req_saml1__NameIdentifierType


#define soap_new_set__saml1__NameIdentifier soap_new_set_saml1__NameIdentifierType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__NameIdentifier(struct soap*, const struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_write__saml1__NameIdentifier(struct soap *soap, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__NameIdentifier(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__NameIdentifier(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__NameIdentifier(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__NameIdentifier soap_get_saml1__NameIdentifierType


#define soap_read__saml1__NameIdentifier soap_read_saml1__NameIdentifierType


#define soap_GET__saml1__NameIdentifier soap_GET_saml1__NameIdentifierType


#define soap_POST_recv__saml1__NameIdentifier soap_POST_recv_saml1__NameIdentifierType

#endif
/* _saml1__Subject is a typedef synonym of saml1__SubjectType */

#ifndef SOAP_TYPE__saml1__Subject_DEFINED
#define SOAP_TYPE__saml1__Subject_DEFINED

#define soap_default__saml1__Subject soap_default_saml1__SubjectType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *);

#define soap_serialize__saml1__Subject soap_serialize_saml1__SubjectType


#define soap__saml1__Subject2s soap_saml1__SubjectType2s


#define soap_out__saml1__Subject soap_out_saml1__SubjectType


#define soap_s2_saml1__Subject soap_s2saml1__SubjectType


#define soap_in__saml1__Subject soap_in_saml1__SubjectType


#define soap_instantiate__saml1__Subject soap_instantiate_saml1__SubjectType


#define soap_new__saml1__Subject soap_new_saml1__SubjectType


#define soap_new_req__saml1__Subject soap_new_req_saml1__SubjectType


#define soap_new_set__saml1__Subject soap_new_set_saml1__SubjectType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Subject(struct soap*, const struct saml1__SubjectType *, const char*, const char*);

inline int soap_write__saml1__Subject(struct soap *soap, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Subject(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Subject(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Subject(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Subject soap_get_saml1__SubjectType


#define soap_read__saml1__Subject soap_read_saml1__SubjectType


#define soap_GET__saml1__Subject soap_GET_saml1__SubjectType


#define soap_POST_recv__saml1__Subject soap_POST_recv_saml1__SubjectType

#endif
/* _saml1__SubjectStatement is a typedef synonym of saml1__SubjectStatementAbstractType */

#ifndef SOAP_TYPE__saml1__SubjectStatement_DEFINED
#define SOAP_TYPE__saml1__SubjectStatement_DEFINED

#define soap_default__saml1__SubjectStatement soap_default_saml1__SubjectStatementAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *);

#define soap_serialize__saml1__SubjectStatement soap_serialize_saml1__SubjectStatementAbstractType


#define soap__saml1__SubjectStatement2s soap_saml1__SubjectStatementAbstractType2s


#define soap_out__saml1__SubjectStatement soap_out_saml1__SubjectStatementAbstractType


#define soap_s2_saml1__SubjectStatement soap_s2saml1__SubjectStatementAbstractType


#define soap_in__saml1__SubjectStatement soap_in_saml1__SubjectStatementAbstractType


#define soap_instantiate__saml1__SubjectStatement soap_instantiate_saml1__SubjectStatementAbstractType


#define soap_new__saml1__SubjectStatement soap_new_saml1__SubjectStatementAbstractType


#define soap_new_req__saml1__SubjectStatement soap_new_req_saml1__SubjectStatementAbstractType


#define soap_new_set__saml1__SubjectStatement soap_new_set_saml1__SubjectStatementAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectStatement(struct soap*, const struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_write__saml1__SubjectStatement(struct soap *soap, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__SubjectStatement(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__SubjectStatement(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__SubjectStatement(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__SubjectStatement soap_get_saml1__SubjectStatementAbstractType


#define soap_read__saml1__SubjectStatement soap_read_saml1__SubjectStatementAbstractType


#define soap_GET__saml1__SubjectStatement soap_GET_saml1__SubjectStatementAbstractType


#define soap_POST_recv__saml1__SubjectStatement soap_POST_recv_saml1__SubjectStatementAbstractType

#endif
/* _saml1__Statement is a typedef synonym of saml1__StatementAbstractType */

#ifndef SOAP_TYPE__saml1__Statement_DEFINED
#define SOAP_TYPE__saml1__Statement_DEFINED

#define soap_default__saml1__Statement soap_default_saml1__StatementAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *);

#define soap_serialize__saml1__Statement soap_serialize_saml1__StatementAbstractType


#define soap__saml1__Statement2s soap_saml1__StatementAbstractType2s


#define soap_out__saml1__Statement soap_out_saml1__StatementAbstractType


#define soap_s2_saml1__Statement soap_s2saml1__StatementAbstractType


#define soap_in__saml1__Statement soap_in_saml1__StatementAbstractType


#define soap_instantiate__saml1__Statement soap_instantiate_saml1__StatementAbstractType


#define soap_new__saml1__Statement soap_new_saml1__StatementAbstractType


#define soap_new_req__saml1__Statement soap_new_req_saml1__StatementAbstractType


#define soap_new_set__saml1__Statement soap_new_set_saml1__StatementAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Statement(struct soap*, const struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_write__saml1__Statement(struct soap *soap, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Statement(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Statement(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Statement(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Statement soap_get_saml1__StatementAbstractType


#define soap_read__saml1__Statement soap_read_saml1__StatementAbstractType


#define soap_GET__saml1__Statement soap_GET_saml1__StatementAbstractType


#define soap_POST_recv__saml1__Statement soap_POST_recv_saml1__StatementAbstractType

#endif
/* _saml1__Advice is a typedef synonym of saml1__AdviceType */

#ifndef SOAP_TYPE__saml1__Advice_DEFINED
#define SOAP_TYPE__saml1__Advice_DEFINED

#define soap_default__saml1__Advice soap_default_saml1__AdviceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *);

#define soap_serialize__saml1__Advice soap_serialize_saml1__AdviceType


#define soap__saml1__Advice2s soap_saml1__AdviceType2s


#define soap_out__saml1__Advice soap_out_saml1__AdviceType


#define soap_s2_saml1__Advice soap_s2saml1__AdviceType


#define soap_in__saml1__Advice soap_in_saml1__AdviceType


#define soap_instantiate__saml1__Advice soap_instantiate_saml1__AdviceType


#define soap_new__saml1__Advice soap_new_saml1__AdviceType


#define soap_new_req__saml1__Advice soap_new_req_saml1__AdviceType


#define soap_new_set__saml1__Advice soap_new_set_saml1__AdviceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Advice(struct soap*, const struct saml1__AdviceType *, const char*, const char*);

inline int soap_write__saml1__Advice(struct soap *soap, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Advice(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Advice(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Advice(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Advice soap_get_saml1__AdviceType


#define soap_read__saml1__Advice soap_read_saml1__AdviceType


#define soap_GET__saml1__Advice soap_GET_saml1__AdviceType


#define soap_POST_recv__saml1__Advice soap_POST_recv_saml1__AdviceType

#endif
/* _saml1__DoNotCacheCondition is a typedef synonym of saml1__DoNotCacheConditionType */

#ifndef SOAP_TYPE__saml1__DoNotCacheCondition_DEFINED
#define SOAP_TYPE__saml1__DoNotCacheCondition_DEFINED

#define soap_default__saml1__DoNotCacheCondition soap_default_saml1__DoNotCacheConditionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *);

#define soap_serialize__saml1__DoNotCacheCondition soap_serialize_saml1__DoNotCacheConditionType


#define soap__saml1__DoNotCacheCondition2s soap_saml1__DoNotCacheConditionType2s


#define soap_out__saml1__DoNotCacheCondition soap_out_saml1__DoNotCacheConditionType


#define soap_s2_saml1__DoNotCacheCondition soap_s2saml1__DoNotCacheConditionType


#define soap_in__saml1__DoNotCacheCondition soap_in_saml1__DoNotCacheConditionType


#define soap_instantiate__saml1__DoNotCacheCondition soap_instantiate_saml1__DoNotCacheConditionType


#define soap_new__saml1__DoNotCacheCondition soap_new_saml1__DoNotCacheConditionType


#define soap_new_req__saml1__DoNotCacheCondition soap_new_req_saml1__DoNotCacheConditionType


#define soap_new_set__saml1__DoNotCacheCondition soap_new_set_saml1__DoNotCacheConditionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__DoNotCacheCondition(struct soap*, const struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_write__saml1__DoNotCacheCondition(struct soap *soap, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__DoNotCacheCondition(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__DoNotCacheCondition(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__DoNotCacheCondition(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__DoNotCacheCondition soap_get_saml1__DoNotCacheConditionType


#define soap_read__saml1__DoNotCacheCondition soap_read_saml1__DoNotCacheConditionType


#define soap_GET__saml1__DoNotCacheCondition soap_GET_saml1__DoNotCacheConditionType


#define soap_POST_recv__saml1__DoNotCacheCondition soap_POST_recv_saml1__DoNotCacheConditionType

#endif
/* _saml1__AudienceRestrictionCondition is a typedef synonym of saml1__AudienceRestrictionConditionType */

#ifndef SOAP_TYPE__saml1__AudienceRestrictionCondition_DEFINED
#define SOAP_TYPE__saml1__AudienceRestrictionCondition_DEFINED

#define soap_default__saml1__AudienceRestrictionCondition soap_default_saml1__AudienceRestrictionConditionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *);

#define soap_serialize__saml1__AudienceRestrictionCondition soap_serialize_saml1__AudienceRestrictionConditionType


#define soap__saml1__AudienceRestrictionCondition2s soap_saml1__AudienceRestrictionConditionType2s


#define soap_out__saml1__AudienceRestrictionCondition soap_out_saml1__AudienceRestrictionConditionType


#define soap_s2_saml1__AudienceRestrictionCondition soap_s2saml1__AudienceRestrictionConditionType


#define soap_in__saml1__AudienceRestrictionCondition soap_in_saml1__AudienceRestrictionConditionType


#define soap_instantiate__saml1__AudienceRestrictionCondition soap_instantiate_saml1__AudienceRestrictionConditionType


#define soap_new__saml1__AudienceRestrictionCondition soap_new_saml1__AudienceRestrictionConditionType


#define soap_new_req__saml1__AudienceRestrictionCondition soap_new_req_saml1__AudienceRestrictionConditionType


#define soap_new_set__saml1__AudienceRestrictionCondition soap_new_set_saml1__AudienceRestrictionConditionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AudienceRestrictionCondition(struct soap*, const struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_write__saml1__AudienceRestrictionCondition(struct soap *soap, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AudienceRestrictionCondition(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AudienceRestrictionCondition(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AudienceRestrictionCondition(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AudienceRestrictionCondition soap_get_saml1__AudienceRestrictionConditionType


#define soap_read__saml1__AudienceRestrictionCondition soap_read_saml1__AudienceRestrictionConditionType


#define soap_GET__saml1__AudienceRestrictionCondition soap_GET_saml1__AudienceRestrictionConditionType


#define soap_POST_recv__saml1__AudienceRestrictionCondition soap_POST_recv_saml1__AudienceRestrictionConditionType

#endif
/* _saml1__Condition is a typedef synonym of saml1__ConditionAbstractType */

#ifndef SOAP_TYPE__saml1__Condition_DEFINED
#define SOAP_TYPE__saml1__Condition_DEFINED

#define soap_default__saml1__Condition soap_default_saml1__ConditionAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *);

#define soap_serialize__saml1__Condition soap_serialize_saml1__ConditionAbstractType


#define soap__saml1__Condition2s soap_saml1__ConditionAbstractType2s


#define soap_out__saml1__Condition soap_out_saml1__ConditionAbstractType


#define soap_s2_saml1__Condition soap_s2saml1__ConditionAbstractType


#define soap_in__saml1__Condition soap_in_saml1__ConditionAbstractType


#define soap_instantiate__saml1__Condition soap_instantiate_saml1__ConditionAbstractType


#define soap_new__saml1__Condition soap_new_saml1__ConditionAbstractType


#define soap_new_req__saml1__Condition soap_new_req_saml1__ConditionAbstractType


#define soap_new_set__saml1__Condition soap_new_set_saml1__ConditionAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Condition(struct soap*, const struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_write__saml1__Condition(struct soap *soap, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Condition(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Condition(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Condition(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Condition soap_get_saml1__ConditionAbstractType


#define soap_read__saml1__Condition soap_read_saml1__ConditionAbstractType


#define soap_GET__saml1__Condition soap_GET_saml1__ConditionAbstractType


#define soap_POST_recv__saml1__Condition soap_POST_recv_saml1__ConditionAbstractType

#endif
/* _saml1__Conditions is a typedef synonym of saml1__ConditionsType */

#ifndef SOAP_TYPE__saml1__Conditions_DEFINED
#define SOAP_TYPE__saml1__Conditions_DEFINED

#define soap_default__saml1__Conditions soap_default_saml1__ConditionsType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *);

#define soap_serialize__saml1__Conditions soap_serialize_saml1__ConditionsType


#define soap__saml1__Conditions2s soap_saml1__ConditionsType2s


#define soap_out__saml1__Conditions soap_out_saml1__ConditionsType


#define soap_s2_saml1__Conditions soap_s2saml1__ConditionsType


#define soap_in__saml1__Conditions soap_in_saml1__ConditionsType


#define soap_instantiate__saml1__Conditions soap_instantiate_saml1__ConditionsType


#define soap_new__saml1__Conditions soap_new_saml1__ConditionsType


#define soap_new_req__saml1__Conditions soap_new_req_saml1__ConditionsType


#define soap_new_set__saml1__Conditions soap_new_set_saml1__ConditionsType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Conditions(struct soap*, const struct saml1__ConditionsType *, const char*, const char*);

inline int soap_write__saml1__Conditions(struct soap *soap, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Conditions(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Conditions(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Conditions(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Conditions soap_get_saml1__ConditionsType


#define soap_read__saml1__Conditions soap_read_saml1__ConditionsType


#define soap_GET__saml1__Conditions soap_GET_saml1__ConditionsType


#define soap_POST_recv__saml1__Conditions soap_POST_recv_saml1__ConditionsType

#endif
/* _saml1__Assertion is a typedef synonym of saml1__AssertionType */

#ifndef SOAP_TYPE__saml1__Assertion_DEFINED
#define SOAP_TYPE__saml1__Assertion_DEFINED

#define soap_default__saml1__Assertion soap_default_saml1__AssertionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *);

#define soap_serialize__saml1__Assertion soap_serialize_saml1__AssertionType


#define soap__saml1__Assertion2s soap_saml1__AssertionType2s


#define soap_out__saml1__Assertion soap_out_saml1__AssertionType


#define soap_s2_saml1__Assertion soap_s2saml1__AssertionType


#define soap_in__saml1__Assertion soap_in_saml1__AssertionType


#define soap_instantiate__saml1__Assertion soap_instantiate_saml1__AssertionType


#define soap_new__saml1__Assertion soap_new_saml1__AssertionType


#define soap_new_req__saml1__Assertion soap_new_req_saml1__AssertionType


#define soap_new_set__saml1__Assertion soap_new_set_saml1__AssertionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Assertion(struct soap*, const struct saml1__AssertionType *, const char*, const char*);

inline int soap_write__saml1__Assertion(struct soap *soap, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Assertion(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Assertion(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Assertion(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Assertion soap_get_saml1__AssertionType


#define soap_read__saml1__Assertion soap_read_saml1__AssertionType


#define soap_GET__saml1__Assertion soap_GET_saml1__AssertionType


#define soap_POST_recv__saml1__Assertion soap_POST_recv_saml1__AssertionType

#endif

#ifndef SOAP_TYPE___saml1__union_EvidenceType_DEFINED
#define SOAP_TYPE___saml1__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_EvidenceType(struct soap*, const struct __saml1__union_EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_EvidenceType(struct soap*, const char*, int, const struct __saml1__union_EvidenceType *, const char*);
SOAP_FMAC3 struct __saml1__union_EvidenceType * SOAP_FMAC4 soap_in___saml1__union_EvidenceType(struct soap*, const char*, struct __saml1__union_EvidenceType *, const char*);
SOAP_FMAC1 struct __saml1__union_EvidenceType * SOAP_FMAC2 soap_instantiate___saml1__union_EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_EvidenceType * soap_new___saml1__union_EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_EvidenceType * soap_new_req___saml1__union_EvidenceType(
	struct soap *soap)
{
	struct __saml1__union_EvidenceType *_p = ::soap_new___saml1__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml1__union_EvidenceType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_EvidenceType * soap_new_set___saml1__union_EvidenceType(
	struct soap *soap,
	char *saml1__AssertionIDReference,
	struct saml1__AssertionType *saml1__Assertion)
{
	struct __saml1__union_EvidenceType *_p = ::soap_new___saml1__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml1__union_EvidenceType(soap, _p);
		_p->saml1__AssertionIDReference = saml1__AssertionIDReference;
		_p->saml1__Assertion = saml1__Assertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_EvidenceType(struct soap*, const struct __saml1__union_EvidenceType *, const char*, const char*);

inline int soap_write___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_EvidenceType * SOAP_FMAC4 soap_get___saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *, const char*, const char*);

inline int soap_read___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *p)
{
	if (p)
	{	::soap_default___saml1__union_EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *p)
{
	if (::soap_read___saml1__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml1__union_AdviceType_DEFINED
#define SOAP_TYPE___saml1__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_AdviceType(struct soap*, const struct __saml1__union_AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_AdviceType(struct soap*, const char*, int, const struct __saml1__union_AdviceType *, const char*);
SOAP_FMAC3 struct __saml1__union_AdviceType * SOAP_FMAC4 soap_in___saml1__union_AdviceType(struct soap*, const char*, struct __saml1__union_AdviceType *, const char*);
SOAP_FMAC1 struct __saml1__union_AdviceType * SOAP_FMAC2 soap_instantiate___saml1__union_AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_AdviceType * soap_new___saml1__union_AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_AdviceType * soap_new_req___saml1__union_AdviceType(
	struct soap *soap)
{
	struct __saml1__union_AdviceType *_p = ::soap_new___saml1__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml1__union_AdviceType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_AdviceType * soap_new_set___saml1__union_AdviceType(
	struct soap *soap,
	char *saml1__AssertionIDReference,
	struct saml1__AssertionType *saml1__Assertion)
{
	struct __saml1__union_AdviceType *_p = ::soap_new___saml1__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml1__union_AdviceType(soap, _p);
		_p->saml1__AssertionIDReference = saml1__AssertionIDReference;
		_p->saml1__Assertion = saml1__Assertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_AdviceType(struct soap*, const struct __saml1__union_AdviceType *, const char*, const char*);

inline int soap_write___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_AdviceType * SOAP_FMAC4 soap_get___saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *, const char*, const char*);

inline int soap_read___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *p)
{
	if (p)
	{	::soap_default___saml1__union_AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *p)
{
	if (::soap_read___saml1__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml1__union_ConditionsType_DEFINED
#define SOAP_TYPE___saml1__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_ConditionsType(struct soap*, const struct __saml1__union_ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_ConditionsType(struct soap*, const char*, int, const struct __saml1__union_ConditionsType *, const char*);
SOAP_FMAC3 struct __saml1__union_ConditionsType * SOAP_FMAC4 soap_in___saml1__union_ConditionsType(struct soap*, const char*, struct __saml1__union_ConditionsType *, const char*);
SOAP_FMAC1 struct __saml1__union_ConditionsType * SOAP_FMAC2 soap_instantiate___saml1__union_ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_ConditionsType * soap_new___saml1__union_ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_ConditionsType * soap_new_req___saml1__union_ConditionsType(
	struct soap *soap)
{
	struct __saml1__union_ConditionsType *_p = ::soap_new___saml1__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml1__union_ConditionsType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_ConditionsType * soap_new_set___saml1__union_ConditionsType(
	struct soap *soap,
	struct saml1__AudienceRestrictionConditionType *saml1__AudienceRestrictionCondition,
	struct saml1__DoNotCacheConditionType *saml1__DoNotCacheCondition,
	struct saml1__ConditionAbstractType *saml1__Condition)
{
	struct __saml1__union_ConditionsType *_p = ::soap_new___saml1__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml1__union_ConditionsType(soap, _p);
		_p->saml1__AudienceRestrictionCondition = saml1__AudienceRestrictionCondition;
		_p->saml1__DoNotCacheCondition = saml1__DoNotCacheCondition;
		_p->saml1__Condition = saml1__Condition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_ConditionsType(struct soap*, const struct __saml1__union_ConditionsType *, const char*, const char*);

inline int soap_write___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_ConditionsType * SOAP_FMAC4 soap_get___saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *, const char*, const char*);

inline int soap_read___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *p)
{
	if (p)
	{	::soap_default___saml1__union_ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *p)
{
	if (::soap_read___saml1__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml1__union_AssertionType_DEFINED
#define SOAP_TYPE___saml1__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_AssertionType(struct soap*, const struct __saml1__union_AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_AssertionType(struct soap*, const char*, int, const struct __saml1__union_AssertionType *, const char*);
SOAP_FMAC3 struct __saml1__union_AssertionType * SOAP_FMAC4 soap_in___saml1__union_AssertionType(struct soap*, const char*, struct __saml1__union_AssertionType *, const char*);
SOAP_FMAC1 struct __saml1__union_AssertionType * SOAP_FMAC2 soap_instantiate___saml1__union_AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_AssertionType * soap_new___saml1__union_AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_AssertionType * soap_new_req___saml1__union_AssertionType(
	struct soap *soap)
{
	struct __saml1__union_AssertionType *_p = ::soap_new___saml1__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml1__union_AssertionType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_AssertionType * soap_new_set___saml1__union_AssertionType(
	struct soap *soap,
	struct saml1__StatementAbstractType *saml1__Statement,
	struct saml1__SubjectStatementAbstractType *saml1__SubjectStatement,
	struct saml1__AuthenticationStatementType *saml1__AuthenticationStatement,
	struct saml1__AuthorizationDecisionStatementType *saml1__AuthorizationDecisionStatement,
	struct saml1__AttributeStatementType *saml1__AttributeStatement)
{
	struct __saml1__union_AssertionType *_p = ::soap_new___saml1__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml1__union_AssertionType(soap, _p);
		_p->saml1__Statement = saml1__Statement;
		_p->saml1__SubjectStatement = saml1__SubjectStatement;
		_p->saml1__AuthenticationStatement = saml1__AuthenticationStatement;
		_p->saml1__AuthorizationDecisionStatement = saml1__AuthorizationDecisionStatement;
		_p->saml1__AttributeStatement = saml1__AttributeStatement;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_AssertionType(struct soap*, const struct __saml1__union_AssertionType *, const char*, const char*);

inline int soap_write___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_AssertionType * SOAP_FMAC4 soap_get___saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *, const char*, const char*);

inline int soap_read___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *p)
{
	if (p)
	{	::soap_default___saml1__union_AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *p)
{
	if (::soap_read___saml1__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeType_DEFINED
#define SOAP_TYPE_saml1__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeType(struct soap*, struct saml1__AttributeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeType(struct soap*, const char*, int, const struct saml1__AttributeType *, const char*);
SOAP_FMAC3 struct saml1__AttributeType * SOAP_FMAC4 soap_in_saml1__AttributeType(struct soap*, const char*, struct saml1__AttributeType *, const char*);
SOAP_FMAC1 struct saml1__AttributeType * SOAP_FMAC2 soap_instantiate_saml1__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeType * soap_new_saml1__AttributeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeType * soap_new_req_saml1__AttributeType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace,
	int __sizeAttributeValue,
	char **saml1__AttributeValue)
{
	struct saml1__AttributeType *_p = ::soap_new_saml1__AttributeType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml1__AttributeValue = saml1__AttributeValue;
	}
	return _p;
}

inline struct saml1__AttributeType * soap_new_set_saml1__AttributeType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace,
	int __sizeAttributeValue,
	char **saml1__AttributeValue)
{
	struct saml1__AttributeType *_p = ::soap_new_saml1__AttributeType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml1__AttributeValue = saml1__AttributeValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *, const char*, const char*);

inline int soap_write_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeType * SOAP_FMAC4 soap_get_saml1__AttributeType(struct soap*, struct saml1__AttributeType *, const char*, const char*);

inline int soap_read_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType *p)
{
	if (p)
	{	::soap_default_saml1__AttributeType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType *p)
{
	if (::soap_read_saml1__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeDesignatorType_DEFINED
#define SOAP_TYPE_saml1__AttributeDesignatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeDesignatorType(struct soap*, struct saml1__AttributeDesignatorType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeDesignatorType(struct soap*, const char*, int, const struct saml1__AttributeDesignatorType *, const char*);
SOAP_FMAC3 struct saml1__AttributeDesignatorType * SOAP_FMAC4 soap_in_saml1__AttributeDesignatorType(struct soap*, const char*, struct saml1__AttributeDesignatorType *, const char*);
SOAP_FMAC1 struct saml1__AttributeDesignatorType * SOAP_FMAC2 soap_instantiate_saml1__AttributeDesignatorType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeDesignatorType * soap_new_saml1__AttributeDesignatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeDesignatorType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeDesignatorType * soap_new_req_saml1__AttributeDesignatorType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace)
{
	struct saml1__AttributeDesignatorType *_p = ::soap_new_saml1__AttributeDesignatorType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeDesignatorType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
	}
	return _p;
}

inline struct saml1__AttributeDesignatorType * soap_new_set_saml1__AttributeDesignatorType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace)
{
	struct saml1__AttributeDesignatorType *_p = ::soap_new_saml1__AttributeDesignatorType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeDesignatorType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_write_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeDesignatorType * SOAP_FMAC4 soap_get_saml1__AttributeDesignatorType(struct soap*, struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_read_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType *p)
{
	if (p)
	{	::soap_default_saml1__AttributeDesignatorType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AttributeDesignatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AttributeDesignatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType *p)
{
	if (::soap_read_saml1__AttributeDesignatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeStatementType_DEFINED
#define SOAP_TYPE_saml1__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeStatementType(struct soap*, const char*, int, const struct saml1__AttributeStatementType *, const char*);
SOAP_FMAC3 struct saml1__AttributeStatementType * SOAP_FMAC4 soap_in_saml1__AttributeStatementType(struct soap*, const char*, struct saml1__AttributeStatementType *, const char*);
SOAP_FMAC1 struct saml1__AttributeStatementType * SOAP_FMAC2 soap_instantiate_saml1__AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeStatementType * soap_new_saml1__AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeStatementType * soap_new_req_saml1__AttributeStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAttribute,
	struct saml1__AttributeType *saml1__Attribute)
{
	struct saml1__AttributeStatementType *_p = ::soap_new_saml1__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAttribute = __sizeAttribute;
		_p->saml1__Attribute = saml1__Attribute;
	}
	return _p;
}

inline struct saml1__AttributeStatementType * soap_new_set_saml1__AttributeStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAttribute,
	struct saml1__AttributeType *saml1__Attribute)
{
	struct saml1__AttributeStatementType *_p = ::soap_new_saml1__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAttribute = __sizeAttribute;
		_p->saml1__Attribute = saml1__Attribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_write_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeStatementType * SOAP_FMAC4 soap_get_saml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_read_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *p)
{
	if (p)
	{	::soap_default_saml1__AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *p)
{
	if (::soap_read_saml1__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__EvidenceType_DEFINED
#define SOAP_TYPE_saml1__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__EvidenceType(struct soap*, struct saml1__EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__EvidenceType(struct soap*, const char*, int, const struct saml1__EvidenceType *, const char*);
SOAP_FMAC3 struct saml1__EvidenceType * SOAP_FMAC4 soap_in_saml1__EvidenceType(struct soap*, const char*, struct saml1__EvidenceType *, const char*);
SOAP_FMAC1 struct saml1__EvidenceType * SOAP_FMAC2 soap_instantiate_saml1__EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__EvidenceType * soap_new_saml1__EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__EvidenceType * soap_new_req_saml1__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml1__union_EvidenceType *__union_EvidenceType)
{
	struct saml1__EvidenceType *_p = ::soap_new_saml1__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml1__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}

inline struct saml1__EvidenceType * soap_new_set_saml1__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml1__union_EvidenceType *__union_EvidenceType)
{
	struct saml1__EvidenceType *_p = ::soap_new_saml1__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml1__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *, const char*, const char*);

inline int soap_write_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__EvidenceType * SOAP_FMAC4 soap_get_saml1__EvidenceType(struct soap*, struct saml1__EvidenceType *, const char*, const char*);

inline int soap_read_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *p)
{
	if (p)
	{	::soap_default_saml1__EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *p)
{
	if (::soap_read_saml1__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__ActionType_DEFINED
#define SOAP_TYPE_saml1__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ActionType(struct soap*, struct saml1__ActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ActionType(struct soap*, const struct saml1__ActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ActionType(struct soap*, const char*, int, const struct saml1__ActionType *, const char*);
SOAP_FMAC3 struct saml1__ActionType * SOAP_FMAC4 soap_in_saml1__ActionType(struct soap*, const char*, struct saml1__ActionType *, const char*);
SOAP_FMAC1 struct saml1__ActionType * SOAP_FMAC2 soap_instantiate_saml1__ActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ActionType * soap_new_saml1__ActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ActionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ActionType * soap_new_req_saml1__ActionType(
	struct soap *soap)
{
	struct saml1__ActionType *_p = ::soap_new_saml1__ActionType(soap);
	if (_p)
	{	::soap_default_saml1__ActionType(soap, _p);
	}
	return _p;
}

inline struct saml1__ActionType * soap_new_set_saml1__ActionType(
	struct soap *soap,
	char *__item,
	char *Namespace)
{
	struct saml1__ActionType *_p = ::soap_new_saml1__ActionType(soap);
	if (_p)
	{	::soap_default_saml1__ActionType(soap, _p);
		_p->__item = __item;
		_p->Namespace = Namespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ActionType(struct soap*, const struct saml1__ActionType *, const char*, const char*);

inline int soap_write_saml1__ActionType(struct soap *soap, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ActionType * SOAP_FMAC4 soap_get_saml1__ActionType(struct soap*, struct saml1__ActionType *, const char*, const char*);

inline int soap_read_saml1__ActionType(struct soap *soap, struct saml1__ActionType *p)
{
	if (p)
	{	::soap_default_saml1__ActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__ActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__ActionType(struct soap *soap, struct saml1__ActionType *p)
{
	if (::soap_read_saml1__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AuthorizationDecisionStatementType_DEFINED
#define SOAP_TYPE_saml1__AuthorizationDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthorizationDecisionStatementType(struct soap*, const char*, int, const struct saml1__AuthorizationDecisionStatementType *, const char*);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC4 soap_in_saml1__AuthorizationDecisionStatementType(struct soap*, const char*, struct saml1__AuthorizationDecisionStatementType *, const char*);
SOAP_FMAC1 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC2 soap_instantiate_saml1__AuthorizationDecisionStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthorizationDecisionStatementType * soap_new_saml1__AuthorizationDecisionStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthorizationDecisionStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthorizationDecisionStatementType * soap_new_req_saml1__AuthorizationDecisionStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAction,
	struct saml1__ActionType *saml1__Action,
	char *Resource,
	enum saml1__DecisionType Decision)
{
	struct saml1__AuthorizationDecisionStatementType *_p = ::soap_new_saml1__AuthorizationDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorizationDecisionStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAction = __sizeAction;
		_p->saml1__Action = saml1__Action;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}

inline struct saml1__AuthorizationDecisionStatementType * soap_new_set_saml1__AuthorizationDecisionStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAction,
	struct saml1__ActionType *saml1__Action,
	struct saml1__EvidenceType *saml1__Evidence,
	char *Resource,
	enum saml1__DecisionType Decision)
{
	struct saml1__AuthorizationDecisionStatementType *_p = ::soap_new_saml1__AuthorizationDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorizationDecisionStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAction = __sizeAction;
		_p->saml1__Action = saml1__Action;
		_p->saml1__Evidence = saml1__Evidence;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_write_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC4 soap_get_saml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_read_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (p)
	{	::soap_default_saml1__AuthorizationDecisionStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AuthorizationDecisionStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AuthorizationDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (::soap_read_saml1__AuthorizationDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AuthorityBindingType_DEFINED
#define SOAP_TYPE_saml1__AuthorityBindingType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthorityBindingType(struct soap*, const char*, int, const struct saml1__AuthorityBindingType *, const char*);
SOAP_FMAC3 struct saml1__AuthorityBindingType * SOAP_FMAC4 soap_in_saml1__AuthorityBindingType(struct soap*, const char*, struct saml1__AuthorityBindingType *, const char*);
SOAP_FMAC1 struct saml1__AuthorityBindingType * SOAP_FMAC2 soap_instantiate_saml1__AuthorityBindingType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthorityBindingType * soap_new_saml1__AuthorityBindingType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthorityBindingType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthorityBindingType * soap_new_req_saml1__AuthorityBindingType(
	struct soap *soap,
	char *AuthorityKind,
	char *Location,
	char *Binding)
{
	struct saml1__AuthorityBindingType *_p = ::soap_new_saml1__AuthorityBindingType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorityBindingType(soap, _p);
		_p->AuthorityKind = AuthorityKind;
		_p->Location = Location;
		_p->Binding = Binding;
	}
	return _p;
}

inline struct saml1__AuthorityBindingType * soap_new_set_saml1__AuthorityBindingType(
	struct soap *soap,
	char *AuthorityKind,
	char *Location,
	char *Binding)
{
	struct saml1__AuthorityBindingType *_p = ::soap_new_saml1__AuthorityBindingType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorityBindingType(soap, _p);
		_p->AuthorityKind = AuthorityKind;
		_p->Location = Location;
		_p->Binding = Binding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_write_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthorityBindingType * SOAP_FMAC4 soap_get_saml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_read_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *p)
{
	if (p)
	{	::soap_default_saml1__AuthorityBindingType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AuthorityBindingType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AuthorityBindingType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *p)
{
	if (::soap_read_saml1__AuthorityBindingType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectLocalityType_DEFINED
#define SOAP_TYPE_saml1__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectLocalityType(struct soap*, const char*, int, const struct saml1__SubjectLocalityType *, const char*);
SOAP_FMAC3 struct saml1__SubjectLocalityType * SOAP_FMAC4 soap_in_saml1__SubjectLocalityType(struct soap*, const char*, struct saml1__SubjectLocalityType *, const char*);
SOAP_FMAC1 struct saml1__SubjectLocalityType * SOAP_FMAC2 soap_instantiate_saml1__SubjectLocalityType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectLocalityType * soap_new_saml1__SubjectLocalityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectLocalityType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectLocalityType * soap_new_req_saml1__SubjectLocalityType(
	struct soap *soap)
{
	struct saml1__SubjectLocalityType *_p = ::soap_new_saml1__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectLocalityType(soap, _p);
	}
	return _p;
}

inline struct saml1__SubjectLocalityType * soap_new_set_saml1__SubjectLocalityType(
	struct soap *soap,
	char *IPAddress,
	char *DNSAddress)
{
	struct saml1__SubjectLocalityType *_p = ::soap_new_saml1__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectLocalityType(soap, _p);
		_p->IPAddress = IPAddress;
		_p->DNSAddress = DNSAddress;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_write_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectLocalityType * SOAP_FMAC4 soap_get_saml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_read_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectLocalityType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectLocalityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *p)
{
	if (::soap_read_saml1__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AuthenticationStatementType_DEFINED
#define SOAP_TYPE_saml1__AuthenticationStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthenticationStatementType(struct soap*, const char*, int, const struct saml1__AuthenticationStatementType *, const char*);
SOAP_FMAC3 struct saml1__AuthenticationStatementType * SOAP_FMAC4 soap_in_saml1__AuthenticationStatementType(struct soap*, const char*, struct saml1__AuthenticationStatementType *, const char*);
SOAP_FMAC1 struct saml1__AuthenticationStatementType * SOAP_FMAC2 soap_instantiate_saml1__AuthenticationStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthenticationStatementType * soap_new_saml1__AuthenticationStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthenticationStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthenticationStatementType * soap_new_req_saml1__AuthenticationStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAuthorityBinding,
	struct saml1__AuthorityBindingType *saml1__AuthorityBinding,
	char *AuthenticationMethod,
	const struct timeval& AuthenticationInstant)
{
	struct saml1__AuthenticationStatementType *_p = ::soap_new_saml1__AuthenticationStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthenticationStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAuthorityBinding = __sizeAuthorityBinding;
		_p->saml1__AuthorityBinding = saml1__AuthorityBinding;
		_p->AuthenticationMethod = AuthenticationMethod;
		_p->AuthenticationInstant = AuthenticationInstant;
	}
	return _p;
}

inline struct saml1__AuthenticationStatementType * soap_new_set_saml1__AuthenticationStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	struct saml1__SubjectLocalityType *saml1__SubjectLocality,
	int __sizeAuthorityBinding,
	struct saml1__AuthorityBindingType *saml1__AuthorityBinding,
	char *AuthenticationMethod,
	const struct timeval& AuthenticationInstant)
{
	struct saml1__AuthenticationStatementType *_p = ::soap_new_saml1__AuthenticationStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthenticationStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->saml1__SubjectLocality = saml1__SubjectLocality;
		_p->__sizeAuthorityBinding = __sizeAuthorityBinding;
		_p->saml1__AuthorityBinding = saml1__AuthorityBinding;
		_p->AuthenticationMethod = AuthenticationMethod;
		_p->AuthenticationInstant = AuthenticationInstant;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_write_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthenticationStatementType * SOAP_FMAC4 soap_get_saml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_read_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *p)
{
	if (p)
	{	::soap_default_saml1__AuthenticationStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AuthenticationStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AuthenticationStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *p)
{
	if (::soap_read_saml1__AuthenticationStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_saml1__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectConfirmationType(struct soap*, const char*, int, const struct saml1__SubjectConfirmationType *, const char*);
SOAP_FMAC3 struct saml1__SubjectConfirmationType * SOAP_FMAC4 soap_in_saml1__SubjectConfirmationType(struct soap*, const char*, struct saml1__SubjectConfirmationType *, const char*);
SOAP_FMAC1 struct saml1__SubjectConfirmationType * SOAP_FMAC2 soap_instantiate_saml1__SubjectConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectConfirmationType * soap_new_saml1__SubjectConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectConfirmationType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectConfirmationType * soap_new_req_saml1__SubjectConfirmationType(
	struct soap *soap,
	int __sizeConfirmationMethod,
	char **saml1__ConfirmationMethod)
{
	struct saml1__SubjectConfirmationType *_p = ::soap_new_saml1__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectConfirmationType(soap, _p);
		_p->__sizeConfirmationMethod = __sizeConfirmationMethod;
		_p->saml1__ConfirmationMethod = saml1__ConfirmationMethod;
	}
	return _p;
}

inline struct saml1__SubjectConfirmationType * soap_new_set_saml1__SubjectConfirmationType(
	struct soap *soap,
	int __sizeConfirmationMethod,
	char **saml1__ConfirmationMethod,
	char *saml1__SubjectConfirmationData,
	struct ds__KeyInfoType *ds__KeyInfo)
{
	struct saml1__SubjectConfirmationType *_p = ::soap_new_saml1__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectConfirmationType(soap, _p);
		_p->__sizeConfirmationMethod = __sizeConfirmationMethod;
		_p->saml1__ConfirmationMethod = saml1__ConfirmationMethod;
		_p->saml1__SubjectConfirmationData = saml1__SubjectConfirmationData;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_write_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectConfirmationType * SOAP_FMAC4 soap_get_saml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_read_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectConfirmationType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *p)
{
	if (::soap_read_saml1__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__NameIdentifierType_DEFINED
#define SOAP_TYPE_saml1__NameIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__NameIdentifierType(struct soap*, const char*, int, const struct saml1__NameIdentifierType *, const char*);
SOAP_FMAC3 struct saml1__NameIdentifierType * SOAP_FMAC4 soap_in_saml1__NameIdentifierType(struct soap*, const char*, struct saml1__NameIdentifierType *, const char*);
SOAP_FMAC1 struct saml1__NameIdentifierType * SOAP_FMAC2 soap_instantiate_saml1__NameIdentifierType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__NameIdentifierType * soap_new_saml1__NameIdentifierType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__NameIdentifierType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__NameIdentifierType * soap_new_req_saml1__NameIdentifierType(
	struct soap *soap)
{
	struct saml1__NameIdentifierType *_p = ::soap_new_saml1__NameIdentifierType(soap);
	if (_p)
	{	::soap_default_saml1__NameIdentifierType(soap, _p);
	}
	return _p;
}

inline struct saml1__NameIdentifierType * soap_new_set_saml1__NameIdentifierType(
	struct soap *soap,
	char *__item,
	char *NameQualifier,
	char *Format)
{
	struct saml1__NameIdentifierType *_p = ::soap_new_saml1__NameIdentifierType(soap);
	if (_p)
	{	::soap_default_saml1__NameIdentifierType(soap, _p);
		_p->__item = __item;
		_p->NameQualifier = NameQualifier;
		_p->Format = Format;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_write_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__NameIdentifierType * SOAP_FMAC4 soap_get_saml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_read_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *p)
{
	if (p)
	{	::soap_default_saml1__NameIdentifierType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__NameIdentifierType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__NameIdentifierType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *p)
{
	if (::soap_read_saml1__NameIdentifierType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectType_DEFINED
#define SOAP_TYPE_saml1__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectType(struct soap*, struct saml1__SubjectType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectType(struct soap*, const char*, int, const struct saml1__SubjectType *, const char*);
SOAP_FMAC3 struct saml1__SubjectType * SOAP_FMAC4 soap_in_saml1__SubjectType(struct soap*, const char*, struct saml1__SubjectType *, const char*);
SOAP_FMAC1 struct saml1__SubjectType * SOAP_FMAC2 soap_instantiate_saml1__SubjectType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectType * soap_new_saml1__SubjectType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectType * soap_new_req_saml1__SubjectType(
	struct soap *soap)
{
	struct saml1__SubjectType *_p = ::soap_new_saml1__SubjectType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectType(soap, _p);
	}
	return _p;
}

inline struct saml1__SubjectType * soap_new_set_saml1__SubjectType(
	struct soap *soap,
	struct saml1__NameIdentifierType *saml1__NameIdentifier,
	struct saml1__SubjectConfirmationType *saml1__SubjectConfirmation,
	struct saml1__SubjectConfirmationType *saml1__SubjectConfirmation_)
{
	struct saml1__SubjectType *_p = ::soap_new_saml1__SubjectType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectType(soap, _p);
		_p->saml1__NameIdentifier = saml1__NameIdentifier;
		_p->saml1__SubjectConfirmation = saml1__SubjectConfirmation;
		_p->saml1__SubjectConfirmation_ = saml1__SubjectConfirmation_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *, const char*, const char*);

inline int soap_write_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectType * SOAP_FMAC4 soap_get_saml1__SubjectType(struct soap*, struct saml1__SubjectType *, const char*, const char*);

inline int soap_read_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType *p)
{
	if (::soap_read_saml1__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectStatementAbstractType_DEFINED
#define SOAP_TYPE_saml1__SubjectStatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectStatementAbstractType(struct soap*, const char*, int, const struct saml1__SubjectStatementAbstractType *, const char*);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType * SOAP_FMAC4 soap_in_saml1__SubjectStatementAbstractType(struct soap*, const char*, struct saml1__SubjectStatementAbstractType *, const char*);
SOAP_FMAC1 struct saml1__SubjectStatementAbstractType * SOAP_FMAC2 soap_instantiate_saml1__SubjectStatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectStatementAbstractType * soap_new_saml1__SubjectStatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectStatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectStatementAbstractType * soap_new_req_saml1__SubjectStatementAbstractType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject)
{
	struct saml1__SubjectStatementAbstractType *_p = ::soap_new_saml1__SubjectStatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectStatementAbstractType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
	}
	return _p;
}

inline struct saml1__SubjectStatementAbstractType * soap_new_set_saml1__SubjectStatementAbstractType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject)
{
	struct saml1__SubjectStatementAbstractType *_p = ::soap_new_saml1__SubjectStatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectStatementAbstractType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_write_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType * SOAP_FMAC4 soap_get_saml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_read_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectStatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectStatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectStatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *p)
{
	if (::soap_read_saml1__SubjectStatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__StatementAbstractType_DEFINED
#define SOAP_TYPE_saml1__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__StatementAbstractType(struct soap*, const char*, int, const struct saml1__StatementAbstractType *, const char*);
SOAP_FMAC3 struct saml1__StatementAbstractType * SOAP_FMAC4 soap_in_saml1__StatementAbstractType(struct soap*, const char*, struct saml1__StatementAbstractType *, const char*);
SOAP_FMAC1 struct saml1__StatementAbstractType * SOAP_FMAC2 soap_instantiate_saml1__StatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__StatementAbstractType * soap_new_saml1__StatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__StatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__StatementAbstractType * soap_new_req_saml1__StatementAbstractType(
	struct soap *soap)
{
	struct saml1__StatementAbstractType *_p = ::soap_new_saml1__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__StatementAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml1__StatementAbstractType * soap_new_set_saml1__StatementAbstractType(
	struct soap *soap)
{
	struct saml1__StatementAbstractType *_p = ::soap_new_saml1__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__StatementAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_write_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__StatementAbstractType * SOAP_FMAC4 soap_get_saml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_read_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *p)
{
	if (p)
	{	::soap_default_saml1__StatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__StatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *p)
{
	if (::soap_read_saml1__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AdviceType_DEFINED
#define SOAP_TYPE_saml1__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AdviceType(struct soap*, struct saml1__AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AdviceType(struct soap*, const char*, int, const struct saml1__AdviceType *, const char*);
SOAP_FMAC3 struct saml1__AdviceType * SOAP_FMAC4 soap_in_saml1__AdviceType(struct soap*, const char*, struct saml1__AdviceType *, const char*);
SOAP_FMAC1 struct saml1__AdviceType * SOAP_FMAC2 soap_instantiate_saml1__AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AdviceType * soap_new_saml1__AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AdviceType * soap_new_req_saml1__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml1__union_AdviceType *__union_AdviceType)
{
	struct saml1__AdviceType *_p = ::soap_new_saml1__AdviceType(soap);
	if (_p)
	{	::soap_default_saml1__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}

inline struct saml1__AdviceType * soap_new_set_saml1__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml1__union_AdviceType *__union_AdviceType)
{
	struct saml1__AdviceType *_p = ::soap_new_saml1__AdviceType(soap);
	if (_p)
	{	::soap_default_saml1__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *, const char*, const char*);

inline int soap_write_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AdviceType * SOAP_FMAC4 soap_get_saml1__AdviceType(struct soap*, struct saml1__AdviceType *, const char*, const char*);

inline int soap_read_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType *p)
{
	if (p)
	{	::soap_default_saml1__AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType *p)
{
	if (::soap_read_saml1__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__DoNotCacheConditionType_DEFINED
#define SOAP_TYPE_saml1__DoNotCacheConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DoNotCacheConditionType(struct soap*, const char*, int, const struct saml1__DoNotCacheConditionType *, const char*);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType * SOAP_FMAC4 soap_in_saml1__DoNotCacheConditionType(struct soap*, const char*, struct saml1__DoNotCacheConditionType *, const char*);
SOAP_FMAC1 struct saml1__DoNotCacheConditionType * SOAP_FMAC2 soap_instantiate_saml1__DoNotCacheConditionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__DoNotCacheConditionType * soap_new_saml1__DoNotCacheConditionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__DoNotCacheConditionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__DoNotCacheConditionType * soap_new_req_saml1__DoNotCacheConditionType(
	struct soap *soap)
{
	struct saml1__DoNotCacheConditionType *_p = ::soap_new_saml1__DoNotCacheConditionType(soap);
	if (_p)
	{	::soap_default_saml1__DoNotCacheConditionType(soap, _p);
	}
	return _p;
}

inline struct saml1__DoNotCacheConditionType * soap_new_set_saml1__DoNotCacheConditionType(
	struct soap *soap)
{
	struct saml1__DoNotCacheConditionType *_p = ::soap_new_saml1__DoNotCacheConditionType(soap);
	if (_p)
	{	::soap_default_saml1__DoNotCacheConditionType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_write_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__DoNotCacheConditionType * SOAP_FMAC4 soap_get_saml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_read_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *p)
{
	if (p)
	{	::soap_default_saml1__DoNotCacheConditionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__DoNotCacheConditionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__DoNotCacheConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *p)
{
	if (::soap_read_saml1__DoNotCacheConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AudienceRestrictionConditionType_DEFINED
#define SOAP_TYPE_saml1__AudienceRestrictionConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AudienceRestrictionConditionType(struct soap*, const char*, int, const struct saml1__AudienceRestrictionConditionType *, const char*);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC4 soap_in_saml1__AudienceRestrictionConditionType(struct soap*, const char*, struct saml1__AudienceRestrictionConditionType *, const char*);
SOAP_FMAC1 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC2 soap_instantiate_saml1__AudienceRestrictionConditionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AudienceRestrictionConditionType * soap_new_saml1__AudienceRestrictionConditionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AudienceRestrictionConditionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AudienceRestrictionConditionType * soap_new_req_saml1__AudienceRestrictionConditionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml1__Audience)
{
	struct saml1__AudienceRestrictionConditionType *_p = ::soap_new_saml1__AudienceRestrictionConditionType(soap);
	if (_p)
	{	::soap_default_saml1__AudienceRestrictionConditionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml1__Audience = saml1__Audience;
	}
	return _p;
}

inline struct saml1__AudienceRestrictionConditionType * soap_new_set_saml1__AudienceRestrictionConditionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml1__Audience)
{
	struct saml1__AudienceRestrictionConditionType *_p = ::soap_new_saml1__AudienceRestrictionConditionType(soap);
	if (_p)
	{	::soap_default_saml1__AudienceRestrictionConditionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml1__Audience = saml1__Audience;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_write_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC4 soap_get_saml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_read_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *p)
{
	if (p)
	{	::soap_default_saml1__AudienceRestrictionConditionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AudienceRestrictionConditionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AudienceRestrictionConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *p)
{
	if (::soap_read_saml1__AudienceRestrictionConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__ConditionAbstractType_DEFINED
#define SOAP_TYPE_saml1__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ConditionAbstractType(struct soap*, const char*, int, const struct saml1__ConditionAbstractType *, const char*);
SOAP_FMAC3 struct saml1__ConditionAbstractType * SOAP_FMAC4 soap_in_saml1__ConditionAbstractType(struct soap*, const char*, struct saml1__ConditionAbstractType *, const char*);
SOAP_FMAC1 struct saml1__ConditionAbstractType * SOAP_FMAC2 soap_instantiate_saml1__ConditionAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ConditionAbstractType * soap_new_saml1__ConditionAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ConditionAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ConditionAbstractType * soap_new_req_saml1__ConditionAbstractType(
	struct soap *soap)
{
	struct saml1__ConditionAbstractType *_p = ::soap_new_saml1__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml1__ConditionAbstractType * soap_new_set_saml1__ConditionAbstractType(
	struct soap *soap)
{
	struct saml1__ConditionAbstractType *_p = ::soap_new_saml1__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_write_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ConditionAbstractType * SOAP_FMAC4 soap_get_saml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_read_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *p)
{
	if (p)
	{	::soap_default_saml1__ConditionAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__ConditionAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *p)
{
	if (::soap_read_saml1__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__ConditionsType_DEFINED
#define SOAP_TYPE_saml1__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ConditionsType(struct soap*, struct saml1__ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ConditionsType(struct soap*, const char*, int, const struct saml1__ConditionsType *, const char*);
SOAP_FMAC3 struct saml1__ConditionsType * SOAP_FMAC4 soap_in_saml1__ConditionsType(struct soap*, const char*, struct saml1__ConditionsType *, const char*);
SOAP_FMAC1 struct saml1__ConditionsType * SOAP_FMAC2 soap_instantiate_saml1__ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ConditionsType * soap_new_saml1__ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ConditionsType * soap_new_req_saml1__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml1__union_ConditionsType *__union_ConditionsType)
{
	struct saml1__ConditionsType *_p = ::soap_new_saml1__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
	}
	return _p;
}

inline struct saml1__ConditionsType * soap_new_set_saml1__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml1__union_ConditionsType *__union_ConditionsType,
	struct timeval *NotBefore,
	struct timeval *NotOnOrAfter)
{
	struct saml1__ConditionsType *_p = ::soap_new_saml1__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *, const char*, const char*);

inline int soap_write_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ConditionsType * SOAP_FMAC4 soap_get_saml1__ConditionsType(struct soap*, struct saml1__ConditionsType *, const char*, const char*);

inline int soap_read_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *p)
{
	if (p)
	{	::soap_default_saml1__ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *p)
{
	if (::soap_read_saml1__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AssertionType_DEFINED
#define SOAP_TYPE_saml1__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AssertionType(struct soap*, struct saml1__AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AssertionType(struct soap*, const char*, int, const struct saml1__AssertionType *, const char*);
SOAP_FMAC3 struct saml1__AssertionType * SOAP_FMAC4 soap_in_saml1__AssertionType(struct soap*, const char*, struct saml1__AssertionType *, const char*);
SOAP_FMAC1 struct saml1__AssertionType * SOAP_FMAC2 soap_instantiate_saml1__AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AssertionType * soap_new_saml1__AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AssertionType * soap_new_req_saml1__AssertionType(
	struct soap *soap,
	int __size_AssertionType,
	struct __saml1__union_AssertionType *__union_AssertionType,
	char *MajorVersion,
	char *MinorVersion,
	char *AssertionID,
	char *Issuer,
	const struct timeval& IssueInstant)
{
	struct saml1__AssertionType *_p = ::soap_new_saml1__AssertionType(soap);
	if (_p)
	{	::soap_default_saml1__AssertionType(soap, _p);
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->MajorVersion = MajorVersion;
		_p->MinorVersion = MinorVersion;
		_p->AssertionID = AssertionID;
		_p->Issuer = Issuer;
		_p->IssueInstant = IssueInstant;
	}
	return _p;
}

inline struct saml1__AssertionType * soap_new_set_saml1__AssertionType(
	struct soap *soap,
	struct saml1__ConditionsType *saml1__Conditions,
	struct saml1__AdviceType *saml1__Advice,
	int __size_AssertionType,
	struct __saml1__union_AssertionType *__union_AssertionType,
	struct ds__SignatureType *ds__Signature,
	char *MajorVersion,
	char *MinorVersion,
	char *AssertionID,
	char *Issuer,
	const struct timeval& IssueInstant,
	char *wsu__Id)
{
	struct saml1__AssertionType *_p = ::soap_new_saml1__AssertionType(soap);
	if (_p)
	{	::soap_default_saml1__AssertionType(soap, _p);
		_p->saml1__Conditions = saml1__Conditions;
		_p->saml1__Advice = saml1__Advice;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->ds__Signature = ds__Signature;
		_p->MajorVersion = MajorVersion;
		_p->MinorVersion = MinorVersion;
		_p->AssertionID = AssertionID;
		_p->Issuer = Issuer;
		_p->IssueInstant = IssueInstant;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *, const char*, const char*);

inline int soap_write_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AssertionType * SOAP_FMAC4 soap_get_saml1__AssertionType(struct soap*, struct saml1__AssertionType *, const char*, const char*);

inline int soap_read_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType *p)
{
	if (p)
	{	::soap_default_saml1__AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType *p)
{
	if (::soap_read_saml1__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__dateTime_DEFINED
#define SOAP_TYPE_xsd__dateTime_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__dateTime(struct soap*, struct timeval *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__dateTime(struct soap*, const struct timeval *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__dateTime2s(struct soap*, struct timeval);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__dateTime(struct soap*, const char*, int, const struct timeval *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__dateTime(struct soap*, const char*, struct timeval *);
SOAP_FMAC1 struct timeval * SOAP_FMAC2 soap_in_xsd__dateTime(struct soap*, const char*, struct timeval *, const char*);
SOAP_FMAC1 struct timeval * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline struct timeval * soap_new_xsd__dateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

inline struct timeval * soap_new_req_xsd__dateTime(
	struct soap *soap)
{
	struct timeval *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	
	}
	return _p;
}

inline struct timeval * soap_new_set_xsd__dateTime(
	struct soap *soap)
{
	struct timeval *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__dateTime(struct soap*, const struct timeval *, const char*, const char*);

inline int soap_write_xsd__dateTime(struct soap *soap, struct timeval const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xsd__dateTime(soap, p), 0) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__dateTime(struct soap *soap, const char *URL, struct timeval const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__dateTime(soap, p), 0) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__dateTime(struct soap *soap, const char *URL, struct timeval const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__dateTime(soap, p), 0) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__dateTime(struct soap *soap, const char *URL, struct timeval const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__dateTime(soap, p), 0) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct timeval * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, struct timeval *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, struct timeval *p)
{
	if (p)
	{	soap_default_xsd__dateTime(soap, p);
		if (soap_begin_recv(soap) || soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__dateTime(struct soap *soap, const char *URL, struct timeval *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__dateTime(struct soap *soap, struct timeval *p)
{
	if (soap_read_xsd__dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsc__DerivedKeyTokenType_sequence_DEFINED
#define SOAP_TYPE___wsc__DerivedKeyTokenType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, int, const struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_in___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC1 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC2 soap_instantiate___wsc__DerivedKeyTokenType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new___wsc__DerivedKeyTokenType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsc__DerivedKeyTokenType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_req___wsc__DerivedKeyTokenType_sequence(
	struct soap *soap,
	const union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType)
{
	struct __wsc__DerivedKeyTokenType_sequence *_p = ::soap_new___wsc__DerivedKeyTokenType_sequence(soap);
	if (_p)
	{	::soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p);
		_p->union_DerivedKeyTokenType = union_DerivedKeyTokenType;
	}
	return _p;
}

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_set___wsc__DerivedKeyTokenType_sequence(
	struct soap *soap,
	int __union_DerivedKeyTokenType,
	const union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType,
	ULONG64 *Length)
{
	struct __wsc__DerivedKeyTokenType_sequence *_p = ::soap_new___wsc__DerivedKeyTokenType_sequence(soap);
	if (_p)
	{	::soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p);
		_p->__union_DerivedKeyTokenType = __union_DerivedKeyTokenType;
		_p->union_DerivedKeyTokenType = union_DerivedKeyTokenType;
		_p->Length = Length;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

inline int soap_write___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_get___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

inline int soap_read___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (p)
	{	::soap_default___wsc__DerivedKeyTokenType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsc__DerivedKeyTokenType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsc__DerivedKeyTokenType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (::soap_read___wsc__DerivedKeyTokenType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__PropertiesType_DEFINED
#define SOAP_TYPE_wsc__PropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__PropertiesType(struct soap*, const char*, int, const struct wsc__PropertiesType *, const char*);
SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_in_wsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType *, const char*);
SOAP_FMAC1 struct wsc__PropertiesType * SOAP_FMAC2 soap_instantiate_wsc__PropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__PropertiesType * soap_new_wsc__PropertiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__PropertiesType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__PropertiesType * soap_new_req_wsc__PropertiesType(
	struct soap *soap)
{
	struct wsc__PropertiesType *_p = ::soap_new_wsc__PropertiesType(soap);
	if (_p)
	{	::soap_default_wsc__PropertiesType(soap, _p);
	}
	return _p;
}

inline struct wsc__PropertiesType * soap_new_set_wsc__PropertiesType(
	struct soap *soap)
{
	struct wsc__PropertiesType *_p = ::soap_new_wsc__PropertiesType(soap);
	if (_p)
	{	::soap_default_wsc__PropertiesType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *, const char*, const char*);

inline int soap_write_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_get_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *, const char*, const char*);

inline int soap_read_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *p)
{
	if (p)
	{	::soap_default_wsc__PropertiesType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsc__PropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__PropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *p)
{
	if (::soap_read_wsc__PropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__DerivedKeyTokenType_DEFINED
#define SOAP_TYPE_wsc__DerivedKeyTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__DerivedKeyTokenType(struct soap*, const char*, int, const struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_in_wsc__DerivedKeyTokenType(struct soap*, const char*, struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC1 struct wsc__DerivedKeyTokenType * SOAP_FMAC2 soap_instantiate_wsc__DerivedKeyTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__DerivedKeyTokenType * soap_new_wsc__DerivedKeyTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__DerivedKeyTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__DerivedKeyTokenType * soap_new_req_wsc__DerivedKeyTokenType(
	struct soap *soap)
{
	struct wsc__DerivedKeyTokenType *_p = ::soap_new_wsc__DerivedKeyTokenType(soap);
	if (_p)
	{	::soap_default_wsc__DerivedKeyTokenType(soap, _p);
	}
	return _p;
}

inline struct wsc__DerivedKeyTokenType * soap_new_set_wsc__DerivedKeyTokenType(
	struct soap *soap,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	struct wsc__PropertiesType *Properties,
	struct __wsc__DerivedKeyTokenType_sequence *__DerivedKeyTokenType_sequence,
	char *Label,
	char *Nonce,
	char *wsu__Id,
	char *Algorithm)
{
	struct wsc__DerivedKeyTokenType *_p = ::soap_new_wsc__DerivedKeyTokenType(soap);
	if (_p)
	{	::soap_default_wsc__DerivedKeyTokenType(soap, _p);
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->Properties = Properties;
		_p->__DerivedKeyTokenType_sequence = __DerivedKeyTokenType_sequence;
		_p->Label = Label;
		_p->Nonce = Nonce;
		_p->wsu__Id = wsu__Id;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *, const char*, const char*);

inline int soap_write_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_get_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *, const char*, const char*);

inline int soap_read_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *p)
{
	if (p)
	{	::soap_default_wsc__DerivedKeyTokenType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsc__DerivedKeyTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__DerivedKeyTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *p)
{
	if (::soap_read_wsc__DerivedKeyTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__SecurityContextTokenType_DEFINED
#define SOAP_TYPE_wsc__SecurityContextTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__SecurityContextTokenType(struct soap*, const char*, int, const struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_in_wsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC1 struct wsc__SecurityContextTokenType * SOAP_FMAC2 soap_instantiate_wsc__SecurityContextTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__SecurityContextTokenType * soap_new_wsc__SecurityContextTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__SecurityContextTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__SecurityContextTokenType * soap_new_req_wsc__SecurityContextTokenType(
	struct soap *soap)
{
	struct wsc__SecurityContextTokenType *_p = ::soap_new_wsc__SecurityContextTokenType(soap);
	if (_p)
	{	::soap_default_wsc__SecurityContextTokenType(soap, _p);
	}
	return _p;
}

inline struct wsc__SecurityContextTokenType * soap_new_set_wsc__SecurityContextTokenType(
	struct soap *soap,
	char *wsu__Id,
	char *Identifier,
	char *Instance)
{
	struct wsc__SecurityContextTokenType *_p = ::soap_new_wsc__SecurityContextTokenType(soap);
	if (_p)
	{	::soap_default_wsc__SecurityContextTokenType(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->Identifier = Identifier;
		_p->Instance = Instance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *, const char*, const char*);

inline int soap_write_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_get_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *, const char*, const char*);

inline int soap_read_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *p)
{
	if (p)
	{	::soap_default_wsc__SecurityContextTokenType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsc__SecurityContextTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__SecurityContextTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *p)
{
	if (::soap_read_wsc__SecurityContextTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___xenc__union_ReferenceList_DEFINED
#define SOAP_TYPE___xenc__union_ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___xenc__union_ReferenceList(struct soap*, const char*, int, const struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_in___xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC1 struct __xenc__union_ReferenceList * SOAP_FMAC2 soap_instantiate___xenc__union_ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct __xenc__union_ReferenceList * soap_new___xenc__union_ReferenceList(struct soap *soap, int n = -1)
{
	return soap_instantiate___xenc__union_ReferenceList(soap, n, NULL, NULL, NULL);
}

inline struct __xenc__union_ReferenceList * soap_new_req___xenc__union_ReferenceList(
	struct soap *soap)
{
	struct __xenc__union_ReferenceList *_p = ::soap_new___xenc__union_ReferenceList(soap);
	if (_p)
	{	::soap_default___xenc__union_ReferenceList(soap, _p);
	}
	return _p;
}

inline struct __xenc__union_ReferenceList * soap_new_set___xenc__union_ReferenceList(
	struct soap *soap,
	struct xenc__ReferenceType *DataReference,
	struct xenc__ReferenceType *KeyReference)
{
	struct __xenc__union_ReferenceList *_p = ::soap_new___xenc__union_ReferenceList(soap);
	if (_p)
	{	::soap_default___xenc__union_ReferenceList(soap, _p);
		_p->DataReference = DataReference;
		_p->KeyReference = KeyReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *, const char*, const char*);

inline int soap_write___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_get___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *, const char*, const char*);

inline int soap_read___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *p)
{
	if (p)
	{	::soap_default___xenc__union_ReferenceList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___xenc__union_ReferenceList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___xenc__union_ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *p)
{
	if (::soap_read___xenc__union_ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__xenc__ReferenceList_DEFINED
#define SOAP_TYPE__xenc__ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xenc__ReferenceList(struct soap*, const char*, int, const struct _xenc__ReferenceList *, const char*);
SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_in__xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList *, const char*);
SOAP_FMAC1 struct _xenc__ReferenceList * SOAP_FMAC2 soap_instantiate__xenc__ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct _xenc__ReferenceList * soap_new__xenc__ReferenceList(struct soap *soap, int n = -1)
{
	return soap_instantiate__xenc__ReferenceList(soap, n, NULL, NULL, NULL);
}

inline struct _xenc__ReferenceList * soap_new_req__xenc__ReferenceList(
	struct soap *soap,
	int __size_ReferenceList,
	struct __xenc__union_ReferenceList *__union_ReferenceList)
{
	struct _xenc__ReferenceList *_p = ::soap_new__xenc__ReferenceList(soap);
	if (_p)
	{	::soap_default__xenc__ReferenceList(soap, _p);
		_p->__size_ReferenceList = __size_ReferenceList;
		_p->__union_ReferenceList = __union_ReferenceList;
	}
	return _p;
}

inline struct _xenc__ReferenceList * soap_new_set__xenc__ReferenceList(
	struct soap *soap,
	int __size_ReferenceList,
	struct __xenc__union_ReferenceList *__union_ReferenceList)
{
	struct _xenc__ReferenceList *_p = ::soap_new__xenc__ReferenceList(soap);
	if (_p)
	{	::soap_default__xenc__ReferenceList(soap, _p);
		_p->__size_ReferenceList = __size_ReferenceList;
		_p->__union_ReferenceList = __union_ReferenceList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *, const char*, const char*);

inline int soap_write__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_get__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *, const char*, const char*);

inline int soap_read__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *p)
{
	if (p)
	{	::soap_default__xenc__ReferenceList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__xenc__ReferenceList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__xenc__ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *p)
{
	if (::soap_read__xenc__ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertyType_DEFINED
#define SOAP_TYPE_xenc__EncryptionPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertyType(struct soap*, const char*, int, const struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionPropertyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertyType * soap_new_xenc__EncryptionPropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionPropertyType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionPropertyType * soap_new_req_xenc__EncryptionPropertyType(
	struct soap *soap)
{
	struct xenc__EncryptionPropertyType *_p = ::soap_new_xenc__EncryptionPropertyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertyType(soap, _p);
	}
	return _p;
}

inline struct xenc__EncryptionPropertyType * soap_new_set_xenc__EncryptionPropertyType(
	struct soap *soap,
	char *Target,
	char *Id)
{
	struct xenc__EncryptionPropertyType *_p = ::soap_new_xenc__EncryptionPropertyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertyType(soap, _p);
		_p->Target = Target;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *, const char*, const char*);

inline int soap_write_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *, const char*, const char*);

inline int soap_read_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptionPropertyType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptionPropertyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptionPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *p)
{
	if (::soap_read_xenc__EncryptionPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertiesType_DEFINED
#define SOAP_TYPE_xenc__EncryptionPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertiesType(struct soap*, const char*, int, const struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionPropertiesType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertiesType * soap_new_xenc__EncryptionPropertiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionPropertiesType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionPropertiesType * soap_new_req_xenc__EncryptionPropertiesType(
	struct soap *soap,
	int __sizeEncryptionProperty,
	struct xenc__EncryptionPropertyType *EncryptionProperty)
{
	struct xenc__EncryptionPropertiesType *_p = ::soap_new_xenc__EncryptionPropertiesType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertiesType(soap, _p);
		_p->__sizeEncryptionProperty = __sizeEncryptionProperty;
		_p->EncryptionProperty = EncryptionProperty;
	}
	return _p;
}

inline struct xenc__EncryptionPropertiesType * soap_new_set_xenc__EncryptionPropertiesType(
	struct soap *soap,
	int __sizeEncryptionProperty,
	struct xenc__EncryptionPropertyType *EncryptionProperty,
	char *Id)
{
	struct xenc__EncryptionPropertiesType *_p = ::soap_new_xenc__EncryptionPropertiesType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertiesType(soap, _p);
		_p->__sizeEncryptionProperty = __sizeEncryptionProperty;
		_p->EncryptionProperty = EncryptionProperty;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *, const char*, const char*);

inline int soap_write_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *, const char*, const char*);

inline int soap_read_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptionPropertiesType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptionPropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptionPropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *p)
{
	if (::soap_read_xenc__EncryptionPropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__ReferenceType_DEFINED
#define SOAP_TYPE_xenc__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__ReferenceType(struct soap*, const char*, int, const struct xenc__ReferenceType *, const char*);
SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_in_xenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType *, const char*);
SOAP_FMAC1 struct xenc__ReferenceType * SOAP_FMAC2 soap_instantiate_xenc__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__ReferenceType * soap_new_xenc__ReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__ReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__ReferenceType * soap_new_req_xenc__ReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__ReferenceType *_p = ::soap_new_xenc__ReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__ReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}

inline struct xenc__ReferenceType * soap_new_set_xenc__ReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__ReferenceType *_p = ::soap_new_xenc__ReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__ReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *, const char*, const char*);

inline int soap_write_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_get_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *, const char*, const char*);

inline int soap_read_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *p)
{
	if (p)
	{	::soap_default_xenc__ReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__ReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *p)
{
	if (::soap_read_xenc__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__AgreementMethodType_DEFINED
#define SOAP_TYPE_xenc__AgreementMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__AgreementMethodType(struct soap*, const char*, int, const struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_in_xenc__AgreementMethodType(struct soap*, const char*, struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC1 struct xenc__AgreementMethodType * SOAP_FMAC2 soap_instantiate_xenc__AgreementMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__AgreementMethodType * soap_new_xenc__AgreementMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__AgreementMethodType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__AgreementMethodType * soap_new_req_xenc__AgreementMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct xenc__AgreementMethodType *_p = ::soap_new_xenc__AgreementMethodType(soap);
	if (_p)
	{	::soap_default_xenc__AgreementMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct xenc__AgreementMethodType * soap_new_set_xenc__AgreementMethodType(
	struct soap *soap,
	char *KA_Nonce,
	struct ds__KeyInfoType *OriginatorKeyInfo,
	struct ds__KeyInfoType *RecipientKeyInfo,
	char *Algorithm,
	char *__mixed)
{
	struct xenc__AgreementMethodType *_p = ::soap_new_xenc__AgreementMethodType(soap);
	if (_p)
	{	::soap_default_xenc__AgreementMethodType(soap, _p);
		_p->KA_Nonce = KA_Nonce;
		_p->OriginatorKeyInfo = OriginatorKeyInfo;
		_p->RecipientKeyInfo = RecipientKeyInfo;
		_p->Algorithm = Algorithm;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *, const char*, const char*);

inline int soap_write_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_get_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *, const char*, const char*);

inline int soap_read_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *p)
{
	if (p)
	{	::soap_default_xenc__AgreementMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__AgreementMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__AgreementMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *p)
{
	if (::soap_read_xenc__AgreementMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedDataType_DEFINED
#define SOAP_TYPE_xenc__EncryptedDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedDataType(struct soap*, const char*, int, const struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_in_xenc__EncryptedDataType(struct soap*, const char*, struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedDataType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedDataType * soap_new_xenc__EncryptedDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedDataType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedDataType * soap_new_req_xenc__EncryptedDataType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedDataType *_p = ::soap_new_xenc__EncryptedDataType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedDataType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedDataType * soap_new_set_xenc__EncryptedDataType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding)
{
	struct xenc__EncryptedDataType *_p = ::soap_new_xenc__EncryptedDataType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedDataType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *, const char*, const char*);

inline int soap_write_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_get_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *, const char*, const char*);

inline int soap_read_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptedDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptedDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptedDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *p)
{
	if (::soap_read_xenc__EncryptedDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__TransformsType_DEFINED
#define SOAP_TYPE_xenc__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__TransformsType(struct soap*, struct xenc__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__TransformsType(struct soap*, const char*, int, const struct xenc__TransformsType *, const char*);
SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_in_xenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType *, const char*);
SOAP_FMAC1 struct xenc__TransformsType * SOAP_FMAC2 soap_instantiate_xenc__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__TransformsType * soap_new_xenc__TransformsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__TransformsType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__TransformsType * soap_new_req_xenc__TransformsType(
	struct soap *soap,
	const struct ds__TransformType& ds__Transform)
{
	struct xenc__TransformsType *_p = ::soap_new_xenc__TransformsType(soap);
	if (_p)
	{	::soap_default_xenc__TransformsType(soap, _p);
		_p->ds__Transform = ds__Transform;
	}
	return _p;
}

inline struct xenc__TransformsType * soap_new_set_xenc__TransformsType(
	struct soap *soap,
	const struct ds__TransformType& ds__Transform)
{
	struct xenc__TransformsType *_p = ::soap_new_xenc__TransformsType(soap);
	if (_p)
	{	::soap_default_xenc__TransformsType(soap, _p);
		_p->ds__Transform = ds__Transform;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *, const char*, const char*);

inline int soap_write_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_get_xenc__TransformsType(struct soap*, struct xenc__TransformsType *, const char*, const char*);

inline int soap_read_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *p)
{
	if (p)
	{	::soap_default_xenc__TransformsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__TransformsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *p)
{
	if (::soap_read_xenc__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__CipherReferenceType_DEFINED
#define SOAP_TYPE_xenc__CipherReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherReferenceType(struct soap*, const char*, int, const struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_in_xenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC1 struct xenc__CipherReferenceType * SOAP_FMAC2 soap_instantiate_xenc__CipherReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherReferenceType * soap_new_xenc__CipherReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__CipherReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__CipherReferenceType * soap_new_req_xenc__CipherReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__CipherReferenceType *_p = ::soap_new_xenc__CipherReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__CipherReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}

inline struct xenc__CipherReferenceType * soap_new_set_xenc__CipherReferenceType(
	struct soap *soap,
	struct xenc__TransformsType *Transforms,
	char *URI)
{
	struct xenc__CipherReferenceType *_p = ::soap_new_xenc__CipherReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__CipherReferenceType(soap, _p);
		_p->Transforms = Transforms;
		_p->URI = URI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *, const char*, const char*);

inline int soap_write_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_get_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *, const char*, const char*);

inline int soap_read_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *p)
{
	if (p)
	{	::soap_default_xenc__CipherReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__CipherReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__CipherReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *p)
{
	if (::soap_read_xenc__CipherReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__CipherDataType_DEFINED
#define SOAP_TYPE_xenc__CipherDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherDataType(struct soap*, const char*, int, const struct xenc__CipherDataType *, const char*);
SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_in_xenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType *, const char*);
SOAP_FMAC1 struct xenc__CipherDataType * SOAP_FMAC2 soap_instantiate_xenc__CipherDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherDataType * soap_new_xenc__CipherDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__CipherDataType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__CipherDataType * soap_new_req_xenc__CipherDataType(
	struct soap *soap)
{
	struct xenc__CipherDataType *_p = ::soap_new_xenc__CipherDataType(soap);
	if (_p)
	{	::soap_default_xenc__CipherDataType(soap, _p);
	}
	return _p;
}

inline struct xenc__CipherDataType * soap_new_set_xenc__CipherDataType(
	struct soap *soap,
	char *CipherValue,
	struct xenc__CipherReferenceType *CipherReference)
{
	struct xenc__CipherDataType *_p = ::soap_new_xenc__CipherDataType(soap);
	if (_p)
	{	::soap_default_xenc__CipherDataType(soap, _p);
		_p->CipherValue = CipherValue;
		_p->CipherReference = CipherReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *, const char*, const char*);

inline int soap_write_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_get_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *, const char*, const char*);

inline int soap_read_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *p)
{
	if (p)
	{	::soap_default_xenc__CipherDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__CipherDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__CipherDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *p)
{
	if (::soap_read_xenc__CipherDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionMethodType_DEFINED
#define SOAP_TYPE_xenc__EncryptionMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionMethodType(struct soap*, const char*, int, const struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_in_xenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionMethodType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionMethodType * soap_new_xenc__EncryptionMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionMethodType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionMethodType * soap_new_req_xenc__EncryptionMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct xenc__EncryptionMethodType *_p = ::soap_new_xenc__EncryptionMethodType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct xenc__EncryptionMethodType * soap_new_set_xenc__EncryptionMethodType(
	struct soap *soap,
	int *KeySize,
	char *OAEPparams,
	char *Algorithm,
	struct ds__DigestMethodType *ds__DigestMethod,
	char *__mixed)
{
	struct xenc__EncryptionMethodType *_p = ::soap_new_xenc__EncryptionMethodType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionMethodType(soap, _p);
		_p->KeySize = KeySize;
		_p->OAEPparams = OAEPparams;
		_p->Algorithm = Algorithm;
		_p->ds__DigestMethod = ds__DigestMethod;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *, const char*, const char*);

inline int soap_write_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_get_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *, const char*, const char*);

inline int soap_read_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptionMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptionMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptionMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *p)
{
	if (::soap_read_xenc__EncryptionMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedType_DEFINED
#define SOAP_TYPE_xenc__EncryptedType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedType(struct soap*, const char*, int, const struct xenc__EncryptedType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_in_xenc__EncryptedType(struct soap*, const char*, struct xenc__EncryptedType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedType * soap_new_xenc__EncryptedType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedType * soap_new_req_xenc__EncryptedType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedType *_p = ::soap_new_xenc__EncryptedType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedType * soap_new_set_xenc__EncryptedType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding)
{
	struct xenc__EncryptedType *_p = ::soap_new_xenc__EncryptedType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *, const char*, const char*);

inline int soap_write_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_get_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *, const char*, const char*);

inline int soap_read_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptedType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptedType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *p)
{
	if (::soap_read_xenc__EncryptedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__RSAKeyValueType_DEFINED
#define SOAP_TYPE_ds__RSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RSAKeyValueType(struct soap*, const char*, int, const struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_in_ds__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC1 struct ds__RSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__RSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RSAKeyValueType * soap_new_ds__RSAKeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__RSAKeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__RSAKeyValueType * soap_new_req_ds__RSAKeyValueType(
	struct soap *soap,
	char *Modulus,
	char *Exponent)
{
	struct ds__RSAKeyValueType *_p = ::soap_new_ds__RSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__RSAKeyValueType(soap, _p);
		_p->Modulus = Modulus;
		_p->Exponent = Exponent;
	}
	return _p;
}

inline struct ds__RSAKeyValueType * soap_new_set_ds__RSAKeyValueType(
	struct soap *soap,
	char *Modulus,
	char *Exponent)
{
	struct ds__RSAKeyValueType *_p = ::soap_new_ds__RSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__RSAKeyValueType(soap, _p);
		_p->Modulus = Modulus;
		_p->Exponent = Exponent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *, const char*, const char*);

inline int soap_write_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_get_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *, const char*, const char*);

inline int soap_read_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *p)
{
	if (p)
	{	::soap_default_ds__RSAKeyValueType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__RSAKeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__RSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *p)
{
	if (::soap_read_ds__RSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__DSAKeyValueType_DEFINED
#define SOAP_TYPE_ds__DSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DSAKeyValueType(struct soap*, const char*, int, const struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_in_ds__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC1 struct ds__DSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__DSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DSAKeyValueType * soap_new_ds__DSAKeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__DSAKeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__DSAKeyValueType * soap_new_req_ds__DSAKeyValueType(
	struct soap *soap,
	char *Y,
	char *P,
	char *Q,
	char *Seed,
	char *PgenCounter)
{
	struct ds__DSAKeyValueType *_p = ::soap_new_ds__DSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__DSAKeyValueType(soap, _p);
		_p->Y = Y;
		_p->P = P;
		_p->Q = Q;
		_p->Seed = Seed;
		_p->PgenCounter = PgenCounter;
	}
	return _p;
}

inline struct ds__DSAKeyValueType * soap_new_set_ds__DSAKeyValueType(
	struct soap *soap,
	char *G,
	char *Y,
	char *J,
	char *P,
	char *Q,
	char *Seed,
	char *PgenCounter)
{
	struct ds__DSAKeyValueType *_p = ::soap_new_ds__DSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__DSAKeyValueType(soap, _p);
		_p->G = G;
		_p->Y = Y;
		_p->J = J;
		_p->P = P;
		_p->Q = Q;
		_p->Seed = Seed;
		_p->PgenCounter = PgenCounter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *, const char*, const char*);

inline int soap_write_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_get_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *, const char*, const char*);

inline int soap_read_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *p)
{
	if (p)
	{	::soap_default_ds__DSAKeyValueType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__DSAKeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__DSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *p)
{
	if (::soap_read_ds__DSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__X509IssuerSerialType_DEFINED
#define SOAP_TYPE_ds__X509IssuerSerialType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509IssuerSerialType(struct soap*, const char*, int, const struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_in_ds__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC1 struct ds__X509IssuerSerialType * SOAP_FMAC2 soap_instantiate_ds__X509IssuerSerialType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509IssuerSerialType * soap_new_ds__X509IssuerSerialType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__X509IssuerSerialType(soap, n, NULL, NULL, NULL);
}

inline struct ds__X509IssuerSerialType * soap_new_req_ds__X509IssuerSerialType(
	struct soap *soap,
	char *X509IssuerName,
	char *X509SerialNumber)
{
	struct ds__X509IssuerSerialType *_p = ::soap_new_ds__X509IssuerSerialType(soap);
	if (_p)
	{	::soap_default_ds__X509IssuerSerialType(soap, _p);
		_p->X509IssuerName = X509IssuerName;
		_p->X509SerialNumber = X509SerialNumber;
	}
	return _p;
}

inline struct ds__X509IssuerSerialType * soap_new_set_ds__X509IssuerSerialType(
	struct soap *soap,
	char *X509IssuerName,
	char *X509SerialNumber)
{
	struct ds__X509IssuerSerialType *_p = ::soap_new_ds__X509IssuerSerialType(soap);
	if (_p)
	{	::soap_default_ds__X509IssuerSerialType(soap, _p);
		_p->X509IssuerName = X509IssuerName;
		_p->X509SerialNumber = X509SerialNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *, const char*, const char*);

inline int soap_write_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_get_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *, const char*, const char*);

inline int soap_read_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *p)
{
	if (p)
	{	::soap_default_ds__X509IssuerSerialType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__X509IssuerSerialType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__X509IssuerSerialType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *p)
{
	if (::soap_read_ds__X509IssuerSerialType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _ds__KeyInfo is a typedef synonym of ds__KeyInfoType */

#ifndef SOAP_TYPE__ds__KeyInfo_DEFINED
#define SOAP_TYPE__ds__KeyInfo_DEFINED

#define soap_default__ds__KeyInfo soap_default_ds__KeyInfoType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *);

#define soap_serialize__ds__KeyInfo soap_serialize_ds__KeyInfoType


#define soap__ds__KeyInfo2s soap_ds__KeyInfoType2s


#define soap_out__ds__KeyInfo soap_out_ds__KeyInfoType


#define soap_s2_ds__KeyInfo soap_s2ds__KeyInfoType


#define soap_in__ds__KeyInfo soap_in_ds__KeyInfoType


#define soap_instantiate__ds__KeyInfo soap_instantiate_ds__KeyInfoType


#define soap_new__ds__KeyInfo soap_new_ds__KeyInfoType


#define soap_new_req__ds__KeyInfo soap_new_req_ds__KeyInfoType


#define soap_new_set__ds__KeyInfo soap_new_set_ds__KeyInfoType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__KeyInfo(struct soap*, const struct ds__KeyInfoType *, const char*, const char*);

inline int soap_write__ds__KeyInfo(struct soap *soap, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ds__KeyInfo(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__KeyInfo(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__KeyInfo(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__KeyInfo soap_get_ds__KeyInfoType


#define soap_read__ds__KeyInfo soap_read_ds__KeyInfoType


#define soap_GET__ds__KeyInfo soap_GET_ds__KeyInfoType


#define soap_POST_recv__ds__KeyInfo soap_POST_recv_ds__KeyInfoType

#endif

#ifndef SOAP_TYPE_ds__RetrievalMethodType_DEFINED
#define SOAP_TYPE_ds__RetrievalMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RetrievalMethodType(struct soap*, const char*, int, const struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_in_ds__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC1 struct ds__RetrievalMethodType * SOAP_FMAC2 soap_instantiate_ds__RetrievalMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RetrievalMethodType * soap_new_ds__RetrievalMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__RetrievalMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__RetrievalMethodType * soap_new_req_ds__RetrievalMethodType(
	struct soap *soap)
{
	struct ds__RetrievalMethodType *_p = ::soap_new_ds__RetrievalMethodType(soap);
	if (_p)
	{	::soap_default_ds__RetrievalMethodType(soap, _p);
	}
	return _p;
}

inline struct ds__RetrievalMethodType * soap_new_set_ds__RetrievalMethodType(
	struct soap *soap,
	struct ds__TransformsType *Transforms,
	char *URI,
	char *Type)
{
	struct ds__RetrievalMethodType *_p = ::soap_new_ds__RetrievalMethodType(soap);
	if (_p)
	{	::soap_default_ds__RetrievalMethodType(soap, _p);
		_p->Transforms = Transforms;
		_p->URI = URI;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *, const char*, const char*);

inline int soap_write_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_get_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *, const char*, const char*);

inline int soap_read_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *p)
{
	if (p)
	{	::soap_default_ds__RetrievalMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__RetrievalMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__RetrievalMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *p)
{
	if (::soap_read_ds__RetrievalMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__KeyValueType_DEFINED
#define SOAP_TYPE_ds__KeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyValueType(struct soap*, struct ds__KeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyValueType(struct soap*, const char*, int, const struct ds__KeyValueType *, const char*);
SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_in_ds__KeyValueType(struct soap*, const char*, struct ds__KeyValueType *, const char*);
SOAP_FMAC1 struct ds__KeyValueType * SOAP_FMAC2 soap_instantiate_ds__KeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyValueType * soap_new_ds__KeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__KeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__KeyValueType * soap_new_req_ds__KeyValueType(
	struct soap *soap)
{
	struct ds__KeyValueType *_p = ::soap_new_ds__KeyValueType(soap);
	if (_p)
	{	::soap_default_ds__KeyValueType(soap, _p);
	}
	return _p;
}

inline struct ds__KeyValueType * soap_new_set_ds__KeyValueType(
	struct soap *soap,
	struct ds__DSAKeyValueType *DSAKeyValue,
	struct ds__RSAKeyValueType *RSAKeyValue)
{
	struct ds__KeyValueType *_p = ::soap_new_ds__KeyValueType(soap);
	if (_p)
	{	::soap_default_ds__KeyValueType(soap, _p);
		_p->DSAKeyValue = DSAKeyValue;
		_p->RSAKeyValue = RSAKeyValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *, const char*, const char*);

inline int soap_write_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_get_ds__KeyValueType(struct soap*, struct ds__KeyValueType *, const char*, const char*);

inline int soap_read_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *p)
{
	if (p)
	{	::soap_default_ds__KeyValueType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__KeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__KeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *p)
{
	if (::soap_read_ds__KeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__DigestMethodType_DEFINED
#define SOAP_TYPE_ds__DigestMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DigestMethodType(struct soap*, const char*, int, const struct ds__DigestMethodType *, const char*);
SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_in_ds__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType *, const char*);
SOAP_FMAC1 struct ds__DigestMethodType * SOAP_FMAC2 soap_instantiate_ds__DigestMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DigestMethodType * soap_new_ds__DigestMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__DigestMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__DigestMethodType * soap_new_req_ds__DigestMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__DigestMethodType *_p = ::soap_new_ds__DigestMethodType(soap);
	if (_p)
	{	::soap_default_ds__DigestMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__DigestMethodType * soap_new_set_ds__DigestMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__DigestMethodType *_p = ::soap_new_ds__DigestMethodType(soap);
	if (_p)
	{	::soap_default_ds__DigestMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *, const char*, const char*);

inline int soap_write_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_get_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *, const char*, const char*);

inline int soap_read_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *p)
{
	if (p)
	{	::soap_default_ds__DigestMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__DigestMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__DigestMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *p)
{
	if (::soap_read_ds__DigestMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _ds__Transform is a typedef synonym of ds__TransformType */

#ifndef SOAP_TYPE__ds__Transform_DEFINED
#define SOAP_TYPE__ds__Transform_DEFINED

#define soap_default__ds__Transform soap_default_ds__TransformType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformType(struct soap*, const struct ds__TransformType *);

#define soap_serialize__ds__Transform soap_serialize_ds__TransformType


#define soap__ds__Transform2s soap_ds__TransformType2s


#define soap_out__ds__Transform soap_out_ds__TransformType


#define soap_s2_ds__Transform soap_s2ds__TransformType


#define soap_in__ds__Transform soap_in_ds__TransformType


#define soap_instantiate__ds__Transform soap_instantiate_ds__TransformType


#define soap_new__ds__Transform soap_new_ds__TransformType


#define soap_new_req__ds__Transform soap_new_req_ds__TransformType


#define soap_new_set__ds__Transform soap_new_set_ds__TransformType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__Transform(struct soap*, const struct ds__TransformType *, const char*, const char*);

inline int soap_write__ds__Transform(struct soap *soap, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ds__Transform(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__Transform(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__Transform(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__Transform soap_get_ds__TransformType


#define soap_read__ds__Transform soap_read_ds__TransformType


#define soap_GET__ds__Transform soap_GET_ds__TransformType


#define soap_POST_recv__ds__Transform soap_POST_recv_ds__TransformType

#endif

#ifndef SOAP_TYPE_ds__TransformType_DEFINED
#define SOAP_TYPE_ds__TransformType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformType(struct soap*, struct ds__TransformType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformType(struct soap*, const struct ds__TransformType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformType(struct soap*, const char*, int, const struct ds__TransformType *, const char*);
SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_in_ds__TransformType(struct soap*, const char*, struct ds__TransformType *, const char*);
SOAP_FMAC1 struct ds__TransformType * SOAP_FMAC2 soap_instantiate_ds__TransformType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformType * soap_new_ds__TransformType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__TransformType(soap, n, NULL, NULL, NULL);
}

inline struct ds__TransformType * soap_new_req_ds__TransformType(
	struct soap *soap)
{
	struct ds__TransformType *_p = ::soap_new_ds__TransformType(soap);
	if (_p)
	{	::soap_default_ds__TransformType(soap, _p);
	}
	return _p;
}

inline struct ds__TransformType * soap_new_set_ds__TransformType(
	struct soap *soap,
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces,
	char *__any,
	char *Algorithm)
{
	struct ds__TransformType *_p = ::soap_new_ds__TransformType(soap);
	if (_p)
	{	::soap_default_ds__TransformType(soap, _p);
		_p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces;
		_p->__any = __any;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformType(struct soap*, const struct ds__TransformType *, const char*, const char*);

inline int soap_write_ds__TransformType(struct soap *soap, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_get_ds__TransformType(struct soap*, struct ds__TransformType *, const char*, const char*);

inline int soap_read_ds__TransformType(struct soap *soap, struct ds__TransformType *p)
{
	if (p)
	{	::soap_default_ds__TransformType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__TransformType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__TransformType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__TransformType(struct soap *soap, struct ds__TransformType *p)
{
	if (::soap_read_ds__TransformType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__c14n__InclusiveNamespaces_DEFINED
#define SOAP_TYPE__c14n__InclusiveNamespaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__c14n__InclusiveNamespaces(struct soap*, const char*, int, const struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_in__c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC1 struct _c14n__InclusiveNamespaces * SOAP_FMAC2 soap_instantiate__c14n__InclusiveNamespaces(struct soap*, int, const char*, const char*, size_t*);

inline struct _c14n__InclusiveNamespaces * soap_new__c14n__InclusiveNamespaces(struct soap *soap, int n = -1)
{
	return soap_instantiate__c14n__InclusiveNamespaces(soap, n, NULL, NULL, NULL);
}

inline struct _c14n__InclusiveNamespaces * soap_new_req__c14n__InclusiveNamespaces(
	struct soap *soap)
{
	struct _c14n__InclusiveNamespaces *_p = ::soap_new__c14n__InclusiveNamespaces(soap);
	if (_p)
	{	::soap_default__c14n__InclusiveNamespaces(soap, _p);
	}
	return _p;
}

inline struct _c14n__InclusiveNamespaces * soap_new_set__c14n__InclusiveNamespaces(
	struct soap *soap,
	char *PrefixList)
{
	struct _c14n__InclusiveNamespaces *_p = ::soap_new__c14n__InclusiveNamespaces(soap);
	if (_p)
	{	::soap_default__c14n__InclusiveNamespaces(soap, _p);
		_p->PrefixList = PrefixList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *, const char*, const char*);

inline int soap_write__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_get__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *, const char*, const char*);

inline int soap_read__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *p)
{
	if (p)
	{	::soap_default__c14n__InclusiveNamespaces(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__c14n__InclusiveNamespaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__c14n__InclusiveNamespaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *p)
{
	if (::soap_read__c14n__InclusiveNamespaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__TransformsType_DEFINED
#define SOAP_TYPE_ds__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformsType(struct soap*, struct ds__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformsType(struct soap*, const struct ds__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformsType(struct soap*, const char*, int, const struct ds__TransformsType *, const char*);
SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_in_ds__TransformsType(struct soap*, const char*, struct ds__TransformsType *, const char*);
SOAP_FMAC1 struct ds__TransformsType * SOAP_FMAC2 soap_instantiate_ds__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformsType * soap_new_ds__TransformsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__TransformsType(soap, n, NULL, NULL, NULL);
}

inline struct ds__TransformsType * soap_new_req_ds__TransformsType(
	struct soap *soap,
	int __sizeTransform,
	struct ds__TransformType *Transform)
{
	struct ds__TransformsType *_p = ::soap_new_ds__TransformsType(soap);
	if (_p)
	{	::soap_default_ds__TransformsType(soap, _p);
		_p->__sizeTransform = __sizeTransform;
		_p->Transform = Transform;
	}
	return _p;
}

inline struct ds__TransformsType * soap_new_set_ds__TransformsType(
	struct soap *soap,
	int __sizeTransform,
	struct ds__TransformType *Transform)
{
	struct ds__TransformsType *_p = ::soap_new_ds__TransformsType(soap);
	if (_p)
	{	::soap_default_ds__TransformsType(soap, _p);
		_p->__sizeTransform = __sizeTransform;
		_p->Transform = Transform;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformsType(struct soap*, const struct ds__TransformsType *, const char*, const char*);

inline int soap_write_ds__TransformsType(struct soap *soap, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_get_ds__TransformsType(struct soap*, struct ds__TransformsType *, const char*, const char*);

inline int soap_read_ds__TransformsType(struct soap *soap, struct ds__TransformsType *p)
{
	if (p)
	{	::soap_default_ds__TransformsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__TransformsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__TransformsType(struct soap *soap, struct ds__TransformsType *p)
{
	if (::soap_read_ds__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__ReferenceType_DEFINED
#define SOAP_TYPE_ds__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__ReferenceType(struct soap*, struct ds__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__ReferenceType(struct soap*, const char*, int, const struct ds__ReferenceType *, const char*);
SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_in_ds__ReferenceType(struct soap*, const char*, struct ds__ReferenceType *, const char*);
SOAP_FMAC1 struct ds__ReferenceType * SOAP_FMAC2 soap_instantiate_ds__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__ReferenceType * soap_new_ds__ReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__ReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct ds__ReferenceType * soap_new_req_ds__ReferenceType(
	struct soap *soap,
	struct ds__DigestMethodType *DigestMethod,
	char *DigestValue)
{
	struct ds__ReferenceType *_p = ::soap_new_ds__ReferenceType(soap);
	if (_p)
	{	::soap_default_ds__ReferenceType(soap, _p);
		_p->DigestMethod = DigestMethod;
		_p->DigestValue = DigestValue;
	}
	return _p;
}

inline struct ds__ReferenceType * soap_new_set_ds__ReferenceType(
	struct soap *soap,
	struct ds__TransformsType *Transforms,
	struct ds__DigestMethodType *DigestMethod,
	char *DigestValue,
	char *Id,
	char *URI,
	char *Type)
{
	struct ds__ReferenceType *_p = ::soap_new_ds__ReferenceType(soap);
	if (_p)
	{	::soap_default_ds__ReferenceType(soap, _p);
		_p->Transforms = Transforms;
		_p->DigestMethod = DigestMethod;
		_p->DigestValue = DigestValue;
		_p->Id = Id;
		_p->URI = URI;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *, const char*, const char*);

inline int soap_write_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_get_ds__ReferenceType(struct soap*, struct ds__ReferenceType *, const char*, const char*);

inline int soap_read_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *p)
{
	if (p)
	{	::soap_default_ds__ReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__ReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *p)
{
	if (::soap_read_ds__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__SignatureMethodType_DEFINED
#define SOAP_TYPE_ds__SignatureMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureMethodType(struct soap*, const char*, int, const struct ds__SignatureMethodType *, const char*);
SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_in_ds__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType *, const char*);
SOAP_FMAC1 struct ds__SignatureMethodType * SOAP_FMAC2 soap_instantiate_ds__SignatureMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureMethodType * soap_new_ds__SignatureMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignatureMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignatureMethodType * soap_new_req_ds__SignatureMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__SignatureMethodType *_p = ::soap_new_ds__SignatureMethodType(soap);
	if (_p)
	{	::soap_default_ds__SignatureMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__SignatureMethodType * soap_new_set_ds__SignatureMethodType(
	struct soap *soap,
	int *HMACOutputLength,
	char *Algorithm)
{
	struct ds__SignatureMethodType *_p = ::soap_new_ds__SignatureMethodType(soap);
	if (_p)
	{	::soap_default_ds__SignatureMethodType(soap, _p);
		_p->HMACOutputLength = HMACOutputLength;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *, const char*, const char*);

inline int soap_write_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_get_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *, const char*, const char*);

inline int soap_read_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *p)
{
	if (p)
	{	::soap_default_ds__SignatureMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__SignatureMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__SignatureMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *p)
{
	if (::soap_read_ds__SignatureMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__CanonicalizationMethodType_DEFINED
#define SOAP_TYPE_ds__CanonicalizationMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__CanonicalizationMethodType(struct soap*, const char*, int, const struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_in_ds__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC1 struct ds__CanonicalizationMethodType * SOAP_FMAC2 soap_instantiate_ds__CanonicalizationMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__CanonicalizationMethodType * soap_new_ds__CanonicalizationMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__CanonicalizationMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__CanonicalizationMethodType * soap_new_req_ds__CanonicalizationMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__CanonicalizationMethodType *_p = ::soap_new_ds__CanonicalizationMethodType(soap);
	if (_p)
	{	::soap_default_ds__CanonicalizationMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__CanonicalizationMethodType * soap_new_set_ds__CanonicalizationMethodType(
	struct soap *soap,
	char *Algorithm,
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces)
{
	struct ds__CanonicalizationMethodType *_p = ::soap_new_ds__CanonicalizationMethodType(soap);
	if (_p)
	{	::soap_default_ds__CanonicalizationMethodType(soap, _p);
		_p->Algorithm = Algorithm;
		_p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *, const char*, const char*);

inline int soap_write_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_get_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *, const char*, const char*);

inline int soap_read_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *p)
{
	if (p)
	{	::soap_default_ds__CanonicalizationMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__CanonicalizationMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__CanonicalizationMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *p)
{
	if (::soap_read_ds__CanonicalizationMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _ds__Signature is a typedef synonym of ds__SignatureType */

#ifndef SOAP_TYPE__ds__Signature_DEFINED
#define SOAP_TYPE__ds__Signature_DEFINED

#define soap_default__ds__Signature soap_default_ds__SignatureType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureType(struct soap*, const struct ds__SignatureType *);

#define soap_serialize__ds__Signature soap_serialize_ds__SignatureType


#define soap__ds__Signature2s soap_ds__SignatureType2s


#define soap_out__ds__Signature soap_out_ds__SignatureType


#define soap_s2_ds__Signature soap_s2ds__SignatureType


#define soap_in__ds__Signature soap_in_ds__SignatureType


#define soap_instantiate__ds__Signature soap_instantiate_ds__SignatureType


#define soap_new__ds__Signature soap_new_ds__SignatureType


#define soap_new_req__ds__Signature soap_new_req_ds__SignatureType


#define soap_new_set__ds__Signature soap_new_set_ds__SignatureType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__Signature(struct soap*, const struct ds__SignatureType *, const char*, const char*);

inline int soap_write__ds__Signature(struct soap *soap, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ds__Signature(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__Signature(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__Signature(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__Signature soap_get_ds__SignatureType


#define soap_read__ds__Signature soap_read_ds__SignatureType


#define soap_GET__ds__Signature soap_GET_ds__SignatureType


#define soap_POST_recv__ds__Signature soap_POST_recv_ds__SignatureType

#endif

#ifndef SOAP_TYPE_ds__SignedInfoType_DEFINED
#define SOAP_TYPE_ds__SignedInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignedInfoType(struct soap*, const char*, int, const struct ds__SignedInfoType *, const char*);
SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_in_ds__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType *, const char*);
SOAP_FMAC1 struct ds__SignedInfoType * SOAP_FMAC2 soap_instantiate_ds__SignedInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignedInfoType * soap_new_ds__SignedInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignedInfoType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignedInfoType * soap_new_req_ds__SignedInfoType(
	struct soap *soap,
	struct ds__CanonicalizationMethodType *CanonicalizationMethod,
	struct ds__SignatureMethodType *SignatureMethod,
	int __sizeReference,
	struct ds__ReferenceType **Reference)
{
	struct ds__SignedInfoType *_p = ::soap_new_ds__SignedInfoType(soap);
	if (_p)
	{	::soap_default_ds__SignedInfoType(soap, _p);
		_p->CanonicalizationMethod = CanonicalizationMethod;
		_p->SignatureMethod = SignatureMethod;
		_p->__sizeReference = __sizeReference;
		_p->Reference = Reference;
	}
	return _p;
}

inline struct ds__SignedInfoType * soap_new_set_ds__SignedInfoType(
	struct soap *soap,
	struct ds__CanonicalizationMethodType *CanonicalizationMethod,
	struct ds__SignatureMethodType *SignatureMethod,
	int __sizeReference,
	struct ds__ReferenceType **Reference,
	char *Id)
{
	struct ds__SignedInfoType *_p = ::soap_new_ds__SignedInfoType(soap);
	if (_p)
	{	::soap_default_ds__SignedInfoType(soap, _p);
		_p->CanonicalizationMethod = CanonicalizationMethod;
		_p->SignatureMethod = SignatureMethod;
		_p->__sizeReference = __sizeReference;
		_p->Reference = Reference;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *, const char*, const char*);

inline int soap_write_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_get_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *, const char*, const char*);

inline int soap_read_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *p)
{
	if (p)
	{	::soap_default_ds__SignedInfoType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__SignedInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__SignedInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *p)
{
	if (::soap_read_ds__SignedInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__SignatureType_DEFINED
#define SOAP_TYPE_ds__SignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureType(struct soap*, struct ds__SignatureType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureType(struct soap*, const struct ds__SignatureType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureType(struct soap*, const char*, int, const struct ds__SignatureType *, const char*);
SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_in_ds__SignatureType(struct soap*, const char*, struct ds__SignatureType *, const char*);
SOAP_FMAC1 struct ds__SignatureType * SOAP_FMAC2 soap_instantiate_ds__SignatureType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureType * soap_new_ds__SignatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignatureType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignatureType * soap_new_req_ds__SignatureType(
	struct soap *soap)
{
	struct ds__SignatureType *_p = ::soap_new_ds__SignatureType(soap);
	if (_p)
	{	::soap_default_ds__SignatureType(soap, _p);
	}
	return _p;
}

inline struct ds__SignatureType * soap_new_set_ds__SignatureType(
	struct soap *soap,
	struct ds__SignedInfoType *SignedInfo,
	char *SignatureValue,
	struct ds__KeyInfoType *KeyInfo,
	char *Id)
{
	struct ds__SignatureType *_p = ::soap_new_ds__SignatureType(soap);
	if (_p)
	{	::soap_default_ds__SignatureType(soap, _p);
		_p->SignedInfo = SignedInfo;
		_p->SignatureValue = SignatureValue;
		_p->KeyInfo = KeyInfo;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureType(struct soap*, const struct ds__SignatureType *, const char*, const char*);

inline int soap_write_ds__SignatureType(struct soap *soap, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_get_ds__SignatureType(struct soap*, struct ds__SignatureType *, const char*, const char*);

inline int soap_read_ds__SignatureType(struct soap *soap, struct ds__SignatureType *p)
{
	if (p)
	{	::soap_default_ds__SignatureType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__SignatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__SignatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__SignatureType(struct soap *soap, struct ds__SignatureType *p)
{
	if (::soap_read_ds__SignatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_xenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedKeyType(struct soap*, const char*, int, const struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_in_xenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedKeyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedKeyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedKeyType * soap_new_xenc__EncryptedKeyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedKeyType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedKeyType * soap_new_req_xenc__EncryptedKeyType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedKeyType *_p = ::soap_new_xenc__EncryptedKeyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedKeyType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedKeyType * soap_new_set_xenc__EncryptedKeyType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding,
	struct _xenc__ReferenceList *ReferenceList,
	char *CarriedKeyName,
	char *Recipient)
{
	struct xenc__EncryptedKeyType *_p = ::soap_new_xenc__EncryptedKeyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedKeyType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
		_p->ReferenceList = ReferenceList;
		_p->CarriedKeyName = CarriedKeyName;
		_p->Recipient = Recipient;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *, const char*, const char*);

inline int soap_write_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_get_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *, const char*, const char*);

inline int soap_read_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptedKeyType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptedKeyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptedKeyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *p)
{
	if (::soap_read_xenc__EncryptedKeyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__KeyInfoType_DEFINED
#define SOAP_TYPE_ds__KeyInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyInfoType(struct soap*, const char*, int, const struct ds__KeyInfoType *, const char*);
SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_in_ds__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType *, const char*);
SOAP_FMAC1 struct ds__KeyInfoType * SOAP_FMAC2 soap_instantiate_ds__KeyInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyInfoType * soap_new_ds__KeyInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__KeyInfoType(soap, n, NULL, NULL, NULL);
}

inline struct ds__KeyInfoType * soap_new_req_ds__KeyInfoType(
	struct soap *soap)
{
	struct ds__KeyInfoType *_p = ::soap_new_ds__KeyInfoType(soap);
	if (_p)
	{	::soap_default_ds__KeyInfoType(soap, _p);
	}
	return _p;
}

inline struct ds__KeyInfoType * soap_new_set_ds__KeyInfoType(
	struct soap *soap,
	struct xenc__EncryptedKeyType *xenc__EncryptedKey,
	char *KeyName,
	struct ds__KeyValueType *KeyValue,
	struct ds__RetrievalMethodType *RetrievalMethod,
	struct ds__X509DataType *X509Data,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	char *Id)
{
	struct ds__KeyInfoType *_p = ::soap_new_ds__KeyInfoType(soap);
	if (_p)
	{	::soap_default_ds__KeyInfoType(soap, _p);
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
		_p->KeyName = KeyName;
		_p->KeyValue = KeyValue;
		_p->RetrievalMethod = RetrievalMethod;
		_p->X509Data = X509Data;
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *, const char*, const char*);

inline int soap_write_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_get_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *, const char*, const char*);

inline int soap_read_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *p)
{
	if (p)
	{	::soap_default_ds__KeyInfoType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__KeyInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__KeyInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *p)
{
	if (::soap_read_ds__KeyInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__X509DataType_DEFINED
#define SOAP_TYPE_ds__X509DataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509DataType(struct soap*, struct ds__X509DataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509DataType(struct soap*, const struct ds__X509DataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509DataType(struct soap*, const char*, int, const struct ds__X509DataType *, const char*);
SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_in_ds__X509DataType(struct soap*, const char*, struct ds__X509DataType *, const char*);
SOAP_FMAC1 struct ds__X509DataType * SOAP_FMAC2 soap_instantiate_ds__X509DataType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509DataType * soap_new_ds__X509DataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__X509DataType(soap, n, NULL, NULL, NULL);
}

inline struct ds__X509DataType * soap_new_req_ds__X509DataType(
	struct soap *soap)
{
	struct ds__X509DataType *_p = ::soap_new_ds__X509DataType(soap);
	if (_p)
	{	::soap_default_ds__X509DataType(soap, _p);
	}
	return _p;
}

inline struct ds__X509DataType * soap_new_set_ds__X509DataType(
	struct soap *soap,
	struct ds__X509IssuerSerialType *X509IssuerSerial,
	char *X509SKI,
	char *X509SubjectName,
	char *X509Certificate,
	char *X509CRL)
{
	struct ds__X509DataType *_p = ::soap_new_ds__X509DataType(soap);
	if (_p)
	{	::soap_default_ds__X509DataType(soap, _p);
		_p->X509IssuerSerial = X509IssuerSerial;
		_p->X509SKI = X509SKI;
		_p->X509SubjectName = X509SubjectName;
		_p->X509Certificate = X509Certificate;
		_p->X509CRL = X509CRL;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509DataType(struct soap*, const struct ds__X509DataType *, const char*, const char*);

inline int soap_write_ds__X509DataType(struct soap *soap, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_get_ds__X509DataType(struct soap*, struct ds__X509DataType *, const char*, const char*);

inline int soap_read_ds__X509DataType(struct soap *soap, struct ds__X509DataType *p)
{
	if (p)
	{	::soap_default_ds__X509DataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__X509DataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__X509DataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__X509DataType(struct soap *soap, struct ds__X509DataType *p)
{
	if (::soap_read_ds__X509DataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__SecurityTokenReference_DEFINED
#define SOAP_TYPE__wsse__SecurityTokenReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__SecurityTokenReference(struct soap*, const char*, int, const struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_in__wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC1 struct _wsse__SecurityTokenReference * SOAP_FMAC2 soap_instantiate__wsse__SecurityTokenReference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__SecurityTokenReference * soap_new__wsse__SecurityTokenReference(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__SecurityTokenReference(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__SecurityTokenReference * soap_new_req__wsse__SecurityTokenReference(
	struct soap *soap)
{
	struct _wsse__SecurityTokenReference *_p = ::soap_new__wsse__SecurityTokenReference(soap);
	if (_p)
	{	::soap_default__wsse__SecurityTokenReference(soap, _p);
	}
	return _p;
}

inline struct _wsse__SecurityTokenReference * soap_new_set__wsse__SecurityTokenReference(
	struct soap *soap,
	struct _wsse__Reference *Reference,
	struct _wsse__KeyIdentifier *KeyIdentifier,
	struct _wsse__Embedded *Embedded,
	struct ds__X509DataType *ds__X509Data,
	char *wsu__Id,
	char *wsc__Instance,
	char *Usage)
{
	struct _wsse__SecurityTokenReference *_p = ::soap_new__wsse__SecurityTokenReference(soap);
	if (_p)
	{	::soap_default__wsse__SecurityTokenReference(soap, _p);
		_p->Reference = Reference;
		_p->KeyIdentifier = KeyIdentifier;
		_p->Embedded = Embedded;
		_p->ds__X509Data = ds__X509Data;
		_p->wsu__Id = wsu__Id;
		_p->wsc__Instance = wsc__Instance;
		_p->Usage = Usage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *, const char*, const char*);

inline int soap_write__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_get__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *, const char*, const char*);

inline int soap_read__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *p)
{
	if (p)
	{	::soap_default__wsse__SecurityTokenReference(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__SecurityTokenReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__SecurityTokenReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *p)
{
	if (::soap_read__wsse__SecurityTokenReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__KeyIdentifier_DEFINED
#define SOAP_TYPE__wsse__KeyIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__KeyIdentifier(struct soap*, const char*, int, const struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_in__wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC1 struct _wsse__KeyIdentifier * SOAP_FMAC2 soap_instantiate__wsse__KeyIdentifier(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__KeyIdentifier * soap_new__wsse__KeyIdentifier(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__KeyIdentifier(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__KeyIdentifier * soap_new_req__wsse__KeyIdentifier(
	struct soap *soap)
{
	struct _wsse__KeyIdentifier *_p = ::soap_new__wsse__KeyIdentifier(soap);
	if (_p)
	{	::soap_default__wsse__KeyIdentifier(soap, _p);
	}
	return _p;
}

inline struct _wsse__KeyIdentifier * soap_new_set__wsse__KeyIdentifier(
	struct soap *soap,
	char *__item,
	char *wsu__Id,
	char *ValueType,
	char *EncodingType)
{
	struct _wsse__KeyIdentifier *_p = ::soap_new__wsse__KeyIdentifier(soap);
	if (_p)
	{	::soap_default__wsse__KeyIdentifier(soap, _p);
		_p->__item = __item;
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *, const char*, const char*);

inline int soap_write__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_get__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *, const char*, const char*);

inline int soap_read__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *p)
{
	if (p)
	{	::soap_default__wsse__KeyIdentifier(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__KeyIdentifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__KeyIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *p)
{
	if (::soap_read__wsse__KeyIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__Embedded_DEFINED
#define SOAP_TYPE__wsse__Embedded_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Embedded(struct soap*, struct _wsse__Embedded *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Embedded(struct soap*, const struct _wsse__Embedded *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Embedded(struct soap*, const char*, int, const struct _wsse__Embedded *, const char*);
SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_in__wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded *, const char*);
SOAP_FMAC1 struct _wsse__Embedded * SOAP_FMAC2 soap_instantiate__wsse__Embedded(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Embedded * soap_new__wsse__Embedded(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Embedded(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Embedded * soap_new_req__wsse__Embedded(
	struct soap *soap)
{
	struct _wsse__Embedded *_p = ::soap_new__wsse__Embedded(soap);
	if (_p)
	{	::soap_default__wsse__Embedded(soap, _p);
	}
	return _p;
}

inline struct _wsse__Embedded * soap_new_set__wsse__Embedded(
	struct soap *soap,
	char *wsu__Id,
	char *ValueType)
{
	struct _wsse__Embedded *_p = ::soap_new__wsse__Embedded(soap);
	if (_p)
	{	::soap_default__wsse__Embedded(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Embedded(struct soap*, const struct _wsse__Embedded *, const char*, const char*);

inline int soap_write__wsse__Embedded(struct soap *soap, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_get__wsse__Embedded(struct soap*, struct _wsse__Embedded *, const char*, const char*);

inline int soap_read__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *p)
{
	if (p)
	{	::soap_default__wsse__Embedded(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Embedded(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Embedded(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *p)
{
	if (::soap_read__wsse__Embedded(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__Reference_DEFINED
#define SOAP_TYPE__wsse__Reference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Reference(struct soap*, struct _wsse__Reference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Reference(struct soap*, const struct _wsse__Reference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Reference(struct soap*, const char*, int, const struct _wsse__Reference *, const char*);
SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_in__wsse__Reference(struct soap*, const char*, struct _wsse__Reference *, const char*);
SOAP_FMAC1 struct _wsse__Reference * SOAP_FMAC2 soap_instantiate__wsse__Reference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Reference * soap_new__wsse__Reference(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Reference(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Reference * soap_new_req__wsse__Reference(
	struct soap *soap)
{
	struct _wsse__Reference *_p = ::soap_new__wsse__Reference(soap);
	if (_p)
	{	::soap_default__wsse__Reference(soap, _p);
	}
	return _p;
}

inline struct _wsse__Reference * soap_new_set__wsse__Reference(
	struct soap *soap,
	char *URI,
	char *ValueType)
{
	struct _wsse__Reference *_p = ::soap_new__wsse__Reference(soap);
	if (_p)
	{	::soap_default__wsse__Reference(soap, _p);
		_p->URI = URI;
		_p->ValueType = ValueType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Reference(struct soap*, const struct _wsse__Reference *, const char*, const char*);

inline int soap_write__wsse__Reference(struct soap *soap, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_get__wsse__Reference(struct soap*, struct _wsse__Reference *, const char*, const char*);

inline int soap_read__wsse__Reference(struct soap *soap, struct _wsse__Reference *p)
{
	if (p)
	{	::soap_default__wsse__Reference(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Reference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Reference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Reference(struct soap *soap, struct _wsse__Reference *p)
{
	if (::soap_read__wsse__Reference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__BinarySecurityToken_DEFINED
#define SOAP_TYPE__wsse__BinarySecurityToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__BinarySecurityToken(struct soap*, const char*, int, const struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_in__wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC1 struct _wsse__BinarySecurityToken * SOAP_FMAC2 soap_instantiate__wsse__BinarySecurityToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__BinarySecurityToken * soap_new__wsse__BinarySecurityToken(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__BinarySecurityToken(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__BinarySecurityToken * soap_new_req__wsse__BinarySecurityToken(
	struct soap *soap)
{
	struct _wsse__BinarySecurityToken *_p = ::soap_new__wsse__BinarySecurityToken(soap);
	if (_p)
	{	::soap_default__wsse__BinarySecurityToken(soap, _p);
	}
	return _p;
}

inline struct _wsse__BinarySecurityToken * soap_new_set__wsse__BinarySecurityToken(
	struct soap *soap,
	char *__item,
	char *wsu__Id,
	char *ValueType,
	char *EncodingType)
{
	struct _wsse__BinarySecurityToken *_p = ::soap_new__wsse__BinarySecurityToken(soap);
	if (_p)
	{	::soap_default__wsse__BinarySecurityToken(soap, _p);
		_p->__item = __item;
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *, const char*, const char*);

inline int soap_write__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_get__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *, const char*, const char*);

inline int soap_read__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *p)
{
	if (p)
	{	::soap_default__wsse__BinarySecurityToken(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__BinarySecurityToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__BinarySecurityToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *p)
{
	if (::soap_read__wsse__BinarySecurityToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__Password_DEFINED
#define SOAP_TYPE__wsse__Password_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Password(struct soap*, struct _wsse__Password *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Password(struct soap*, const struct _wsse__Password *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Password(struct soap*, const char*, int, const struct _wsse__Password *, const char*);
SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_in__wsse__Password(struct soap*, const char*, struct _wsse__Password *, const char*);
SOAP_FMAC1 struct _wsse__Password * SOAP_FMAC2 soap_instantiate__wsse__Password(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Password * soap_new__wsse__Password(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Password(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Password * soap_new_req__wsse__Password(
	struct soap *soap)
{
	struct _wsse__Password *_p = ::soap_new__wsse__Password(soap);
	if (_p)
	{	::soap_default__wsse__Password(soap, _p);
	}
	return _p;
}

inline struct _wsse__Password * soap_new_set__wsse__Password(
	struct soap *soap,
	char *__item,
	char *Type)
{
	struct _wsse__Password *_p = ::soap_new__wsse__Password(soap);
	if (_p)
	{	::soap_default__wsse__Password(soap, _p);
		_p->__item = __item;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Password(struct soap*, const struct _wsse__Password *, const char*, const char*);

inline int soap_write__wsse__Password(struct soap *soap, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_get__wsse__Password(struct soap*, struct _wsse__Password *, const char*, const char*);

inline int soap_read__wsse__Password(struct soap *soap, struct _wsse__Password *p)
{
	if (p)
	{	::soap_default__wsse__Password(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Password(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Password(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Password(struct soap *soap, struct _wsse__Password *p)
{
	if (::soap_read__wsse__Password(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__UsernameToken_DEFINED
#define SOAP_TYPE__wsse__UsernameToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__UsernameToken(struct soap*, const char*, int, const struct _wsse__UsernameToken *, const char*);
SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_in__wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken *, const char*);
SOAP_FMAC1 struct _wsse__UsernameToken * SOAP_FMAC2 soap_instantiate__wsse__UsernameToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__UsernameToken * soap_new__wsse__UsernameToken(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__UsernameToken(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__UsernameToken * soap_new_req__wsse__UsernameToken(
	struct soap *soap)
{
	struct _wsse__UsernameToken *_p = ::soap_new__wsse__UsernameToken(soap);
	if (_p)
	{	::soap_default__wsse__UsernameToken(soap, _p);
	}
	return _p;
}

inline struct _wsse__UsernameToken * soap_new_set__wsse__UsernameToken(
	struct soap *soap,
	char *Username,
	struct _wsse__Password *Password,
	struct wsse__EncodedString *Nonce,
	char *Salt,
	unsigned int *Iteration,
	char *wsu__Created,
	char *wsu__Id)
{
	struct _wsse__UsernameToken *_p = ::soap_new__wsse__UsernameToken(soap);
	if (_p)
	{	::soap_default__wsse__UsernameToken(soap, _p);
		_p->Username = Username;
		_p->Password = Password;
		_p->Nonce = Nonce;
		_p->Salt = Salt;
		_p->Iteration = Iteration;
		_p->wsu__Created = wsu__Created;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *, const char*, const char*);

inline int soap_write__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_get__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *, const char*, const char*);

inline int soap_read__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *p)
{
	if (p)
	{	::soap_default__wsse__UsernameToken(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__UsernameToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__UsernameToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *p)
{
	if (::soap_read__wsse__UsernameToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsse__EncodedString_DEFINED
#define SOAP_TYPE_wsse__EncodedString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsse__EncodedString(struct soap*, struct wsse__EncodedString *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsse__EncodedString(struct soap*, const struct wsse__EncodedString *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__EncodedString(struct soap*, const char*, int, const struct wsse__EncodedString *, const char*);
SOAP_FMAC3 struct wsse__EncodedString * SOAP_FMAC4 soap_in_wsse__EncodedString(struct soap*, const char*, struct wsse__EncodedString *, const char*);
SOAP_FMAC1 struct wsse__EncodedString * SOAP_FMAC2 soap_instantiate_wsse__EncodedString(struct soap*, int, const char*, const char*, size_t*);

inline struct wsse__EncodedString * soap_new_wsse__EncodedString(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsse__EncodedString(soap, n, NULL, NULL, NULL);
}

inline struct wsse__EncodedString * soap_new_req_wsse__EncodedString(
	struct soap *soap)
{
	struct wsse__EncodedString *_p = ::soap_new_wsse__EncodedString(soap);
	if (_p)
	{	::soap_default_wsse__EncodedString(soap, _p);
	}
	return _p;
}

inline struct wsse__EncodedString * soap_new_set_wsse__EncodedString(
	struct soap *soap,
	char *__item,
	char *EncodingType,
	char *wsu__Id)
{
	struct wsse__EncodedString *_p = ::soap_new_wsse__EncodedString(soap);
	if (_p)
	{	::soap_default_wsse__EncodedString(soap, _p);
		_p->__item = __item;
		_p->EncodingType = EncodingType;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__EncodedString(struct soap*, const struct wsse__EncodedString *, const char*, const char*);

inline int soap_write_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsse__EncodedString * SOAP_FMAC4 soap_get_wsse__EncodedString(struct soap*, struct wsse__EncodedString *, const char*, const char*);

inline int soap_read_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString *p)
{
	if (p)
	{	::soap_default_wsse__EncodedString(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsse__EncodedString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsse__EncodedString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString *p)
{
	if (::soap_read_wsse__EncodedString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsu__Timestamp_DEFINED
#define SOAP_TYPE__wsu__Timestamp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsu__Timestamp(struct soap*, const char*, int, const struct _wsu__Timestamp *, const char*);
SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_in__wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp *, const char*);
SOAP_FMAC1 struct _wsu__Timestamp * SOAP_FMAC2 soap_instantiate__wsu__Timestamp(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsu__Timestamp * soap_new__wsu__Timestamp(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsu__Timestamp(soap, n, NULL, NULL, NULL);
}

inline struct _wsu__Timestamp * soap_new_req__wsu__Timestamp(
	struct soap *soap)
{
	struct _wsu__Timestamp *_p = ::soap_new__wsu__Timestamp(soap);
	if (_p)
	{	::soap_default__wsu__Timestamp(soap, _p);
	}
	return _p;
}

inline struct _wsu__Timestamp * soap_new_set__wsu__Timestamp(
	struct soap *soap,
	char *wsu__Id,
	char *Created,
	char *Expires)
{
	struct _wsu__Timestamp *_p = ::soap_new__wsu__Timestamp(soap);
	if (_p)
	{	::soap_default__wsu__Timestamp(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->Created = Created;
		_p->Expires = Expires;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *, const char*, const char*);

inline int soap_write__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_get__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *, const char*, const char*);

inline int soap_read__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *p)
{
	if (p)
	{	::soap_default__wsu__Timestamp(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsu__Timestamp(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsu__Timestamp(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *p)
{
	if (::soap_read__wsu__Timestamp(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	char *wsa5__MessageID,
	struct wsa5__RelatesToType *wsa5__RelatesTo,
	struct wsa5__EndpointReferenceType *wsa5__From,
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo,
	struct wsa5__EndpointReferenceType *wsa5__FaultTo,
	char *wsa5__To,
	char *wsa5__Action,
	struct chan__ChannelInstanceType *chan__ChannelInstance,
	struct _wsse__Security *wsse__Security)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsa5__MessageID = wsa5__MessageID;
		_p->wsa5__RelatesTo = wsa5__RelatesTo;
		_p->wsa5__From = wsa5__From;
		_p->wsa5__ReplyTo = wsa5__ReplyTo;
		_p->wsa5__FaultTo = wsa5__FaultTo;
		_p->wsa5__To = wsa5__To;
		_p->wsa5__Action = wsa5__Action;
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->wsse__Security = wsse__Security;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_chan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL);
}

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(
	struct soap *soap,
	int __item)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
	}
	return _p;
}

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(
	struct soap *soap,
	int __item,
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
		_p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_write_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_read_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (p)
	{	::soap_default_chan__ChannelInstanceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_chan__ChannelInstanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__ProblemAction is a typedef synonym of wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction_DEFINED
#define SOAP_TYPE__wsa5__ProblemAction_DEFINED

#define soap_default__wsa5__ProblemAction soap_default_wsa5__ProblemActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);

#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap__wsa5__ProblemAction2s soap_wsa5__ProblemActionType2s


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_s2_wsa5__ProblemAction soap_s2wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_new__wsa5__ProblemAction soap_new_wsa5__ProblemActionType


#define soap_new_req__wsa5__ProblemAction soap_new_req_wsa5__ProblemActionType


#define soap_new_set__wsa5__ProblemAction soap_new_set_wsa5__ProblemActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemAction(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write__wsa5__ProblemAction(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_read__wsa5__ProblemAction soap_read_wsa5__ProblemActionType


#define soap_GET__wsa5__ProblemAction soap_GET_wsa5__ProblemActionType


#define soap_POST_recv__wsa5__ProblemAction soap_POST_recv_wsa5__ProblemActionType

#endif
/* _wsa5__FaultTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo_DEFINED
#define SOAP_TYPE__wsa5__FaultTo_DEFINED

#define soap_default__wsa5__FaultTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__FaultTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__FaultTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__FaultTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__FaultTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__FaultTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__FaultTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__FaultTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__FaultTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__FaultTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__FaultTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__From is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From_DEFINED
#define SOAP_TYPE__wsa5__From_DEFINED

#define soap_default__wsa5__From soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__From2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__From soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__From soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__From soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__From soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__From(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__From(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__From soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__From soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__From soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__ReplyTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo_DEFINED
#define SOAP_TYPE__wsa5__ReplyTo_DEFINED

#define soap_default__wsa5__ReplyTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__ReplyTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__ReplyTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__ReplyTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__ReplyTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__ReplyTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReplyTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__ReplyTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__ReplyTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__ReplyTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__ReplyTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__RelatesTo is a typedef synonym of wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo_DEFINED
#define SOAP_TYPE__wsa5__RelatesTo_DEFINED

#define soap_default__wsa5__RelatesTo soap_default_wsa5__RelatesToType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);

#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap__wsa5__RelatesTo2s soap_wsa5__RelatesToType2s


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_s2_wsa5__RelatesTo soap_s2wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_new__wsa5__RelatesTo soap_new_wsa5__RelatesToType


#define soap_new_req__wsa5__RelatesTo soap_new_req_wsa5__RelatesToType


#define soap_new_set__wsa5__RelatesTo soap_new_set_wsa5__RelatesToType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RelatesTo(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write__wsa5__RelatesTo(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_read__wsa5__RelatesTo soap_read_wsa5__RelatesToType


#define soap_GET__wsa5__RelatesTo soap_GET_wsa5__RelatesToType


#define soap_POST_recv__wsa5__RelatesTo soap_POST_recv_wsa5__RelatesToType

#endif
/* _wsa5__Metadata is a typedef synonym of wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata_DEFINED
#define SOAP_TYPE__wsa5__Metadata_DEFINED

#define soap_default__wsa5__Metadata soap_default_wsa5__MetadataType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);

#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap__wsa5__Metadata2s soap_wsa5__MetadataType2s


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_s2_wsa5__Metadata soap_s2wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_new__wsa5__Metadata soap_new_wsa5__MetadataType


#define soap_new_req__wsa5__Metadata soap_new_req_wsa5__MetadataType


#define soap_new_set__wsa5__Metadata soap_new_set_wsa5__MetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Metadata(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write__wsa5__Metadata(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_read__wsa5__Metadata soap_read_wsa5__MetadataType


#define soap_GET__wsa5__Metadata soap_GET_wsa5__MetadataType


#define soap_POST_recv__wsa5__Metadata soap_POST_recv_wsa5__MetadataType

#endif
/* _wsa5__ReferenceParameters is a typedef synonym of wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters_DEFINED
#define SOAP_TYPE__wsa5__ReferenceParameters_DEFINED

#define soap_default__wsa5__ReferenceParameters soap_default_wsa5__ReferenceParametersType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);

#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap__wsa5__ReferenceParameters2s soap_wsa5__ReferenceParametersType2s


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_s2_wsa5__ReferenceParameters soap_s2wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_new__wsa5__ReferenceParameters soap_new_wsa5__ReferenceParametersType


#define soap_new_req__wsa5__ReferenceParameters soap_new_req_wsa5__ReferenceParametersType


#define soap_new_set__wsa5__ReferenceParameters soap_new_set_wsa5__ReferenceParametersType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReferenceParameters(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write__wsa5__ReferenceParameters(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_read__wsa5__ReferenceParameters soap_read_wsa5__ReferenceParametersType


#define soap_GET__wsa5__ReferenceParameters soap_GET_wsa5__ReferenceParametersType


#define soap_POST_recv__wsa5__ReferenceParameters soap_POST_recv_wsa5__ReferenceParametersType

#endif
/* _wsa5__EndpointReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference_DEFINED
#define SOAP_TYPE__wsa5__EndpointReference_DEFINED

#define soap_default__wsa5__EndpointReference soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__EndpointReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__EndpointReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__EndpointReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__EndpointReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__EndpointReference soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__EndpointReference(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__EndpointReference(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__EndpointReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__EndpointReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__EndpointReference soap_POST_recv_wsa5__EndpointReferenceType

#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType_DEFINED
#define SOAP_TYPE_wsa5__ProblemActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(
	struct soap *soap)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
	}
	return _p;
}

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(
	struct soap *soap,
	char *Action,
	char *SoapAction,
	char *__anyAttribute)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
		_p->Action = Action;
		_p->SoapAction = SoapAction;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_read_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (p)
	{	::soap_default_wsa5__ProblemActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ProblemActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType_DEFINED
#define SOAP_TYPE_wsa5__RelatesToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);
SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(
	struct soap *soap)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
	}
	return _p;
}

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(
	struct soap *soap,
	char *__item,
	char *RelationshipType,
	char *__anyAttribute)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
		_p->__item = __item;
		_p->RelationshipType = RelationshipType;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_read_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (p)
	{	::soap_default_wsa5__RelatesToType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__RelatesToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType_DEFINED
#define SOAP_TYPE_wsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);
SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

inline int soap_read_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (p)
	{	::soap_default_wsa5__MetadataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(
	struct soap *soap,
	int *chan__ChannelInstance,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_read_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	int __size,
	char **__any)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	struct wsa5__ReferenceParametersType *ReferenceParameters,
	struct wsa5__MetadataType *Metadata,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->ReferenceParameters = ReferenceParameters;
		_p->Metadata = Metadata;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_read_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__xop__Include_DEFINED
#define SOAP_TYPE__xop__Include_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xop__Include(struct soap*, struct _xop__Include *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xop__Include(struct soap*, const struct _xop__Include *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xop__Include(struct soap*, const char*, int, const struct _xop__Include *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__xop__Include2s(struct soap*, struct _xop__Include);
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_in__xop__Include(struct soap*, const char*, struct _xop__Include *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_xop__Include(struct soap*, const char*, struct _xop__Include *);
SOAP_FMAC1 struct _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap*, int, const char*, const char*, size_t*);

inline struct _xop__Include * soap_new__xop__Include(struct soap *soap, int n = -1)
{
	return soap_instantiate__xop__Include(soap, n, NULL, NULL, NULL);
}

inline struct _xop__Include * soap_new_req__xop__Include(
	struct soap *soap)
{
	struct _xop__Include *_p = ::soap_new__xop__Include(soap);
	if (_p)
	{	::soap_default__xop__Include(soap, _p);
	}
	return _p;
}

inline struct _xop__Include * soap_new_set__xop__Include(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	struct _xop__Include *_p = ::soap_new__xop__Include(soap);
	if (_p)
	{	::soap_default__xop__Include(soap, _p);
		_p->__ptr = __ptr;
		_p->__size = __size;
		_p->id = id;
		_p->type = type;
		_p->options = options;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__xop__Include(struct soap*, const struct _xop__Include *, const char*, const char*);

inline int soap_write__xop__Include(struct soap *soap, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xop__Include(struct soap *soap, const char *URL, struct _xop__Include const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xop__Include(soap, p), 0) || ::soap_put__xop__Include(soap, p, "xop:Include", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_get__xop__Include(struct soap*, struct _xop__Include *, const char*, const char*);

inline int soap_read__xop__Include(struct soap *soap, struct _xop__Include *p)
{
	if (p)
	{	::soap_default__xop__Include(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__xop__Include(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__xop__Include(struct soap *soap, const char *URL, struct _xop__Include *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__xop__Include(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__xop__Include(struct soap *soap, struct _xop__Include *p)
{
	if (::soap_read__xop__Include(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_PTZPresetTourPresetDetail(struct soap*, int, const union _tt__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_PTZPresetTourPresetDetail(struct soap*, int, const union _tt__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 union _tt__union_PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in__tt__union_PTZPresetTourPresetDetail(struct soap*, int*, union _tt__union_PTZPresetTourPresetDetail *);
#endif

#ifndef SOAP_TYPE__wsc__union_DerivedKeyTokenType_DEFINED
#define SOAP_TYPE__wsc__union_DerivedKeyTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 union _wsc__union_DerivedKeyTokenType * SOAP_FMAC4 soap_in__wsc__union_DerivedKeyTokenType(struct soap*, int*, union _wsc__union_DerivedKeyTokenType *);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetCompatibleConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetCompatibleConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, const char *, int, _tptz__GetCompatibleConfigurations *const*, const char *);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, const char*, _tptz__GetCompatibleConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetCompatibleConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetCompatibleConfigurations(struct soap*, _tptz__GetCompatibleConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RemovePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RemovePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RemovePresetTour(struct soap*, const char *, int, _tptz__RemovePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__RemovePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__RemovePresetTour(struct soap*, const char*, _tptz__RemovePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RemovePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__RemovePresetTour(struct soap*, _tptz__RemovePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__OperatePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__OperatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__OperatePresetTour(struct soap*, const char *, int, _tptz__OperatePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__OperatePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__OperatePresetTour(struct soap*, const char*, _tptz__OperatePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__OperatePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__OperatePresetTour(struct soap*, _tptz__OperatePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__ModifyPresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__ModifyPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__ModifyPresetTour(struct soap*, const char *, int, _tptz__ModifyPresetTour *const*, const char *);
SOAP_FMAC3 _tptz__ModifyPresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__ModifyPresetTour(struct soap*, const char*, _tptz__ModifyPresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__ModifyPresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__ModifyPresetTour(struct soap*, _tptz__ModifyPresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__CreatePresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__CreatePresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__CreatePresetTour(struct soap*, const char *, int, _tptz__CreatePresetTour *const*, const char *);
SOAP_FMAC3 _tptz__CreatePresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__CreatePresetTour(struct soap*, const char*, _tptz__CreatePresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__CreatePresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__CreatePresetTour(struct soap*, _tptz__CreatePresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTourOptions_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTourOptions(struct soap*, const char *, int, _tptz__GetPresetTourOptions *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTourOptions ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTourOptions(struct soap*, const char*, _tptz__GetPresetTourOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTourOptions ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTourOptions(struct soap*, _tptz__GetPresetTourOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTour_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTour(struct soap*, const char *, int, _tptz__GetPresetTour *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTour ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTour(struct soap*, const char*, _tptz__GetPresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTour ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTour(struct soap*, _tptz__GetPresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresetTours_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresetTours_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresetTours(struct soap*, const char *, int, _tptz__GetPresetTours *const*, const char *);
SOAP_FMAC3 _tptz__GetPresetTours ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresetTours(struct soap*, const char*, _tptz__GetPresetTours **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresetTours ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresetTours(struct soap*, _tptz__GetPresetTours **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__Stop_DEFINED
#define SOAP_TYPE_PointerTo_tptz__Stop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__Stop(struct soap*, _tptz__Stop *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__Stop(struct soap*, const char *, int, _tptz__Stop *const*, const char *);
SOAP_FMAC3 _tptz__Stop ** SOAP_FMAC4 soap_in_PointerTo_tptz__Stop(struct soap*, const char*, _tptz__Stop **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__Stop(struct soap*, _tptz__Stop *const*, const char*, const char*);
SOAP_FMAC3 _tptz__Stop ** SOAP_FMAC4 soap_get_PointerTo_tptz__Stop(struct soap*, _tptz__Stop **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GeoMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GeoMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GeoMove(struct soap*, _tptz__GeoMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GeoMove(struct soap*, const char *, int, _tptz__GeoMove *const*, const char *);
SOAP_FMAC3 _tptz__GeoMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__GeoMove(struct soap*, const char*, _tptz__GeoMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GeoMove(struct soap*, _tptz__GeoMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GeoMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__GeoMove(struct soap*, _tptz__GeoMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__AbsoluteMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__AbsoluteMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__AbsoluteMove(struct soap*, const char *, int, _tptz__AbsoluteMove *const*, const char *);
SOAP_FMAC3 _tptz__AbsoluteMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__AbsoluteMove(struct soap*, const char*, _tptz__AbsoluteMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__AbsoluteMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__AbsoluteMove(struct soap*, _tptz__AbsoluteMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SendAuxiliaryCommand_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SendAuxiliaryCommand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, const char *, int, _tptz__SendAuxiliaryCommand *const*, const char *);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand ** SOAP_FMAC4 soap_in_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, const char*, _tptz__SendAuxiliaryCommand **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SendAuxiliaryCommand ** SOAP_FMAC4 soap_get_PointerTo_tptz__SendAuxiliaryCommand(struct soap*, _tptz__SendAuxiliaryCommand **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RelativeMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RelativeMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RelativeMove(struct soap*, const char *, int, _tptz__RelativeMove *const*, const char *);
SOAP_FMAC3 _tptz__RelativeMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__RelativeMove(struct soap*, const char*, _tptz__RelativeMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RelativeMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__RelativeMove(struct soap*, _tptz__RelativeMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__ContinuousMove_DEFINED
#define SOAP_TYPE_PointerTo_tptz__ContinuousMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__ContinuousMove(struct soap*, const char *, int, _tptz__ContinuousMove *const*, const char *);
SOAP_FMAC3 _tptz__ContinuousMove ** SOAP_FMAC4 soap_in_PointerTo_tptz__ContinuousMove(struct soap*, const char*, _tptz__ContinuousMove **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove *const*, const char*, const char*);
SOAP_FMAC3 _tptz__ContinuousMove ** SOAP_FMAC4 soap_get_PointerTo_tptz__ContinuousMove(struct soap*, _tptz__ContinuousMove **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetHomePosition_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetHomePosition(struct soap*, const char *, int, _tptz__SetHomePosition *const*, const char *);
SOAP_FMAC3 _tptz__SetHomePosition ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetHomePosition(struct soap*, const char*, _tptz__SetHomePosition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetHomePosition ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetHomePosition(struct soap*, _tptz__SetHomePosition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GotoHomePosition_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GotoHomePosition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GotoHomePosition(struct soap*, const char *, int, _tptz__GotoHomePosition *const*, const char *);
SOAP_FMAC3 _tptz__GotoHomePosition ** SOAP_FMAC4 soap_in_PointerTo_tptz__GotoHomePosition(struct soap*, const char*, _tptz__GotoHomePosition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GotoHomePosition ** SOAP_FMAC4 soap_get_PointerTo_tptz__GotoHomePosition(struct soap*, _tptz__GotoHomePosition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfigurationOptions(struct soap*, const char *, int, _tptz__GetConfigurationOptions *const*, const char *);
SOAP_FMAC3 _tptz__GetConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfigurationOptions(struct soap*, const char*, _tptz__GetConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfigurationOptions(struct soap*, _tptz__GetConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetConfiguration(struct soap*, const char *, int, _tptz__SetConfiguration *const*, const char *);
SOAP_FMAC3 _tptz__SetConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetConfiguration(struct soap*, const char*, _tptz__SetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetConfiguration(struct soap*, _tptz__SetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetNode_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetNode(struct soap*, const char *, int, _tptz__GetNode *const*, const char *);
SOAP_FMAC3 _tptz__GetNode ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetNode(struct soap*, const char*, _tptz__GetNode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetNode ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetNode(struct soap*, _tptz__GetNode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetNodes_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetNodes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetNodes(struct soap*, const char *, int, _tptz__GetNodes *const*, const char *);
SOAP_FMAC3 _tptz__GetNodes ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetNodes(struct soap*, const char*, _tptz__GetNodes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetNodes ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetNodes(struct soap*, _tptz__GetNodes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfiguration_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfiguration(struct soap*, const char *, int, _tptz__GetConfiguration *const*, const char *);
SOAP_FMAC3 _tptz__GetConfiguration ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfiguration(struct soap*, const char*, _tptz__GetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfiguration ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfiguration(struct soap*, _tptz__GetConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetStatus_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetStatus(struct soap*, const char *, int, _tptz__GetStatus *const*, const char *);
SOAP_FMAC3 _tptz__GetStatus ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetStatus(struct soap*, const char*, _tptz__GetStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetStatus ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetStatus(struct soap*, _tptz__GetStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GotoPreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GotoPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GotoPreset(struct soap*, const char *, int, _tptz__GotoPreset *const*, const char *);
SOAP_FMAC3 _tptz__GotoPreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__GotoPreset(struct soap*, const char*, _tptz__GotoPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GotoPreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__GotoPreset(struct soap*, _tptz__GotoPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__RemovePreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__RemovePreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__RemovePreset(struct soap*, const char *, int, _tptz__RemovePreset *const*, const char *);
SOAP_FMAC3 _tptz__RemovePreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__RemovePreset(struct soap*, const char*, _tptz__RemovePreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__RemovePreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__RemovePreset(struct soap*, _tptz__RemovePreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__SetPreset_DEFINED
#define SOAP_TYPE_PointerTo_tptz__SetPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__SetPreset(struct soap*, const char *, int, _tptz__SetPreset *const*, const char *);
SOAP_FMAC3 _tptz__SetPreset ** SOAP_FMAC4 soap_in_PointerTo_tptz__SetPreset(struct soap*, const char*, _tptz__SetPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset *const*, const char*, const char*);
SOAP_FMAC3 _tptz__SetPreset ** SOAP_FMAC4 soap_get_PointerTo_tptz__SetPreset(struct soap*, _tptz__SetPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetPresets_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetPresets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetPresets(struct soap*, const char *, int, _tptz__GetPresets *const*, const char *);
SOAP_FMAC3 _tptz__GetPresets ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetPresets(struct soap*, const char*, _tptz__GetPresets **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetPresets ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetPresets(struct soap*, _tptz__GetPresets **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetConfigurations(struct soap*, const char *, int, _tptz__GetConfigurations *const*, const char *);
SOAP_FMAC3 _tptz__GetConfigurations ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetConfigurations(struct soap*, const char*, _tptz__GetConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetConfigurations ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetConfigurations(struct soap*, _tptz__GetConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_tptz__GetServiceCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_tptz__GetServiceCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tptz__GetServiceCapabilities(struct soap*, const char *, int, _tptz__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _tptz__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_tptz__GetServiceCapabilities(struct soap*, const char*, _tptz__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _tptz__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_tptz__GetServiceCapabilities(struct soap*, _tptz__GetServiceCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationExtension(struct soap*, const char *, int, tt__PTZConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationExtension(struct soap*, const char*, tt__PTZConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ZoomLimits_DEFINED
#define SOAP_TYPE_PointerTott__ZoomLimits_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ZoomLimits(struct soap*, const char *, int, tt__ZoomLimits *const*, const char *);
SOAP_FMAC3 tt__ZoomLimits ** SOAP_FMAC4 soap_in_PointerTott__ZoomLimits(struct soap*, const char*, tt__ZoomLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits *const*, const char*, const char*);
SOAP_FMAC3 tt__ZoomLimits ** SOAP_FMAC4 soap_get_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PanTiltLimits_DEFINED
#define SOAP_TYPE_PointerTott__PanTiltLimits_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PanTiltLimits(struct soap*, const char *, int, tt__PanTiltLimits *const*, const char *);
SOAP_FMAC3 tt__PanTiltLimits ** SOAP_FMAC4 soap_in_PointerTott__PanTiltLimits(struct soap*, const char*, tt__PanTiltLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits *const*, const char*, const char*);
SOAP_FMAC3 tt__PanTiltLimits ** SOAP_FMAC4 soap_get_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZNodeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNodeExtension(struct soap*, const char *, int, tt__PTZNodeExtension *const*, const char *);
SOAP_FMAC3 tt__PTZNodeExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZNodeExtension(struct soap*, const char*, tt__PTZNodeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNodeExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodouble_DEFINED
#define SOAP_TYPE_PointerTodouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__MoveStatus_DEFINED
#define SOAP_TYPE_PointerTott__MoveStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MoveStatus(struct soap*, const char *, int, enum tt__MoveStatus *const*, const char *);
SOAP_FMAC3 enum tt__MoveStatus ** SOAP_FMAC4 soap_in_PointerTott__MoveStatus(struct soap*, const char*, enum tt__MoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus *const*, const char*, const char*);
SOAP_FMAC3 enum tt__MoveStatus ** SOAP_FMAC4 soap_get_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZMoveStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZMoveStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZMoveStatus(struct soap*, const char *, int, tt__PTZMoveStatus *const*, const char *);
SOAP_FMAC3 tt__PTZMoveStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZMoveStatus(struct soap*, const char*, tt__PTZMoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZMoveStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntRange_DEFINED
#define SOAP_TYPE_PointerTott__IntRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRange(struct soap*, tt__IntRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRange(struct soap*, const char *, int, tt__IntRange *const*, const char *);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_in_PointerTott__IntRange(struct soap*, const char*, tt__IntRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRange(struct soap*, tt__IntRange *const*, const char*, const char*);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_get_PointerTott__IntRange(struct soap*, tt__IntRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char *, int, tt__PTZPresetTourPresetDetailOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, const char *, int, tt__PTZPresetTourPresetDetailOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpotOptions(struct soap*, const char *, int, tt__PTZPresetTourSpotOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpotOptions(struct soap*, const char*, tt__PTZPresetTourSpotOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourDirection(struct soap*, const char *, int, enum tt__PTZPresetTourDirection *const*, const char *);
SOAP_FMAC3 enum tt__PTZPresetTourDirection ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *const*, const char*, const char*);
SOAP_FMAC3 enum tt__PTZPresetTourDirection ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStatusExtension(struct soap*, const char *, int, tt__PTZPresetTourStatusExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStatusExtension(struct soap*, const char*, tt__PTZPresetTourStatusExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourTypeExtension(struct soap*, const char *, int, tt__PTZPresetTourTypeExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourTypeExtension(struct soap*, const char*, tt__PTZPresetTourTypeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpotExtension(struct soap*, const char *, int, tt__PTZPresetTourSpotExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpotExtension(struct soap*, const char*, tt__PTZPresetTourSpotExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetail(struct soap*, const char *, int, tt__PTZPresetTourPresetDetail *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetail(struct soap*, const char*, tt__PTZPresetTourPresetDetail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourExtension(struct soap*, const char *, int, tt__PTZPresetTourExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourExtension(struct soap*, const char*, tt__PTZPresetTourExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpot(struct soap*, const char *, int, tt__PTZPresetTourSpot *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpot ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpot(struct soap*, const char*, tt__PTZPresetTourSpot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpot ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingCondition(struct soap*, const char *, int, tt__PTZPresetTourStartingCondition *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingCondition(struct soap*, const char*, tt__PTZPresetTourStartingCondition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStatus(struct soap*, const char *, int, tt__PTZPresetTourStatus *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStatus(struct soap*, const char*, tt__PTZPresetTourStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Name_DEFINED
#define SOAP_TYPE_PointerTott__Name_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Name(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Name(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Name(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Name(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Name(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Vector1D_DEFINED
#define SOAP_TYPE_PointerTott__Vector1D_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector1D(struct soap*, tt__Vector1D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector1D(struct soap*, const char *, int, tt__Vector1D *const*, const char *);
SOAP_FMAC3 tt__Vector1D ** SOAP_FMAC4 soap_in_PointerTott__Vector1D(struct soap*, const char*, tt__Vector1D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector1D(struct soap*, tt__Vector1D *const*, const char*, const char*);
SOAP_FMAC3 tt__Vector1D ** SOAP_FMAC4 soap_get_PointerTott__Vector1D(struct soap*, tt__Vector1D **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Vector2D_DEFINED
#define SOAP_TYPE_PointerTott__Vector2D_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector2D(struct soap*, tt__Vector2D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector2D(struct soap*, const char *, int, tt__Vector2D *const*, const char *);
SOAP_FMAC3 tt__Vector2D ** SOAP_FMAC4 soap_in_PointerTott__Vector2D(struct soap*, const char*, tt__Vector2D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector2D(struct soap*, tt__Vector2D *const*, const char*, const char*);
SOAP_FMAC3 tt__Vector2D ** SOAP_FMAC4 soap_get_PointerTott__Vector2D(struct soap*, tt__Vector2D **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__FloatRange_DEFINED
#define SOAP_TYPE_PointerTott__FloatRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FloatRange(struct soap*, tt__FloatRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FloatRange(struct soap*, const char *, int, tt__FloatRange *const*, const char *);
SOAP_FMAC3 tt__FloatRange ** SOAP_FMAC4 soap_in_PointerTott__FloatRange(struct soap*, const char*, tt__FloatRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FloatRange(struct soap*, tt__FloatRange *const*, const char*, const char*);
SOAP_FMAC3 tt__FloatRange ** SOAP_FMAC4 soap_get_PointerTott__FloatRange(struct soap*, tt__FloatRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpacesExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpacesExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpacesExtension(struct soap*, const char *, int, tt__PTZSpacesExtension *const*, const char *);
SOAP_FMAC3 tt__PTZSpacesExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZSpacesExtension(struct soap*, const char*, tt__PTZSpacesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpacesExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Space1DDescription_DEFINED
#define SOAP_TYPE_PointerTott__Space1DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Space1DDescription(struct soap*, const char *, int, tt__Space1DDescription *const*, const char *);
SOAP_FMAC3 tt__Space1DDescription ** SOAP_FMAC4 soap_in_PointerTott__Space1DDescription(struct soap*, const char*, tt__Space1DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__Space1DDescription ** SOAP_FMAC4 soap_get_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Space2DDescription_DEFINED
#define SOAP_TYPE_PointerTott__Space2DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Space2DDescription(struct soap*, const char *, int, tt__Space2DDescription *const*, const char *);
SOAP_FMAC3 tt__Space2DDescription ** SOAP_FMAC4 soap_in_PointerTott__Space2DDescription(struct soap*, const char*, tt__Space2DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription *const*, const char*, const char*);
SOAP_FMAC3 tt__Space2DDescription ** SOAP_FMAC4 soap_get_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReverseOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__ReverseOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReverseOptionsExtension(struct soap*, const char *, int, tt__ReverseOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__ReverseOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__ReverseOptionsExtension(struct soap*, const char*, tt__ReverseOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__ReverseOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlipOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__EFlipOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlipOptionsExtension(struct soap*, const char *, int, tt__EFlipOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__EFlipOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__EFlipOptionsExtension(struct soap*, const char*, tt__EFlipOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlipOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionOptionsExtension(struct soap*, const char *, int, tt__PTControlDirectionOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionOptionsExtension(struct soap*, const char*, tt__PTControlDirectionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReverseOptions_DEFINED
#define SOAP_TYPE_PointerTott__ReverseOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReverseOptions(struct soap*, const char *, int, tt__ReverseOptions *const*, const char *);
SOAP_FMAC3 tt__ReverseOptions ** SOAP_FMAC4 soap_in_PointerTott__ReverseOptions(struct soap*, const char*, tt__ReverseOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__ReverseOptions ** SOAP_FMAC4 soap_get_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlipOptions_DEFINED
#define SOAP_TYPE_PointerTott__EFlipOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlipOptions(struct soap*, const char *, int, tt__EFlipOptions *const*, const char *);
SOAP_FMAC3 tt__EFlipOptions ** SOAP_FMAC4 soap_in_PointerTott__EFlipOptions(struct soap*, const char*, tt__EFlipOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlipOptions ** SOAP_FMAC4 soap_get_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__IntAttrList_DEFINED
#define SOAP_TYPE_PointerTott__IntAttrList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IntAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntAttrList(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IntAttrList(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions2_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationOptions2(struct soap*, const char *, int, tt__PTZConfigurationOptions2 *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationOptions2(struct soap*, const char*, tt__PTZConfigurationOptions2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionOptions(struct soap*, const char *, int, tt__PTControlDirectionOptions *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionOptions ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionOptions(struct soap*, const char*, tt__PTControlDirectionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptions ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__DurationRange_DEFINED
#define SOAP_TYPE_PointerTott__DurationRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DurationRange(struct soap*, tt__DurationRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DurationRange(struct soap*, const char *, int, tt__DurationRange *const*, const char *);
SOAP_FMAC3 tt__DurationRange ** SOAP_FMAC4 soap_in_PointerTott__DurationRange(struct soap*, const char*, tt__DurationRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DurationRange(struct soap*, tt__DurationRange *const*, const char*, const char*);
SOAP_FMAC3 tt__DurationRange ** SOAP_FMAC4 soap_get_PointerTott__DurationRange(struct soap*, tt__DurationRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpaces_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpaces(struct soap*, const char *, int, tt__PTZSpaces *const*, const char *);
SOAP_FMAC3 tt__PTZSpaces ** SOAP_FMAC4 soap_in_PointerTott__PTZSpaces(struct soap*, const char*, tt__PTZSpaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpaces ** SOAP_FMAC4 soap_get_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirectionExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirectionExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionExtension(struct soap*, const char *, int, tt__PTControlDirectionExtension *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionExtension ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionExtension(struct soap*, const char*, tt__PTControlDirectionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirectionExtension ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__Reverse_DEFINED
#define SOAP_TYPE_PointerTott__Reverse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Reverse(struct soap*, tt__Reverse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Reverse(struct soap*, const char *, int, tt__Reverse *const*, const char *);
SOAP_FMAC3 tt__Reverse ** SOAP_FMAC4 soap_in_PointerTott__Reverse(struct soap*, const char*, tt__Reverse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Reverse(struct soap*, tt__Reverse *const*, const char*, const char*);
SOAP_FMAC3 tt__Reverse ** SOAP_FMAC4 soap_get_PointerTott__Reverse(struct soap*, tt__Reverse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__EFlip_DEFINED
#define SOAP_TYPE_PointerTott__EFlip_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlip(struct soap*, tt__EFlip *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlip(struct soap*, const char *, int, tt__EFlip *const*, const char *);
SOAP_FMAC3 tt__EFlip ** SOAP_FMAC4 soap_in_PointerTott__EFlip(struct soap*, const char*, tt__EFlip **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlip(struct soap*, tt__EFlip *const*, const char*, const char*);
SOAP_FMAC3 tt__EFlip ** SOAP_FMAC4 soap_get_PointerTott__EFlip(struct soap*, tt__EFlip **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension2_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationExtension2(struct soap*, const char *, int, tt__PTZConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationExtension2(struct soap*, const char*, tt__PTZConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTControlDirection_DEFINED
#define SOAP_TYPE_PointerTott__PTControlDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirection(struct soap*, const char *, int, tt__PTControlDirection *const*, const char *);
SOAP_FMAC3 tt__PTControlDirection ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirection(struct soap*, const char*, tt__PTControlDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection *const*, const char*, const char*);
SOAP_FMAC3 tt__PTControlDirection ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSupportedExtension(struct soap*, const char *, int, tt__PTZPresetTourSupportedExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSupportedExtension(struct soap*, const char*, tt__PTZPresetTourSupportedExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension2_DEFINED
#define SOAP_TYPE_PointerTott__PTZNodeExtension2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNodeExtension2(struct soap*, const char *, int, tt__PTZNodeExtension2 *const*, const char *);
SOAP_FMAC3 tt__PTZNodeExtension2 ** SOAP_FMAC4 soap_in_PointerTott__PTZNodeExtension2(struct soap*, const char*, tt__PTZNodeExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNodeExtension2 ** SOAP_FMAC4 soap_get_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupported_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourSupported_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSupported(struct soap*, const char *, int, tt__PTZPresetTourSupported *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSupported ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSupported(struct soap*, const char*, tt__PTZPresetTourSupported **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupported ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPresetTourOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZPresetTourOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourOptions(struct soap*, const char *, int, tt__PTZPresetTourOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourOptions(struct soap*, const char*, tt__PTZPresetTourOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPresetTourOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PresetTour_DEFINED
#define SOAP_TYPE_PointerTott__PresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PresetTour(struct soap*, tt__PresetTour *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PresetTour(struct soap*, const char *, int, tt__PresetTour *const*, const char *);
SOAP_FMAC3 tt__PresetTour ** SOAP_FMAC4 soap_in_PointerTott__PresetTour(struct soap*, const char*, tt__PresetTour **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PresetTour(struct soap*, tt__PresetTour *const*, const char*, const char*);
SOAP_FMAC3 tt__PresetTour ** SOAP_FMAC4 soap_get_PointerTott__PresetTour(struct soap*, tt__PresetTour **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofloat_DEFINED
#define SOAP_TYPE_PointerTofloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__GeoLocation_DEFINED
#define SOAP_TYPE_PointerTott__GeoLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GeoLocation(struct soap*, tt__GeoLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GeoLocation(struct soap*, const char *, int, tt__GeoLocation *const*, const char *);
SOAP_FMAC3 tt__GeoLocation ** SOAP_FMAC4 soap_in_PointerTott__GeoLocation(struct soap*, const char*, tt__GeoLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GeoLocation(struct soap*, tt__GeoLocation *const*, const char*, const char*);
SOAP_FMAC3 tt__GeoLocation ** SOAP_FMAC4 soap_get_PointerTott__GeoLocation(struct soap*, tt__GeoLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZVector_DEFINED
#define SOAP_TYPE_PointerTott__PTZVector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZVector(struct soap*, tt__PTZVector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZVector(struct soap*, const char *, int, tt__PTZVector *const*, const char *);
SOAP_FMAC3 tt__PTZVector ** SOAP_FMAC4 soap_in_PointerTott__PTZVector(struct soap*, const char*, tt__PTZVector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZVector(struct soap*, tt__PTZVector *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZVector ** SOAP_FMAC4 soap_get_PointerTott__PTZVector(struct soap*, tt__PTZVector **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__duration_DEFINED
#define SOAP_TYPE_PointerToxsd__duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZStatus_DEFINED
#define SOAP_TYPE_PointerTott__PTZStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStatus(struct soap*, tt__PTZStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStatus(struct soap*, const char *, int, tt__PTZStatus *const*, const char *);
SOAP_FMAC3 tt__PTZStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZStatus(struct soap*, const char*, tt__PTZStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStatus(struct soap*, tt__PTZStatus *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZStatus(struct soap*, tt__PTZStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZSpeed_DEFINED
#define SOAP_TYPE_PointerTott__PTZSpeed_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpeed(struct soap*, const char *, int, tt__PTZSpeed *const*, const char *);
SOAP_FMAC3 tt__PTZSpeed ** SOAP_FMAC4 soap_in_PointerTott__PTZSpeed(struct soap*, const char*, tt__PTZSpeed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZSpeed ** SOAP_FMAC4 soap_get_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__ReferenceToken_DEFINED
#define SOAP_TYPE_PointerTott__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReferenceToken(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReferenceToken(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__ReferenceToken(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReferenceToken(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__ReferenceToken(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZPreset_DEFINED
#define SOAP_TYPE_PointerTott__PTZPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPreset(struct soap*, tt__PTZPreset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPreset(struct soap*, const char *, int, tt__PTZPreset *const*, const char *);
SOAP_FMAC3 tt__PTZPreset ** SOAP_FMAC4 soap_in_PointerTott__PTZPreset(struct soap*, const char*, tt__PTZPreset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPreset(struct soap*, tt__PTZPreset *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZPreset ** SOAP_FMAC4 soap_get_PointerTott__PTZPreset(struct soap*, tt__PTZPreset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationOptions(struct soap*, const char *, int, tt__PTZConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationOptions(struct soap*, const char*, tt__PTZConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__tptz__SetConfigurationResponse_sequence_DEFINED
#define SOAP_TYPE_PointerTo__tptz__SetConfigurationResponse_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, const char *, int, struct __tptz__SetConfigurationResponse_sequence *const*, const char *);
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence ** SOAP_FMAC4 soap_in_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, const char*, struct __tptz__SetConfigurationResponse_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence *const*, const char*, const char*);
SOAP_FMAC3 struct __tptz__SetConfigurationResponse_sequence ** SOAP_FMAC4 soap_get_PointerTo__tptz__SetConfigurationResponse_sequence(struct soap*, struct __tptz__SetConfigurationResponse_sequence **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZConfiguration_DEFINED
#define SOAP_TYPE_PointerTott__PTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfiguration(struct soap*, const char *, int, tt__PTZConfiguration *const*, const char *);
SOAP_FMAC3 tt__PTZConfiguration ** SOAP_FMAC4 soap_in_PointerTott__PTZConfiguration(struct soap*, const char*, tt__PTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZConfiguration ** SOAP_FMAC4 soap_get_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTott__PTZNode_DEFINED
#define SOAP_TYPE_PointerTott__PTZNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNode(struct soap*, tt__PTZNode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNode(struct soap*, const char *, int, tt__PTZNode *const*, const char *);
SOAP_FMAC3 tt__PTZNode ** SOAP_FMAC4 soap_in_PointerTott__PTZNode(struct soap*, const char*, tt__PTZNode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNode(struct soap*, tt__PTZNode *const*, const char*, const char*);
SOAP_FMAC3 tt__PTZNode ** SOAP_FMAC4 soap_get_PointerTott__PTZNode(struct soap*, tt__PTZNode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTotptz__Capabilities_DEFINED
#define SOAP_TYPE_PointerTotptz__Capabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotptz__Capabilities(struct soap*, const char *, int, tptz__Capabilities *const*, const char *);
SOAP_FMAC3 tptz__Capabilities ** SOAP_FMAC4 soap_in_PointerTotptz__Capabilities(struct soap*, const char*, tptz__Capabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities *const*, const char*, const char*);
SOAP_FMAC3 tptz__Capabilities ** SOAP_FMAC4 soap_get_PointerTotptz__Capabilities(struct soap*, tptz__Capabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Header_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Header(struct soap*, const char *, int, struct SOAP_ENV__Header *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Security_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Security_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Security(struct soap*, const char *, int, struct _wsse__Security *const*, const char *);
SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_in_PointerTo_wsse__Security(struct soap*, const char*, struct _wsse__Security **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_get_PointerTo_wsse__Security(struct soap*, struct _wsse__Security **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignatureType_DEFINED
#define SOAP_TYPE_PointerTods__SignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureType(struct soap*, const char *, int, struct ds__SignatureType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTods__SignatureType(struct soap*, const char*, struct ds__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTods__SignatureType(struct soap*, struct ds__SignatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsc__SecurityContextTokenType_DEFINED
#define SOAP_TYPE_PointerTowsc__SecurityContextTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__SecurityContextTokenType(struct soap*, const char *, int, struct wsc__SecurityContextTokenType *const*, const char *);
SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_in_PointerTowsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*, const char*, const char*);
SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_get_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__BinarySecurityToken_DEFINED
#define SOAP_TYPE_PointerTo_wsse__BinarySecurityToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__BinarySecurityToken(struct soap*, const char *, int, struct _wsse__BinarySecurityToken *const*, const char *);
SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__UsernameToken_DEFINED
#define SOAP_TYPE_PointerTo_wsse__UsernameToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__UsernameToken(struct soap*, const char *, int, struct _wsse__UsernameToken *const*, const char *);
SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsu__Timestamp_DEFINED
#define SOAP_TYPE_PointerTo_wsu__Timestamp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsu__Timestamp(struct soap*, const char *, int, struct _wsu__Timestamp *const*, const char *);
SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_in_PointerTo_wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*, const char*, const char*);
SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_get_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp **, const char*, const char*);
#endif
/* _saml2__AttributeValue is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml2__AttributeValue_DEFINED
#define SOAP_TYPE__saml2__AttributeValue_DEFINED
#endif
/* _saml2__AuthenticatingAuthority is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AuthenticatingAuthority_DEFINED
#define SOAP_TYPE__saml2__AuthenticatingAuthority_DEFINED

#define soap_default__saml2__AuthenticatingAuthority soap_default_string


#define soap_serialize__saml2__AuthenticatingAuthority soap_serialize_string


#define soap__saml2__AuthenticatingAuthority2s(soap, a) (a)

#define soap_out__saml2__AuthenticatingAuthority soap_out_string


#define soap_s2_saml2__AuthenticatingAuthority(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AuthenticatingAuthority soap_in_string


#define soap_instantiate__saml2__AuthenticatingAuthority soap_instantiate_string


#define soap_new__saml2__AuthenticatingAuthority soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthenticatingAuthority(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AuthenticatingAuthority(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthenticatingAuthority(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthenticatingAuthority(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthenticatingAuthority(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthenticatingAuthority soap_get_string


#define soap_read__saml2__AuthenticatingAuthority soap_read_string


#define soap_GET__saml2__AuthenticatingAuthority soap_GET_string


#define soap_POST_recv__saml2__AuthenticatingAuthority soap_POST_recv_string

#endif
/* _saml2__AuthnContextDecl is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml2__AuthnContextDecl_DEFINED
#define SOAP_TYPE__saml2__AuthnContextDecl_DEFINED
#endif
/* _saml2__AuthnContextDeclRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AuthnContextDeclRef_DEFINED
#define SOAP_TYPE__saml2__AuthnContextDeclRef_DEFINED

#define soap_default__saml2__AuthnContextDeclRef soap_default_string


#define soap_serialize__saml2__AuthnContextDeclRef soap_serialize_string


#define soap__saml2__AuthnContextDeclRef2s(soap, a) (a)

#define soap_out__saml2__AuthnContextDeclRef soap_out_string


#define soap_s2_saml2__AuthnContextDeclRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AuthnContextDeclRef soap_in_string


#define soap_instantiate__saml2__AuthnContextDeclRef soap_instantiate_string


#define soap_new__saml2__AuthnContextDeclRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContextDeclRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AuthnContextDeclRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnContextDeclRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnContextDeclRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnContextDeclRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnContextDeclRef soap_get_string


#define soap_read__saml2__AuthnContextDeclRef soap_read_string


#define soap_GET__saml2__AuthnContextDeclRef soap_GET_string


#define soap_POST_recv__saml2__AuthnContextDeclRef soap_POST_recv_string

#endif
/* _saml2__AuthnContextClassRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AuthnContextClassRef_DEFINED
#define SOAP_TYPE__saml2__AuthnContextClassRef_DEFINED

#define soap_default__saml2__AuthnContextClassRef soap_default_string


#define soap_serialize__saml2__AuthnContextClassRef soap_serialize_string


#define soap__saml2__AuthnContextClassRef2s(soap, a) (a)

#define soap_out__saml2__AuthnContextClassRef soap_out_string


#define soap_s2_saml2__AuthnContextClassRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AuthnContextClassRef soap_in_string


#define soap_instantiate__saml2__AuthnContextClassRef soap_instantiate_string


#define soap_new__saml2__AuthnContextClassRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContextClassRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AuthnContextClassRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnContextClassRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnContextClassRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnContextClassRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnContextClassRef soap_get_string


#define soap_read__saml2__AuthnContextClassRef soap_read_string


#define soap_GET__saml2__AuthnContextClassRef soap_GET_string


#define soap_POST_recv__saml2__AuthnContextClassRef soap_POST_recv_string

#endif
/* _saml2__Audience is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__Audience_DEFINED
#define SOAP_TYPE__saml2__Audience_DEFINED

#define soap_default__saml2__Audience soap_default_string


#define soap_serialize__saml2__Audience soap_serialize_string


#define soap__saml2__Audience2s(soap, a) (a)

#define soap_out__saml2__Audience soap_out_string


#define soap_s2_saml2__Audience(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__Audience soap_in_string


#define soap_instantiate__saml2__Audience soap_instantiate_string


#define soap_new__saml2__Audience soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Audience(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__Audience(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Audience soap_get_string


#define soap_read__saml2__Audience soap_read_string


#define soap_GET__saml2__Audience soap_GET_string


#define soap_POST_recv__saml2__Audience soap_POST_recv_string

#endif
/* _saml2__AssertionURIRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AssertionURIRef_DEFINED
#define SOAP_TYPE__saml2__AssertionURIRef_DEFINED

#define soap_default__saml2__AssertionURIRef soap_default_string


#define soap_serialize__saml2__AssertionURIRef soap_serialize_string


#define soap__saml2__AssertionURIRef2s(soap, a) (a)

#define soap_out__saml2__AssertionURIRef soap_out_string


#define soap_s2_saml2__AssertionURIRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AssertionURIRef soap_in_string


#define soap_instantiate__saml2__AssertionURIRef soap_instantiate_string


#define soap_new__saml2__AssertionURIRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AssertionURIRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AssertionURIRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AssertionURIRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AssertionURIRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AssertionURIRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AssertionURIRef soap_get_string


#define soap_read__saml2__AssertionURIRef soap_read_string


#define soap_GET__saml2__AssertionURIRef soap_GET_string


#define soap_POST_recv__saml2__AssertionURIRef soap_POST_recv_string

#endif
/* _saml2__AssertionIDRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AssertionIDRef_DEFINED
#define SOAP_TYPE__saml2__AssertionIDRef_DEFINED

#define soap_default__saml2__AssertionIDRef soap_default_string


#define soap_serialize__saml2__AssertionIDRef soap_serialize_string


#define soap__saml2__AssertionIDRef2s(soap, a) (a)

#define soap_out__saml2__AssertionIDRef soap_out_string


#define soap_s2_saml2__AssertionIDRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AssertionIDRef soap_in_string


#define soap_instantiate__saml2__AssertionIDRef soap_instantiate_string


#define soap_new__saml2__AssertionIDRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AssertionIDRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AssertionIDRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AssertionIDRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AssertionIDRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AssertionIDRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AssertionIDRef soap_get_string


#define soap_read__saml2__AssertionIDRef soap_read_string


#define soap_GET__saml2__AssertionIDRef soap_GET_string


#define soap_POST_recv__saml2__AssertionIDRef soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerToPointerTo_ds__KeyInfo_DEFINED
#define SOAP_TYPE_PointerToPointerTo_ds__KeyInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ds__KeyInfo(struct soap*, const char *, int, struct ds__KeyInfoType **const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType *** SOAP_FMAC4 soap_in_PointerToPointerTo_ds__KeyInfo(struct soap*, const char*, struct ds__KeyInfoType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType *** SOAP_FMAC4 soap_get_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AttributeStatementType(struct soap*, const char *, int, struct __saml2__union_AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AttributeStatementType(struct soap*, const char*, struct __saml2__union_AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AttributeType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AttributeType(struct soap*, const char *, int, struct saml2__AttributeType *const*, const char *);
SOAP_FMAC3 struct saml2__AttributeType ** SOAP_FMAC4 soap_in_PointerTosaml2__AttributeType(struct soap*, const char*, struct saml2__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AttributeType ** SOAP_FMAC4 soap_get_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__EvidenceType_DEFINED
#define SOAP_TYPE_PointerTosaml2__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__EvidenceType(struct soap*, const char *, int, struct saml2__EvidenceType *const*, const char *);
SOAP_FMAC3 struct saml2__EvidenceType ** SOAP_FMAC4 soap_in_PointerTosaml2__EvidenceType(struct soap*, const char*, struct saml2__EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__EvidenceType ** SOAP_FMAC4 soap_get_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ActionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ActionType(struct soap*, const char *, int, struct saml2__ActionType *const*, const char *);
SOAP_FMAC3 struct saml2__ActionType ** SOAP_FMAC4 soap_in_PointerTosaml2__ActionType(struct soap*, const char*, struct saml2__ActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ActionType ** SOAP_FMAC4 soap_get_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthnContextType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthnContextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthnContextType(struct soap*, const char *, int, struct saml2__AuthnContextType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthnContextType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthnContextType(struct soap*, const char*, struct saml2__AuthnContextType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthnContextType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectLocalityType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectLocalityType(struct soap*, const char *, int, struct saml2__SubjectLocalityType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectLocalityType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectLocalityType(struct soap*, const char*, struct saml2__SubjectLocalityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectLocalityType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_EvidenceType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_EvidenceType(struct soap*, const char *, int, struct __saml2__union_EvidenceType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_EvidenceType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_EvidenceType(struct soap*, const char*, struct __saml2__union_EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_EvidenceType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AdviceType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AdviceType(struct soap*, const char *, int, struct __saml2__union_AdviceType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AdviceType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AdviceType(struct soap*, const char*, struct __saml2__union_AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AdviceType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AssertionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AssertionType(struct soap*, const char *, int, struct saml2__AssertionType *const*, const char *);
SOAP_FMAC3 struct saml2__AssertionType ** SOAP_FMAC4 soap_in_PointerTosaml2__AssertionType(struct soap*, const char*, struct saml2__AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AssertionType ** SOAP_FMAC4 soap_get_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_ConditionsType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_ConditionsType(struct soap*, const char *, int, struct __saml2__union_ConditionsType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_ConditionsType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_ConditionsType(struct soap*, const char*, struct __saml2__union_ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_ConditionsType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ProxyRestrictionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ProxyRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ProxyRestrictionType(struct soap*, const char *, int, struct saml2__ProxyRestrictionType *const*, const char *);
SOAP_FMAC3 struct saml2__ProxyRestrictionType ** SOAP_FMAC4 soap_in_PointerTosaml2__ProxyRestrictionType(struct soap*, const char*, struct saml2__ProxyRestrictionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ProxyRestrictionType ** SOAP_FMAC4 soap_get_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__OneTimeUseType_DEFINED
#define SOAP_TYPE_PointerTosaml2__OneTimeUseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__OneTimeUseType(struct soap*, const char *, int, struct saml2__OneTimeUseType *const*, const char *);
SOAP_FMAC3 struct saml2__OneTimeUseType ** SOAP_FMAC4 soap_in_PointerTosaml2__OneTimeUseType(struct soap*, const char*, struct saml2__OneTimeUseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__OneTimeUseType ** SOAP_FMAC4 soap_get_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AudienceRestrictionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AudienceRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AudienceRestrictionType(struct soap*, const char *, int, struct saml2__AudienceRestrictionType *const*, const char *);
SOAP_FMAC3 struct saml2__AudienceRestrictionType ** SOAP_FMAC4 soap_in_PointerTosaml2__AudienceRestrictionType(struct soap*, const char*, struct saml2__AudienceRestrictionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AudienceRestrictionType ** SOAP_FMAC4 soap_get_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ConditionAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ConditionAbstractType(struct soap*, const char *, int, struct saml2__ConditionAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__ConditionAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__ConditionAbstractType(struct soap*, const char*, struct saml2__ConditionAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ConditionAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectConfirmationDataType(struct soap*, const char *, int, struct saml2__SubjectConfirmationDataType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectConfirmationDataType(struct soap*, const char*, struct saml2__SubjectConfirmationDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectConfirmationType(struct soap*, const char *, int, struct saml2__SubjectConfirmationType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectConfirmationType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectConfirmationType(struct soap*, const char*, struct saml2__SubjectConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__EncryptedElementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__EncryptedElementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__EncryptedElementType(struct soap*, const char *, int, struct saml2__EncryptedElementType *const*, const char *);
SOAP_FMAC3 struct saml2__EncryptedElementType ** SOAP_FMAC4 soap_in_PointerTosaml2__EncryptedElementType(struct soap*, const char*, struct saml2__EncryptedElementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__EncryptedElementType ** SOAP_FMAC4 soap_get_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__BaseIDAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__BaseIDAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__BaseIDAbstractType(struct soap*, const char *, int, struct saml2__BaseIDAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__BaseIDAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__BaseIDAbstractType(struct soap*, const char*, struct saml2__BaseIDAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__BaseIDAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AssertionType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AssertionType(struct soap*, const char *, int, struct __saml2__union_AssertionType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AssertionType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AssertionType(struct soap*, const char*, struct __saml2__union_AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AssertionType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AttributeStatementType(struct soap*, const char *, int, struct saml2__AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AttributeStatementType(struct soap*, const char*, struct saml2__AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthzDecisionStatementType(struct soap*, const char *, int, struct saml2__AuthzDecisionStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthzDecisionStatementType(struct soap*, const char*, struct saml2__AuthzDecisionStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthnStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthnStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthnStatementType(struct soap*, const char *, int, struct saml2__AuthnStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthnStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthnStatementType(struct soap*, const char*, struct saml2__AuthnStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthnStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__StatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__StatementAbstractType(struct soap*, const char *, int, struct saml2__StatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__StatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__StatementAbstractType(struct soap*, const char*, struct saml2__StatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__StatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AdviceType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AdviceType(struct soap*, const char *, int, struct saml2__AdviceType *const*, const char *);
SOAP_FMAC3 struct saml2__AdviceType ** SOAP_FMAC4 soap_in_PointerTosaml2__AdviceType(struct soap*, const char*, struct saml2__AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AdviceType ** SOAP_FMAC4 soap_get_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ConditionsType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ConditionsType(struct soap*, const char *, int, struct saml2__ConditionsType *const*, const char *);
SOAP_FMAC3 struct saml2__ConditionsType ** SOAP_FMAC4 soap_in_PointerTosaml2__ConditionsType(struct soap*, const char*, struct saml2__ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ConditionsType ** SOAP_FMAC4 soap_get_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectType(struct soap*, const char *, int, struct saml2__SubjectType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectType(struct soap*, const char*, struct saml2__SubjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__NameIDType_DEFINED
#define SOAP_TYPE_PointerTosaml2__NameIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__NameIDType(struct soap*, const char *, int, struct saml2__NameIDType *const*, const char *);
SOAP_FMAC3 struct saml2__NameIDType ** SOAP_FMAC4 soap_in_PointerTosaml2__NameIDType(struct soap*, const char*, struct saml2__NameIDType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__NameIDType ** SOAP_FMAC4 soap_get_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToxenc__EncryptedKeyType(struct soap*, const char *, int, struct xenc__EncryptedKeyType **const*, const char *);
SOAP_FMAC3 struct xenc__EncryptedKeyType *** SOAP_FMAC4 soap_in_PointerToPointerToxenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType *** SOAP_FMAC4 soap_get_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType ***, const char*, const char*);
#endif
/* _saml1__AttributeValue is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml1__AttributeValue_DEFINED
#define SOAP_TYPE__saml1__AttributeValue_DEFINED
#endif
/* _saml1__ConfirmationMethod is a typedef synonym of string */

#ifndef SOAP_TYPE__saml1__ConfirmationMethod_DEFINED
#define SOAP_TYPE__saml1__ConfirmationMethod_DEFINED

#define soap_default__saml1__ConfirmationMethod soap_default_string


#define soap_serialize__saml1__ConfirmationMethod soap_serialize_string


#define soap__saml1__ConfirmationMethod2s(soap, a) (a)

#define soap_out__saml1__ConfirmationMethod soap_out_string


#define soap_s2_saml1__ConfirmationMethod(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml1__ConfirmationMethod soap_in_string


#define soap_instantiate__saml1__ConfirmationMethod soap_instantiate_string


#define soap_new__saml1__ConfirmationMethod soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__ConfirmationMethod(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml1__ConfirmationMethod(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml1__ConfirmationMethod(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__ConfirmationMethod(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__ConfirmationMethod(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__ConfirmationMethod soap_get_string


#define soap_read__saml1__ConfirmationMethod soap_read_string


#define soap_GET__saml1__ConfirmationMethod soap_GET_string


#define soap_POST_recv__saml1__ConfirmationMethod soap_POST_recv_string

#endif
/* _saml1__SubjectConfirmationData is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml1__SubjectConfirmationData_DEFINED
#define SOAP_TYPE__saml1__SubjectConfirmationData_DEFINED
#endif
/* _saml1__Audience is a typedef synonym of string */

#ifndef SOAP_TYPE__saml1__Audience_DEFINED
#define SOAP_TYPE__saml1__Audience_DEFINED

#define soap_default__saml1__Audience soap_default_string


#define soap_serialize__saml1__Audience soap_serialize_string


#define soap__saml1__Audience2s(soap, a) (a)

#define soap_out__saml1__Audience soap_out_string


#define soap_s2_saml1__Audience(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml1__Audience soap_in_string


#define soap_instantiate__saml1__Audience soap_instantiate_string


#define soap_new__saml1__Audience soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Audience(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml1__Audience(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml1__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Audience soap_get_string


#define soap_read__saml1__Audience soap_read_string


#define soap_GET__saml1__Audience soap_GET_string


#define soap_POST_recv__saml1__Audience soap_POST_recv_string

#endif
/* _saml1__AssertionIDReference is a typedef synonym of string */

#ifndef SOAP_TYPE__saml1__AssertionIDReference_DEFINED
#define SOAP_TYPE__saml1__AssertionIDReference_DEFINED

#define soap_default__saml1__AssertionIDReference soap_default_string


#define soap_serialize__saml1__AssertionIDReference soap_serialize_string


#define soap__saml1__AssertionIDReference2s(soap, a) (a)

#define soap_out__saml1__AssertionIDReference soap_out_string


#define soap_s2_saml1__AssertionIDReference(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml1__AssertionIDReference soap_in_string


#define soap_instantiate__saml1__AssertionIDReference soap_instantiate_string


#define soap_new__saml1__AssertionIDReference soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AssertionIDReference(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml1__AssertionIDReference(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml1__AssertionIDReference(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AssertionIDReference(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AssertionIDReference(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AssertionIDReference soap_get_string


#define soap_read__saml1__AssertionIDReference soap_read_string


#define soap_GET__saml1__AssertionIDReference soap_GET_string


#define soap_POST_recv__saml1__AssertionIDReference soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTosaml1__AttributeType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AttributeType(struct soap*, const char *, int, struct saml1__AttributeType *const*, const char *);
SOAP_FMAC3 struct saml1__AttributeType ** SOAP_FMAC4 soap_in_PointerTosaml1__AttributeType(struct soap*, const char*, struct saml1__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AttributeType ** SOAP_FMAC4 soap_get_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__EvidenceType_DEFINED
#define SOAP_TYPE_PointerTosaml1__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__EvidenceType(struct soap*, const char *, int, struct saml1__EvidenceType *const*, const char *);
SOAP_FMAC3 struct saml1__EvidenceType ** SOAP_FMAC4 soap_in_PointerTosaml1__EvidenceType(struct soap*, const char*, struct saml1__EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__EvidenceType ** SOAP_FMAC4 soap_get_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ActionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ActionType(struct soap*, const char *, int, struct saml1__ActionType *const*, const char *);
SOAP_FMAC3 struct saml1__ActionType ** SOAP_FMAC4 soap_in_PointerTosaml1__ActionType(struct soap*, const char*, struct saml1__ActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ActionType ** SOAP_FMAC4 soap_get_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthorityBindingType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthorityBindingType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthorityBindingType(struct soap*, const char *, int, struct saml1__AuthorityBindingType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthorityBindingType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthorityBindingType(struct soap*, const char*, struct saml1__AuthorityBindingType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthorityBindingType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectLocalityType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectLocalityType(struct soap*, const char *, int, struct saml1__SubjectLocalityType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectLocalityType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectLocalityType(struct soap*, const char*, struct saml1__SubjectLocalityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectLocalityType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectType(struct soap*, const char *, int, struct saml1__SubjectType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectType(struct soap*, const char*, struct saml1__SubjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_EvidenceType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_EvidenceType(struct soap*, const char *, int, struct __saml1__union_EvidenceType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_EvidenceType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_EvidenceType(struct soap*, const char*, struct __saml1__union_EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_EvidenceType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectConfirmationType(struct soap*, const char *, int, struct saml1__SubjectConfirmationType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectConfirmationType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectConfirmationType(struct soap*, const char*, struct saml1__SubjectConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectConfirmationType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__NameIdentifierType_DEFINED
#define SOAP_TYPE_PointerTosaml1__NameIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__NameIdentifierType(struct soap*, const char *, int, struct saml1__NameIdentifierType *const*, const char *);
SOAP_FMAC3 struct saml1__NameIdentifierType ** SOAP_FMAC4 soap_in_PointerTosaml1__NameIdentifierType(struct soap*, const char*, struct saml1__NameIdentifierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__NameIdentifierType ** SOAP_FMAC4 soap_get_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_AdviceType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_AdviceType(struct soap*, const char *, int, struct __saml1__union_AdviceType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_AdviceType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_AdviceType(struct soap*, const char*, struct __saml1__union_AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_AdviceType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AssertionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AssertionType(struct soap*, const char *, int, struct saml1__AssertionType *const*, const char *);
SOAP_FMAC3 struct saml1__AssertionType ** SOAP_FMAC4 soap_in_PointerTosaml1__AssertionType(struct soap*, const char*, struct saml1__AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AssertionType ** SOAP_FMAC4 soap_get_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__dateTime_DEFINED
#define SOAP_TYPE_PointerToxsd__dateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__dateTime(struct soap*, struct timeval *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__dateTime(struct soap*, const char *, int, struct timeval *const*, const char *);
SOAP_FMAC3 struct timeval ** SOAP_FMAC4 soap_in_PointerToxsd__dateTime(struct soap*, const char*, struct timeval **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__dateTime(struct soap*, struct timeval *const*, const char*, const char*);
SOAP_FMAC3 struct timeval ** SOAP_FMAC4 soap_get_PointerToxsd__dateTime(struct soap*, struct timeval **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_ConditionsType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_ConditionsType(struct soap*, const char *, int, struct __saml1__union_ConditionsType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_ConditionsType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_ConditionsType(struct soap*, const char*, struct __saml1__union_ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_ConditionsType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ConditionAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ConditionAbstractType(struct soap*, const char *, int, struct saml1__ConditionAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__ConditionAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__ConditionAbstractType(struct soap*, const char*, struct saml1__ConditionAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ConditionAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__DoNotCacheConditionType(struct soap*, const char *, int, struct saml1__DoNotCacheConditionType *const*, const char *);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType ** SOAP_FMAC4 soap_in_PointerTosaml1__DoNotCacheConditionType(struct soap*, const char*, struct saml1__DoNotCacheConditionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType ** SOAP_FMAC4 soap_get_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, const char *, int, struct saml1__AudienceRestrictionConditionType *const*, const char *);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType ** SOAP_FMAC4 soap_in_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, const char*, struct saml1__AudienceRestrictionConditionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType ** SOAP_FMAC4 soap_get_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ds__Signature_DEFINED
#define SOAP_TYPE_PointerTo_ds__Signature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__Signature(struct soap*, const char *, int, struct ds__SignatureType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTo_ds__Signature(struct soap*, const char*, struct ds__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_AssertionType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_AssertionType(struct soap*, const char *, int, struct __saml1__union_AssertionType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_AssertionType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_AssertionType(struct soap*, const char*, struct __saml1__union_AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_AssertionType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AttributeStatementType(struct soap*, const char *, int, struct saml1__AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AttributeStatementType(struct soap*, const char*, struct saml1__AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, const char *, int, struct saml1__AuthorizationDecisionStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, const char*, struct saml1__AuthorizationDecisionStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthenticationStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthenticationStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthenticationStatementType(struct soap*, const char *, int, struct saml1__AuthenticationStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthenticationStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthenticationStatementType(struct soap*, const char*, struct saml1__AuthenticationStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthenticationStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectStatementAbstractType(struct soap*, const char *, int, struct saml1__SubjectStatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectStatementAbstractType(struct soap*, const char*, struct saml1__SubjectStatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__StatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__StatementAbstractType(struct soap*, const char *, int, struct saml1__StatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__StatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__StatementAbstractType(struct soap*, const char*, struct saml1__StatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__StatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AdviceType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AdviceType(struct soap*, const char *, int, struct saml1__AdviceType *const*, const char *);
SOAP_FMAC3 struct saml1__AdviceType ** SOAP_FMAC4 soap_in_PointerTosaml1__AdviceType(struct soap*, const char*, struct saml1__AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AdviceType ** SOAP_FMAC4 soap_get_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ConditionsType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ConditionsType(struct soap*, const char *, int, struct saml1__ConditionsType *const*, const char *);
SOAP_FMAC3 struct saml1__ConditionsType ** SOAP_FMAC4 soap_in_PointerTosaml1__ConditionsType(struct soap*, const char*, struct saml1__ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ConditionsType ** SOAP_FMAC4 soap_get_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence_DEFINED
#define SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char *, int, struct __wsc__DerivedKeyTokenType_sequence *const*, const char *);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_in_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*, const char*, const char*);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_get_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToULONG64_DEFINED
#define SOAP_TYPE_PointerToULONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToULONG64(struct soap*, ULONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToULONG64(struct soap*, const char *, int, ULONG64 *const*, const char *);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerToULONG64(struct soap*, const char*, ULONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToULONG64(struct soap*, ULONG64 *const*, const char*, const char*);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerToULONG64(struct soap*, ULONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsc__PropertiesType_DEFINED
#define SOAP_TYPE_PointerTowsc__PropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__PropertiesType(struct soap*, const char *, int, struct wsc__PropertiesType *const*, const char *);
SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_in_PointerTowsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*, const char*, const char*);
SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_get_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsc__FaultCodeOpenEnumType_DEFINED
#define SOAP_TYPE_wsc__FaultCodeOpenEnumType_DEFINED

inline void soap_default_wsc__FaultCodeOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsc__FaultCodeOpenEnumType
	*a = SOAP_DEFAULT_wsc__FaultCodeOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__FaultCodeOpenEnumType(struct soap*, char *const*);

#define soap_wsc__FaultCodeOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsc__FaultCodeOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsc__FaultCodeOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsc__FaultCodeOpenEnumType soap_instantiate_string


#define soap_new_wsc__FaultCodeOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsc__FaultCodeOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsc__FaultCodeOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsc__FaultCodeOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsc__FaultCodeOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__FaultCodeOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__FaultCodeOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsc__FaultCodeOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTo_xenc__ReferenceList_DEFINED
#define SOAP_TYPE_PointerTo_xenc__ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xenc__ReferenceList(struct soap*, const char *, int, struct _xenc__ReferenceList *const*, const char *);
SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_in_PointerTo_xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*, const char*, const char*);
SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_get_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__xenc__union_ReferenceList_DEFINED
#define SOAP_TYPE_PointerTo__xenc__union_ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__xenc__union_ReferenceList(struct soap*, const char *, int, struct __xenc__union_ReferenceList *const*, const char *);
SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_in_PointerTo__xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*, const char*, const char*);
SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_get_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__ReferenceType_DEFINED
#define SOAP_TYPE_PointerToxenc__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__ReferenceType(struct soap*, const char *, int, struct xenc__ReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertyType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertyType(struct soap*, const char *, int, struct xenc__EncryptionPropertyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__TransformsType_DEFINED
#define SOAP_TYPE_PointerToxenc__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__TransformsType(struct soap*, const char *, int, struct xenc__TransformsType *const*, const char *);
SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_in_PointerToxenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_get_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__CipherReferenceType_DEFINED
#define SOAP_TYPE_PointerToxenc__CipherReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherReferenceType(struct soap*, const char *, int, struct xenc__CipherReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertiesType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertiesType(struct soap*, const char *, int, struct xenc__EncryptionPropertiesType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__CipherDataType_DEFINED
#define SOAP_TYPE_PointerToxenc__CipherDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherDataType(struct soap*, const char *, int, struct xenc__CipherDataType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ds__KeyInfo_DEFINED
#define SOAP_TYPE_PointerTo_ds__KeyInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__KeyInfo(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTo_ds__KeyInfo(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionMethodType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionMethodType(struct soap*, const char *, int, struct xenc__EncryptionMethodType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__X509IssuerSerialType_DEFINED
#define SOAP_TYPE_PointerTods__X509IssuerSerialType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509IssuerSerialType(struct soap*, const char *, int, struct ds__X509IssuerSerialType *const*, const char *);
SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_in_PointerTods__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_get_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__RSAKeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__RSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RSAKeyValueType(struct soap*, const char *, int, struct ds__RSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__DSAKeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__DSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DSAKeyValueType(struct soap*, const char *, int, struct ds__DSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__TransformType_DEFINED
#define SOAP_TYPE_PointerTods__TransformType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformType(struct soap*, const char *, int, struct ds__TransformType *const*, const char *);
SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_in_PointerTods__TransformType(struct soap*, const char*, struct ds__TransformType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_get_PointerTods__TransformType(struct soap*, struct ds__TransformType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__DigestMethodType_DEFINED
#define SOAP_TYPE_PointerTods__DigestMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DigestMethodType(struct soap*, const char *, int, struct ds__DigestMethodType *const*, const char *);
SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_in_PointerTods__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_get_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__TransformsType_DEFINED
#define SOAP_TYPE_PointerTods__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformsType(struct soap*, const char *, int, struct ds__TransformsType *const*, const char *);
SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_in_PointerTods__TransformsType(struct soap*, const char*, struct ds__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_get_PointerTods__TransformsType(struct soap*, struct ds__TransformsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTods__ReferenceType_DEFINED
#define SOAP_TYPE_PointerToPointerTods__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType **const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_in_PointerToPointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*, const char*, const char*);
SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_get_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__ReferenceType_DEFINED
#define SOAP_TYPE_PointerTods__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType *const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_in_PointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_get_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignatureMethodType_DEFINED
#define SOAP_TYPE_PointerTods__SignatureMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureMethodType(struct soap*, const char *, int, struct ds__SignatureMethodType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_in_PointerTods__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_get_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__CanonicalizationMethodType_DEFINED
#define SOAP_TYPE_PointerTods__CanonicalizationMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__CanonicalizationMethodType(struct soap*, const char *, int, struct ds__CanonicalizationMethodType *const*, const char *);
SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_in_PointerTods__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_get_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__SecurityTokenReference_DEFINED
#define SOAP_TYPE_PointerTo_wsse__SecurityTokenReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__SecurityTokenReference(struct soap*, const char *, int, struct _wsse__SecurityTokenReference *const*, const char *);
SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_in_PointerTo_wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_get_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__RetrievalMethodType_DEFINED
#define SOAP_TYPE_PointerTods__RetrievalMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RetrievalMethodType(struct soap*, const char *, int, struct ds__RetrievalMethodType *const*, const char *);
SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_in_PointerTods__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_get_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__KeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__KeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyValueType(struct soap*, const char *, int, struct ds__KeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_in_PointerTods__KeyValueType(struct soap*, const char*, struct ds__KeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_get_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces_DEFINED
#define SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char *, int, struct _c14n__InclusiveNamespaces *const*, const char *);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_in_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*, const char*, const char*);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_get_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__KeyInfoType_DEFINED
#define SOAP_TYPE_PointerTods__KeyInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyInfoType(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTods__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignedInfoType_DEFINED
#define SOAP_TYPE_PointerTods__SignedInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignedInfoType(struct soap*, const char *, int, struct ds__SignedInfoType *const*, const char *);
SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_in_PointerTods__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_get_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType **, const char*, const char*);
#endif
/* _ds__SignatureValue is a typedef synonym of string */

#ifndef SOAP_TYPE__ds__SignatureValue_DEFINED
#define SOAP_TYPE__ds__SignatureValue_DEFINED

#define soap_default__ds__SignatureValue soap_default_string


#define soap_serialize__ds__SignatureValue soap_serialize_string


#define soap__ds__SignatureValue2s(soap, a) (a)

#define soap_out__ds__SignatureValue soap_out_string


#define soap_s2_ds__SignatureValue(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__ds__SignatureValue soap_in_string


#define soap_instantiate__ds__SignatureValue soap_instantiate_string


#define soap_new__ds__SignatureValue soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__SignatureValue(struct soap*, char *const*, const char*, const char*);

inline int soap_write__ds__SignatureValue(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ds__SignatureValue(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__SignatureValue(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__SignatureValue(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__SignatureValue soap_get_string


#define soap_read__ds__SignatureValue soap_read_string


#define soap_GET__ds__SignatureValue soap_GET_string


#define soap_POST_recv__ds__SignatureValue soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptedKeyType(struct soap*, const char *, int, struct xenc__EncryptedKeyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__X509DataType_DEFINED
#define SOAP_TYPE_PointerTods__X509DataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509DataType(struct soap*, const char *, int, struct ds__X509DataType *const*, const char *);
SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_in_PointerTods__X509DataType(struct soap*, const char*, struct ds__X509DataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_get_PointerTods__X509DataType(struct soap*, struct ds__X509DataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Embedded_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Embedded_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Embedded(struct soap*, const char *, int, struct _wsse__Embedded *const*, const char *);
SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_in_PointerTo_wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_get_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__KeyIdentifier_DEFINED
#define SOAP_TYPE_PointerTo_wsse__KeyIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__KeyIdentifier(struct soap*, const char *, int, struct _wsse__KeyIdentifier *const*, const char *);
SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_in_PointerTo_wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_get_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Reference_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Reference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Reference(struct soap*, const char *, int, struct _wsse__Reference *const*, const char *);
SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_in_PointerTo_wsse__Reference(struct soap*, const char*, struct _wsse__Reference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_get_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedInt_DEFINED
#define SOAP_TYPE_PointerTounsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap*, unsigned int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap*, const char *, int, unsigned int *const*, const char *);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap*, const char*, unsigned int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap*, unsigned int *const*, const char*, const char*);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap*, unsigned int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsse__EncodedString_DEFINED
#define SOAP_TYPE_PointerTowsse__EncodedString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsse__EncodedString(struct soap*, const char *, int, struct wsse__EncodedString *const*, const char *);
SOAP_FMAC3 struct wsse__EncodedString ** SOAP_FMAC4 soap_in_PointerTowsse__EncodedString(struct soap*, const char*, struct wsse__EncodedString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString *const*, const char*, const char*);
SOAP_FMAC3 struct wsse__EncodedString ** SOAP_FMAC4 soap_get_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Password_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Password_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Password(struct soap*, const char *, int, struct _wsse__Password *const*, const char *);
SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_in_PointerTo_wsse__Password(struct soap*, const char*, struct _wsse__Password **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_get_PointerTo_wsse__Password(struct soap*, struct _wsse__Password **, const char*, const char*);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__From_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__From_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);
#endif
/* _wsa5__ProblemIRI is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI_DEFINED
#define SOAP_TYPE__wsa5__ProblemIRI_DEFINED

#define soap_default__wsa5__ProblemIRI soap_default_string


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap__wsa5__ProblemIRI2s(soap, a) (a)

#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_s2_wsa5__ProblemIRI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_instantiate__wsa5__ProblemIRI soap_instantiate_string


#define soap_new__wsa5__ProblemIRI soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemIRI(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__ProblemIRI(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemIRI soap_get_string


#define soap_read__wsa5__ProblemIRI soap_read_string


#define soap_GET__wsa5__ProblemIRI soap_GET_string


#define soap_POST_recv__wsa5__ProblemIRI soap_POST_recv_string

#endif
/* _wsa5__ProblemHeaderQName is a typedef synonym of _QName */

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED
#define SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED

#define soap_default__wsa5__ProblemHeaderQName soap_default__QName


#define soap_serialize__wsa5__ProblemHeaderQName soap_serialize__QName


#define soap__wsa5__ProblemHeaderQName2s(soap, a) soap_QName2s(soap, (a))

#define soap_out__wsa5__ProblemHeaderQName soap_out__QName


#define soap_s2_wsa5__ProblemHeaderQName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)

#define soap_in__wsa5__ProblemHeaderQName soap_in__QName


#define soap_instantiate__wsa5__ProblemHeaderQName soap_instantiate__QName


#define soap_new__wsa5__ProblemHeaderQName soap_new__QName


#define soap_put__wsa5__ProblemHeaderQName soap_put__QName


#define soap_write__wsa5__ProblemHeaderQName soap_write__QName


#define soap_PUT__wsa5__ProblemHeaderQName soap_PUT__QName


#define soap_PATCH__wsa5__ProblemHeaderQName soap_PATCH__QName


#define soap_POST_send__wsa5__ProblemHeaderQName soap_POST_send__QName


#define soap_get__wsa5__ProblemHeaderQName soap_get__QName


#define soap_read__wsa5__ProblemHeaderQName soap_read__QName


#define soap_GET__wsa5__ProblemHeaderQName soap_GET__QName


#define soap_POST_recv__wsa5__ProblemHeaderQName soap_POST_recv__QName

#endif
/* _wsa5__Action is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__Action_DEFINED
#define SOAP_TYPE__wsa5__Action_DEFINED

#define soap_default__wsa5__Action soap_default_string


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap__wsa5__Action2s(soap, a) (a)

#define soap_out__wsa5__Action soap_out_string


#define soap_s2_wsa5__Action(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__Action soap_in_string


#define soap_instantiate__wsa5__Action soap_instantiate_string


#define soap_new__wsa5__Action soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Action(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__Action(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Action soap_get_string


#define soap_read__wsa5__Action soap_read_string


#define soap_GET__wsa5__Action soap_GET_string


#define soap_POST_recv__wsa5__Action soap_POST_recv_string

#endif
/* _wsa5__To is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__To_DEFINED
#define SOAP_TYPE__wsa5__To_DEFINED

#define soap_default__wsa5__To soap_default_string


#define soap_serialize__wsa5__To soap_serialize_string


#define soap__wsa5__To2s(soap, a) (a)

#define soap_out__wsa5__To soap_out_string


#define soap_s2_wsa5__To(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__To soap_in_string


#define soap_instantiate__wsa5__To soap_instantiate_string


#define soap_new__wsa5__To soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__To(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__To(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__To soap_get_string


#define soap_read__wsa5__To soap_read_string


#define soap_GET__wsa5__To soap_GET_string


#define soap_POST_recv__wsa5__To soap_POST_recv_string

#endif
/* _wsa5__MessageID is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__MessageID_DEFINED
#define SOAP_TYPE__wsa5__MessageID_DEFINED

#define soap_default__wsa5__MessageID soap_default_string


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap__wsa5__MessageID2s(soap, a) (a)

#define soap_out__wsa5__MessageID soap_out_string


#define soap_s2_wsa5__MessageID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__MessageID soap_in_string


#define soap_instantiate__wsa5__MessageID soap_instantiate_string


#define soap_new__wsa5__MessageID soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__MessageID(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__MessageID(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__MessageID soap_get_string


#define soap_read__wsa5__MessageID soap_read_string


#define soap_GET__wsa5__MessageID soap_GET_string


#define soap_POST_recv__wsa5__MessageID soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
#define SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED

inline void soap_default_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType
	*a = SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);

#define soap_wsa5__FaultCodesOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__FaultCodesOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__FaultCodesOpenEnumType soap_instantiate_string


#define soap_new_wsa5__FaultCodesOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED

inline void soap_default_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum
	*a = SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);

#define soap_wsa5__RelationshipTypeOpenEnum2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__RelationshipTypeOpenEnum(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__RelationshipTypeOpenEnum soap_instantiate_string


#define soap_new_wsa5__RelationshipTypeOpenEnum soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipTypeOpenEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__AuxiliaryData(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__AuxiliaryData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, std::vector<enum tt__PTZPresetTourDirection> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const std::vector<enum tt__PTZPresetTourDirection> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const char*, int, const std::vector<enum tt__PTZPresetTourDirection> *, const char*);
SOAP_FMAC3 std::vector<enum tt__PTZPresetTourDirection> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const char*, std::vector<enum tt__PTZPresetTourDirection> *, const char*);
SOAP_FMAC1 std::vector<enum tt__PTZPresetTourDirection>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__PTZPresetTourDirection>  * soap_new_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReferenceToken(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReferenceToken(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReferenceToken(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOftt__ReferenceToken(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ReferenceToken(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, std::vector<tt__PTZPresetTourSpot *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const std::vector<tt__PTZPresetTourSpot *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const char*, int, const std::vector<tt__PTZPresetTourSpot *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZPresetTourSpot *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const char*, std::vector<tt__PTZPresetTourSpot *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZPresetTourSpot *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZPresetTourSpot *>  * soap_new_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, std::vector<tt__Space1DDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const std::vector<tt__Space1DDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const char*, int, const std::vector<tt__Space1DDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__Space1DDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const char*, std::vector<tt__Space1DDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__Space1DDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Space1DDescription *>  * soap_new_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, std::vector<tt__Space2DDescription *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const std::vector<tt__Space2DDescription *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const char*, int, const std::vector<tt__Space2DDescription *> *, const char*);
SOAP_FMAC3 std::vector<tt__Space2DDescription *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const char*, std::vector<tt__Space2DDescription *> *, const char*);
SOAP_FMAC1 std::vector<tt__Space2DDescription *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Space2DDescription *>  * soap_new_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReverseMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__ReverseMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReverseMode(struct soap*, std::vector<enum tt__ReverseMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReverseMode(struct soap*, const std::vector<enum tt__ReverseMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReverseMode(struct soap*, const char*, int, const std::vector<enum tt__ReverseMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__ReverseMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReverseMode(struct soap*, const char*, std::vector<enum tt__ReverseMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__ReverseMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReverseMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ReverseMode>  * soap_new_std__vectorTemplateOftt__ReverseMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__ReverseMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__EFlipMode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__EFlipMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__EFlipMode(struct soap*, std::vector<enum tt__EFlipMode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__EFlipMode(struct soap*, const std::vector<enum tt__EFlipMode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__EFlipMode(struct soap*, const char*, int, const std::vector<enum tt__EFlipMode> *, const char*);
SOAP_FMAC3 std::vector<enum tt__EFlipMode> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__EFlipMode(struct soap*, const char*, std::vector<enum tt__EFlipMode> *, const char*);
SOAP_FMAC1 std::vector<enum tt__EFlipMode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__EFlipMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__EFlipMode>  * soap_new_std__vectorTemplateOftt__EFlipMode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__EFlipMode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, std::vector<enum tt__PTZPresetTourOperation> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const std::vector<enum tt__PTZPresetTourOperation> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const char*, int, const std::vector<enum tt__PTZPresetTourOperation> *, const char*);
SOAP_FMAC3 std::vector<enum tt__PTZPresetTourOperation> * SOAP_FMAC4 soap_in_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const char*, std::vector<enum tt__PTZPresetTourOperation> *, const char*);
SOAP_FMAC1 std::vector<enum tt__PTZPresetTourOperation>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__PTZPresetTourOperation>  * soap_new_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PresetTour_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PresetTour_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, std::vector<tt__PresetTour *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const std::vector<tt__PresetTour *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const char*, int, const std::vector<tt__PresetTour *> *, const char*);
SOAP_FMAC3 std::vector<tt__PresetTour *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, const char*, std::vector<tt__PresetTour *> *, const char*);
SOAP_FMAC1 std::vector<tt__PresetTour *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PresetTour(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PresetTour *>  * soap_new_std__vectorTemplateOfPointerTott__PresetTour(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PresetTour(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPreset_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPreset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, std::vector<tt__PTZPreset *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const std::vector<tt__PTZPreset *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const char*, int, const std::vector<tt__PTZPreset *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZPreset *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, const char*, std::vector<tt__PTZPreset *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZPreset *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZPreset(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZPreset *>  * soap_new_std__vectorTemplateOfPointerTott__PTZPreset(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZPreset(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZConfiguration_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, std::vector<tt__PTZConfiguration *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const std::vector<tt__PTZConfiguration *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const char*, int, const std::vector<tt__PTZConfiguration *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZConfiguration *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, const char*, std::vector<tt__PTZConfiguration *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZConfiguration *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZConfiguration *>  * soap_new_std__vectorTemplateOfPointerTott__PTZConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZConfiguration(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZNode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZNode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, std::vector<tt__PTZNode *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const std::vector<tt__PTZNode *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const char*, int, const std::vector<tt__PTZNode *> *, const char*);
SOAP_FMAC3 std::vector<tt__PTZNode *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, const char*, std::vector<tt__PTZNode *> *, const char*);
SOAP_FMAC1 std::vector<tt__PTZNode *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZNode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZNode *>  * soap_new_std__vectorTemplateOfPointerTott__PTZNode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTott__PTZNode(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
